                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000              3   
0000              4   CLK  EQU 22118400
0000              5   BAUD equ 115200
0000              6   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000              7   
0000              8   
0000              9   ; These �EQU� must match the wiring between the microcontroller and ADC
0000             10   CE_ADC EQU P2.0
0000             11   MY_MOSI EQU P2.1
0000             12   MY_MISO EQU P2.2
0000             13   MY_SCLK EQU P2.3
0000             14   
0000             15   ; For the 7-segment display
0000             16   SEGA equ P0.3
0000             17   SEGB equ P0.5
0000             18   SEGC equ P0.7
0000             19   SEGD equ P4.4
0000             20   SEGE equ P4.5
0000             21   SEGF equ P0.4
0000             22   SEGG equ P0.6
0000             23   SEGP equ P2.7
0000             24   CA1  equ P0.2
0000             25   CA2  equ P0.0
0000             26   CA3  equ P0.1
0000             27   
0000             28   
0030             29   DSEG at 30H
0030             30   x:   ds 4
0034             31   y:   ds 4
0038             32   Result: ds 4
003C             33   bcd: ds 5
0041             34   ;Count1ms:     ds 2 ; Used to determine when half second has passed
0041             35   ;BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0041             36   Disp1:  ds 1 
0042             37   Disp2:  ds 1
0043             38   Disp3:  ds 1
0044             39   state:  ds 1
0045             40   
0000             41   BSEG
0000             42   mf: dbit 1
0001             43   
                546   $LIST
                 45   $LIST
0270             47   
0270             48   
0270             49   
0270             50   
0270             51   cseg
0270             52   ; These 'equ' must match the wiring between the microcontroller and the LCD!
0270             53   LCD_RS equ P1.1
0270             54   LCD_RW equ P1.2
0270             55   LCD_E  equ P1.3
0270             56   LCD_D4 equ P3.2
0270             57   LCD_D5 equ P3.3
0270             58   LCD_D6 equ P3.4
0270             59   LCD_D7 equ P3.5
                 61   $LIST
033C             63   
033C             64   
033C             65   
033C             66   
                 67   Left_blank mac
                 68   	mov a, %0
                 69   	anl a, #0xf0
                 70   	swap a
                 71   	jz Left_blank_%M_a
                 72   	ljmp %1
                 73   Left_blank_%M_a:
                 74   	Display_char(#' ')
                 75   	mov a, %0
                 76   	anl a, #0x0f
                 77   	jz Left_blank_%M_b
                 78   	ljmp %1
                 79   Left_blank_%M_b:
                 80   	Display_char(#' ')
                 81   endmac
033C             82   
033C             83   ; Sends 10-digit BCD number in bcd to the LCD
033C             84   Display_10_digit_BCD:
033C C0E0        85            push acc
033E 7407        85            mov a, #7
0340 14          85            dec a
0341 120301      85            lcall ?Set_Cursor_2 ; Select column and row
0344 D0E0        85            pop acc
0346 C000        86            push ar0
0348 A840        86            mov r0, bcd+4
034A 120308      86            lcall ?Display_BCD
034D D000        86            pop ar0
034F C000        87            push ar0
0351 A83F        87            mov r0, bcd+3
0353 120308      87            lcall ?Display_BCD
0356 D000        87            pop ar0
0358 C000        88            push ar0
035A A83E        88            mov r0, bcd+2
035C 120308      88            lcall ?Display_BCD
035F D000        88            pop ar0
0361 C000        89            push ar0
0363 A83D        89            mov r0, bcd+1
0365 120308      89            lcall ?Display_BCD
0368 D000        89            pop ar0
036A C000        90            push ar0
036C A83C        90            mov r0, bcd+0
036E 120308      90            lcall ?Display_BCD
0371 D000        90            pop ar0
0373             91            ; Replace all the zeros to the left with blanks
0373 C0E0        92            push acc
0375 7407        92            mov a, #7
0377 14          92            dec a
0378 120301      92            lcall ?Set_Cursor_2 ; Select column and row
037B D0E0        92            pop acc
037D E540        93            mov a, bcd+4
037F 54F0        93            anl a, #0xf0
0381 C4          93            swap a
0382 6003        93            jz Left_blank_15_a
0384 020421      93            ljmp skip_blank
0387             93   Left_blank_15_a:
0387 C0E0        93            push acc
0389 7420        93            mov a, #' '
038B 1202C0      93            lcall ?WriteData
038E D0E0        93            pop acc
0390 E540        93            mov a, bcd+4
0392 540F        93            anl a, #0x0f
0394 6003        93            jz Left_blank_15_b
0396 020421      93            ljmp skip_blank
0399             93   Left_blank_15_b:
0399 C0E0        93            push acc
039B 7420        93            mov a, #' '
039D 1202C0      93            lcall ?WriteData
03A0 D0E0        93            pop acc
03A2 E53F        94            mov a, bcd+3
03A4 54F0        94            anl a, #0xf0
03A6 C4          94            swap a
03A7 6003        94            jz Left_blank_18_a
03A9 020421      94            ljmp skip_blank
03AC             94   Left_blank_18_a:
03AC C0E0        94            push acc
03AE 7420        94            mov a, #' '
03B0 1202C0      94            lcall ?WriteData
03B3 D0E0        94            pop acc
03B5 E53F        94            mov a, bcd+3
03B7 540F        94            anl a, #0x0f
03B9 6003        94            jz Left_blank_18_b
03BB 020421      94            ljmp skip_blank
03BE             94   Left_blank_18_b:
03BE C0E0        94            push acc
03C0 7420        94            mov a, #' '
03C2 1202C0      94            lcall ?WriteData
03C5 D0E0        94            pop acc
03C7 E53E        95            mov a, bcd+2
03C9 54F0        95            anl a, #0xf0
03CB C4          95            swap a
03CC 6003        95            jz Left_blank_21_a
03CE 020421      95            ljmp skip_blank
03D1             95   Left_blank_21_a:
03D1 C0E0        95            push acc
03D3 7420        95            mov a, #' '
03D5 1202C0      95            lcall ?WriteData
03D8 D0E0        95            pop acc
03DA E53E        95            mov a, bcd+2
03DC 540F        95            anl a, #0x0f
03DE 6003        95            jz Left_blank_21_b
03E0 020421      95            ljmp skip_blank
03E3             95   Left_blank_21_b:
03E3 C0E0        95            push acc
03E5 7420        95            mov a, #' '
03E7 1202C0      95            lcall ?WriteData
03EA D0E0        95            pop acc
03EC E53D        96            mov a, bcd+1
03EE 54F0        96            anl a, #0xf0
03F0 C4          96            swap a
03F1 6003        96            jz Left_blank_24_a
03F3 020421      96            ljmp skip_blank
03F6             96   Left_blank_24_a:
03F6 C0E0        96            push acc
03F8 7420        96            mov a, #' '
03FA 1202C0      96            lcall ?WriteData
03FD D0E0        96            pop acc
03FF E53D        96            mov a, bcd+1
0401 540F        96            anl a, #0x0f
0403 6003        96            jz Left_blank_24_b
0405 020421      96            ljmp skip_blank
0408             96   Left_blank_24_b:
0408 C0E0        96            push acc
040A 7420        96            mov a, #' '
040C 1202C0      96            lcall ?WriteData
040F D0E0        96            pop acc
0411 E53C        97            mov a, bcd+0
0413 54F0        98            anl a, #0f0h
0415 C4          99            swap a
0416 7009       100            jnz skip_blank
0418 C0E0       101            push acc
041A 7420       101            mov a, #' '
041C 1202C0     101            lcall ?WriteData
041F D0E0       101            pop acc
0421            102   skip_blank:
0421 22         103            ret
0422            104   
0422            105   ; We can display a number any way we want.  In this case with
0422            106   ; four decimal places.
0422            107   Display_formated_BCD:
0422 C0E0       108            push acc
0424 7407       108            mov a, #7
0426 14         108            dec a
0427 120301     108            lcall ?Set_Cursor_2 ; Select column and row
042A D0E0       108            pop acc
042C C0E0       109            push acc
042E 7420       109            mov a, #' '
0430 1202C0     109            lcall ?WriteData
0433 D0E0       109            pop acc
0435 C000       110            push ar0
0437 A83F       110            mov r0, bcd+3
0439 120308     110            lcall ?Display_BCD
043C D000       110            pop ar0
043E C000       111            push ar0
0440 A83E       111            mov r0, bcd+2
0442 120308     111            lcall ?Display_BCD
0445 D000       111            pop ar0
0447 C0E0       112            push acc
0449 742E       112            mov a, #'.'
044B 1202C0     112            lcall ?WriteData
044E D0E0       112            pop acc
0450 C000       113            push ar0
0452 A83D       113            mov r0, bcd+1
0454 120308     113            lcall ?Display_BCD
0457 D000       113            pop ar0
0459 C000       114            push ar0
045B A83C       114            mov r0, bcd+0
045D 120308     114            lcall ?Display_BCD
0460 D000       114            pop ar0
0462 22         115            ret
0463            116   
0463 54656D70   117   Test_msg:  db 'Temp:xx', 0
     3A787800
046B            118   
046B            119   
046B            120   ; Configure the serial port and baud rate
046B            121   InitSerialPort:
046B            122       ; Since the reset button bounces, we need to wait a bit before
046B            123       ; sending messages, otherwise we risk displaying gibberish!
046B 79DE       124       mov R1, #222
046D 78A6       125       mov R0, #166
046F D8FE       126       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0471 D9FA       127       djnz R1, $-4 ; 22.51519us*222=4.998ms
0473            128       ; Now we can proceed with the configuration
0473 438780     129            orl     PCON,#0x80
0476 759852     130            mov     SCON,#0x52
0479 759B00     131            mov     BDRCON,#0x00
047C 759AF4     132            mov     BRL,#BRG_VAL
047F 759B1E     133            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0482 22         134       ret
0483            135   
0483            136   ; Send a character using the serial port
0483            137   putchar1:
0483 3099FD     138       jnb TI, putchar1
0486 C299       139       clr TI
0488 F599       140       mov SBUF, a
048A 22         141       ret
048B            142   
048B            143   ; Send a constant-zero-terminated string using the serial port
048B            144   SendString:
048B E4         145       clr A
048C 93         146       movc A, @A+DPTR
048D 6006       147       jz SendStringDone
048F 12031E     148       lcall putchar
0492 A3         149       inc DPTR
0493 80F6       150       sjmp SendString
0495            151   SendStringDone:
0495 22         152       ret
0496            153    
0496            154   
0496            155       
0496            156   INIT_SPI:
0496 D2A2       157    setb MY_MISO ; Make MISO an input pin
0498 C2A3       158    clr MY_SCLK ; For mode (0,0) SCLK is zero
049A 22         159    ret
049B            160   
049B            161   DO_SPI_G:
049B C0E0       162    push acc
049D 7900       163    mov R1, #0 ; Received byte stored in R1
049F 7A08       164    mov R2, #8 ; Loop counter (8-bits)
04A1            165   DO_SPI_G_LOOP:
04A1 E8         166    mov a, R0 ; Byte to write is in R0
04A2 33         167    rlc a ; Carry flag has bit to write
04A3 F8         168    mov R0, a
04A4 92A1       169    mov MY_MOSI, c
04A6 D2A3       170    setb MY_SCLK ; Transmit
04A8 A2A2       171    mov c, MY_MISO ; Read received bit
04AA E9         172    mov a, R1 ; Save received bit in R1
04AB 33         173    rlc a
04AC F9         174    mov R1, a
04AD C2A3       175    clr MY_SCLK
04AF DAF0       176    djnz R2, DO_SPI_G_LOOP
04B1 D0E0       177    pop acc
04B3 22         178    ret
04B4            179   
04B4            180   Display_voltage:
04B4 200D0A00   181            DB ' ','\r','\n',0      
04B8            182   
04B8            183   
04B8            184   ;---------------------------------;
04B8            185   ; Send a BCD number to PuTTY      ;
04B8            186   ;---------------------------------;
04B8            187   
04B8            188   
04B8            189   ;---------------;
04B8            190   ;multiplication
04B8            191   ;---------------;
04B8            192   Voltage_calculation:
04B8            193   
04B8            194   ;Set_Cursor(1, 6)
04B8            195      ; Display_BCD(#0x02)
04B8            196       ; There are macros defined in math32.asm that can be used to load constants
04B8            197       ; to variables x and y. The same code above may be written as:
04B8            198       ;initialize
04B8 C0E0       199            push acc
04BA 7406       199            mov a, #6
04BC 14         199            dec a
04BD 120303     199            lcall ?Set_Cursor_1 ; Select column and row
04C0 D0E0       199            pop acc;
04C2 C000       200            push ar0
04C4 7802       200            mov r0, #0x02
04C6 120308     200            lcall ?Display_BCD
04C9 D000       200            pop ar0
04CB 753000     201            mov x+0, #low (0 % 0x10000) 
04CE 753100     201            mov x+1, #high(0 % 0x10000) 
04D1 753200     201            mov x+2, #low (0 / 0x10000) 
04D4 753300     201            mov x+3, #high(0 / 0x10000) 
04D7 753400     202            mov y+0, #low (0 % 0x10000) 
04DA 753500     202            mov y+1, #high(0 % 0x10000) 
04DD 753600     202            mov y+2, #low (0 / 0x10000) 
04E0 753700     202            mov y+3, #high(0 / 0x10000) 
04E3            203       
04E3 853830     204       mov x, result
04E6 853931     205       mov x+1,result+1
04E9 753400     206            mov y+0, #low (4096 % 0x10000) 
04EC 753510     206            mov y+1, #high(4096 % 0x10000) 
04EF 753600     206            mov y+2, #low (4096 / 0x10000) 
04F2 753700     206            mov y+3, #high(4096 / 0x10000) 
04F5 12017A     207       lcall mul32
04F8 7534F6     208            mov y+0, #low (10230 % 0x10000) 
04FB 753527     208            mov y+1, #high(10230 % 0x10000) 
04FE 753600     208            mov y+2, #low (10230 / 0x10000) 
0501 753700     208            mov y+3, #high(10230 / 0x10000) 
0504 120207     209       lcall div32 ; This subroutine is in math32.asm
0507            210       
0507 753411     211            mov y+0, #low (273 % 0x10000) 
050A 753501     211            mov y+1, #high(273 % 0x10000) 
050D 753600     211            mov y+2, #low (273 / 0x10000) 
0510 753700     211            mov y+3, #high(273 / 0x10000) 
0513 1200E6     212       lcall sub32
0516            213       
0516            214       
0516 120000     215       lcall hex2bcd
0519 C000       216            push ar0
051B A83D       216            mov r0, bcd+1
051D 120326     216            lcall ?Send_BCD
0520 D000       216            pop ar0
0522 C000       217            push ar0
0524 A83C       217            mov r0, bcd
0526 120326     217            lcall ?Send_BCD
0529 D000       217            pop ar0 
052B            218      
052B            219      ;;;  State machine for 7-segment displays starts here
052B            220            ; Turn all displays off
052B D282       221            setb CA1
052D D280       222            setb CA2
052F D281       223            setb CA3
0531            224   
0531 E544       225            mov a, state
0533            226   state0:
0533 B4000B     227            cjne a, #0, state1
0536 E541       228            mov a, disp1
0538 1205BD     229            lcall load_segments
053B C282       230            clr CA1
053D 0544       231            inc state
053F 8020       232            sjmp state_done
0541            233   state1:
0541 B4010B     234            cjne a, #1, state2
0544 E542       235            mov a, disp2
0546 1205BD     236            lcall load_segments
0549 C280       237            clr CA2
054B 0544       238            inc state
054D 8012       239            sjmp state_done
054F            240   state2:
054F B4020C     241            cjne a, #2, state_reset
0552 E543       242            mov a, disp3
0554 1205BD     243            lcall load_segments
0557 C281       244            clr CA3
0559 754400     245            mov state, #0
055C 8003       246            sjmp state_done
055E            247   state_reset:
055E 754400     248            mov state, #0
0561            249   state_done:
0561            250   ;;;  State machine for 7-segment displays ends here
0561            251   
0561 22         252      ret
0562            253      
0562            254   wait_a_second:
0562 C002       255            push AR2
0564 7A64       255            mov R2, #100
0566 12027B     255            lcall ?Wait_Milli_Seconds
0569 D002       255            pop AR2
056B C002       256            push AR2
056D 7A64       256            mov R2, #100
056F 12027B     256            lcall ?Wait_Milli_Seconds
0572 D002       256            pop AR2
0574 C002       257            push AR2
0576 7A64       257            mov R2, #100
0578 12027B     257            lcall ?Wait_Milli_Seconds
057B D002       257            pop AR2
057D C002       258            push AR2
057F 7A64       258            mov R2, #100
0581 12027B     258            lcall ?Wait_Milli_Seconds
0584 D002       258            pop AR2
0586 C002       259            push AR2
0588 7A64       259            mov R2, #100
058A 12027B     259            lcall ?Wait_Milli_Seconds
058D D002       259            pop AR2
058F C002       260            push AR2
0591 7A64       260            mov R2, #100
0593 12027B     260            lcall ?Wait_Milli_Seconds
0596 D002       260            pop AR2
0598 C002       261            push AR2
059A 7A64       261            mov R2, #100
059C 12027B     261            lcall ?Wait_Milli_Seconds
059F D002       261            pop AR2
05A1 C002       262            push AR2
05A3 7A64       262            mov R2, #100
05A5 12027B     262            lcall ?Wait_Milli_Seconds
05A8 D002       262            pop AR2
05AA C002       263            push AR2
05AC 7A64       263            mov R2, #100
05AE 12027B     263            lcall ?Wait_Milli_Seconds
05B1 D002       263            pop AR2
05B3 C002       264            push AR2
05B5 7A64       264            mov R2, #100
05B7 12027B     264            lcall ?Wait_Milli_Seconds
05BA D002       264            pop AR2
05BC 22         265                            ret                                             
05BD            266   
05BD            267   
05BD            268   ; Pattern to load passed in accumulator
05BD            269   load_segments:
05BD A2E0       270            mov c, acc.0
05BF 9283       271            mov SEGA, c
05C1 A2E1       272            mov c, acc.1
05C3 9285       273            mov SEGB, c
05C5 A2E2       274            mov c, acc.2
05C7 9287       275            mov SEGC, c
05C9 A2E3       276            mov c, acc.3
05CB 92C4       277            mov SEGD, c
05CD A2E4       278            mov c, acc.4
05CF 92C5       279            mov SEGE, c
05D1 A2E5       280            mov c, acc.5
05D3 9284       281            mov SEGF, c
05D5 A2E6       282            mov c, acc.6
05D7 9286       283            mov SEGG, c
05D9 A2E7       284            mov c, acc.7
05DB 92A7       285            mov SEGP, c
05DD 22         286            ret
05DE            287            
05DE            288   
05DE            289   
05DE C0F9A4B0   290   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
05E8            291   
05E8            292   
05E8            293   
05E8            294   MainProgram:
05E8 75817F     295       mov SP, #7FH ; Set the stack pointer to the begining of idata
05EB            296    
05EB 12046B     297       lcall InitSerialPort
05EE 120496     298       lcall INIT_SPI
05F1            299        ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
05F1 75E600     300       mov P0M0, #0
05F4 75E700     301       mov P0M1, #0
05F7 758E11     302       mov AUXR, #00010001B ; Max memory.  P4.4 is a general purpose IO pin
05FA 1202CA     303        lcall LCD_4BIT
05FD            304       
05FD            305   
05FD            306    
05FD            307   Forever:
05FD C2A0       308   clr CE_ADC
05FF 7801       309   mov R0, #00000001B ; Start bit:1
0601 12049B     310   lcall DO_SPI_G
0604 7880       311   mov R0, #10000000B ; Single ended, read channel 0
0606 12049B     312   lcall DO_SPI_G
0609 E9         313   mov a, R1 ; R1 contains bits 8 and 9
060A 5403       314   anl a, #00000011B ; We need only the two least significant bits
060C F539       315   mov Result+1, a ; Save result high.
060E 7855       316   mov R0, #55H ; It doesn't matter what we transmit...
0610 12049B     317   lcall DO_SPI_G
0613 8938       318   mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
0615 D2A0       319   setb CE_ADC
0617            320   
0617            321   ;lcall wait_a_second
0617            322   ;lcall Voltage_calculation
0617            323   
0617            324   Seg_display:
0617 9005DE     325            mov dptr, #HEX_7SEG
061A            326            
061A            327            ;mov a, bcd
061A            328            ;mov a, #1011011b       ;changed
061A            329            ;anl a, #0x0f
061A            330            ;movc a, @a+dptr
061A            331   ;        mov disp2, a
061A            332   
061A            333   
061A D282       334                    setb CA1
061C            335            ;mov a, bcd
061C 7408       336            mov a, #8       ;changed
061E C4         337            swap a
061F 540F       338            anl a, #0x0f
0621 93         339            movc a, @a+dptr
0622 F541       340            mov disp1, a
0624 1205BD     341            lcall load_segments
0627            342   
0627            343   
0627 C282       344                    clr CA1
0629            345            
0629            346            ;mov a, bcd
0629            347   ;        mov a, #0x8     ;changed
0629            348   ;        swap a
0629            349   ;        anl a, #0x0f
0629            350   ;        movc a, @a+dptr
0629            351   ;        mov disp3, a
0629            352            ;lcall wait_a_second
0629            353            
0629 C0E0       354            push acc
062B 7401       354            mov a, #1
062D 14         354            dec a
062E 120303     354            lcall ?Set_Cursor_1 ; Select column and row
0631 D0E0       354            pop acc
0633 C083       355            push dph
0635 C082       355            push dpl
0637 C0E0       355            push acc
0639 900463     355            mov dptr, #Test_msg
063C 1202F6     355            lcall ?Send_Constant_String
063F D0E0       355            pop acc
0641 D082       355            pop dpl
0643 D083       355            pop dph         
0645            356            
0645            357   ; lcall Voltage_calculation
0645            358    
0645 12048B     359    lcall SendString
0648 80B3       360    sjmp Forever
064A            361       
064A            362   END
