                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RH0            DATA 0xf3
0000             68   RTL1           DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0204FF       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096       ;reference at LM4040
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   BEEPER EQU P2.4 ; placeholder pin for beeper
0003             16   
0003             17   TIMER0_RELOAD_L DATA 0xf2
0003             18   TIMER1_RELOAD_L DATA 0xf3
0003             19   TIMER0_RELOAD_H DATA 0xf4
0003             20   TIMER1_RELOAD_H DATA 0xf5
0003             21   
0003             22   TIMER0_RATE   EQU 4096             ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0003             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             24   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0003             25   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0003             26   
0003             27   ; buttons
0003             28   BOOT_BUTTON   equ P4.5
0003             29   
0003             30   ; External interrupt 0 vector (not used in this code)
0003             31   org 0x0003
0003 32          32            reti
0004             33   
0004             34   ; Timer/Counter 0 overflow interrupt vector
000B             35   org 0x000B
000B 020439      36            ljmp Timer0_ISR
000E             37   
000E             38   ; External interrupt 1 vector (not used in this code)
0013             39   org 0x0013
0013 32          40            reti
0014             41   
0014             42   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             43   org 0x001B
001B 32          44            reti
001C             45   
001C             46   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             47   org 0x0023 
0023 32          48            reti
0024             49            
0024             50   ; Timer/Counter 2 overflow interrupt vector
002B             51   org 0x002B
002B 020453      52            ljmp Timer2_ISR
002E             53            
0030             54   dseg at 0x30
0030             55   ;future variables
0030             56   x:   ds 4
0034             57   y:   ds 4
0038             58   bcd: ds 5
003D             59   Result: ds 2
003F             60   coldtemp: ds 1
0040             61   hottemp:ds 4
0044             62   soaktemp: ds 2
0046             63   soaktime: ds 2
0048             64   reflowtemp: ds 2
004A             65   reflowtime: ds 2
004C             66   countererror: ds 1
004D             67   temperature:ds 4
0051             68   Count1ms:     ds 2 ; Used to determine when half second has passed 
0053             69   reflowparam: ds 1
0054             70   second: ds 1
0055             71   minute: ds 1
0056             72   temp: ds 1
0057             73   count: ds 1
0058             74   
0000             75   BSEG
0000             76   startflag: dbit 1
0001             77   errorflag: dbit 1
0002             78   mf: dbit 1
0003             79   
002E             80   CSEG
002E             81   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             82   LCD_RS equ P1.1
002E             83   LCD_RW equ P1.2
002E             84   LCD_E  equ P1.3
002E             85   LCD_D4 equ P3.2
002E             86   LCD_D5 equ P3.3
002E             87   LCD_D6 equ P3.4
002E             88   LCD_D7 equ P3.5
002E             89   
002E             90   StartButton equ P0.4 
002E             91   BUTTON_1 equ P0.3
002E             92   BUTTON_2 equ P0.2
002E             93   BUTTON_3 equ P0.7
002E             94   OvenButton equ P2.5
002E             95   
002E             96   
                 98   $LIST
00FA            100   
                546   $LIST
                102   $LIST
036A            104   
036A            105   
036A            106   ; constant strings  
036A 54656D70   107   Test_msg:  db 'Temp:xx.xx*C', 0
     3A78782E
     78782A43
     00
0377 312E536F   108   MenuMessage1: db '1.Soak Temp', 0   ;used when selecting parameter
     616B2054
     656D7000
0383 322E536F   109   MenuMessage2: db '2.Soak Time', 0
     616B2054
     696D6500
038F 332E5265   110   MenuMessage3: db '3.Reflow Temp', 0
     666C6F77
     2054656D
     7000
039D 342E5265   111   MenuMessage4: db '4.Reflow Time', 0
     666C6F77
     2054696D
     6500
03AB 536F616B   112   MenuSoakTemp: db 'Soak Temp:', 0  ;used when changing parameter
     2054656D
     703A00
03B6 536F616B   113   MenuSoakTime: db 'Soak Time:', 0
     2054696D
     653A00
03C1 5265666C   114   MenuReflowTemp: db 'Reflow Temp:', 0
     6F772054
     656D703A
     00
03CE 5265666C   115   MenuReflowTime: db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03DB 5265666C   116   ReflowStateMess: db 'Reflow State', 0
     6F772053
     74617465
     00
03E8 536F616B   117   SoakState: db 'Soak State', 0
     20537461
     746500
03F3 54656D70   118   TemperatureRise: db 'Temp. Increase',0
     2E20496E
     63726561
     736500
0402 4F76656E   119   CoolingTemp: db 'Oven is cooling.',0
     20697320
     636F6F6C
     696E672E
     00
0413            120   
0413 20202020   121   Blank: db '              ',0
     20202020
     20202020
     202000
0422            122   
0422            123   ;---------------------------------;
0422            124   ; Routine to initialize the ISR   ;
0422            125   ; for timer 0                     ;
0422            126   ;---------------------------------;
0422            127   
0422            128   Timer0_Init:
0422 E589       129            mov a, TMOD
0424 54F0       130            anl a, #0xf0 ; Clear the bits for timer 0
0426 4401       131            orl a, #0x01 ; Configure timer 0 as 16-timer
0428 F589       132            mov TMOD, a
042A 758CEA     133            mov TH0, #high(TIMER0_RELOAD)
042D 758AE8     134            mov TL0, #low(TIMER0_RELOAD)
0430            135            ; Set autoreload value
0430 75F4EA     136            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0433 75F2E8     137            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0436            138            ; Enable the timer and interrupts
0436 D2A9       139       setb ET0  ; Enable timer 0 interrupt
0438            140       ;setb TR0  ; Start timer 0
0438 22         141            ret
0439            142   
0439            143   ;---------------------------------;
0439            144   ; ISR for timer 0.  Set to execute;
0439            145   ; every 1/4096Hz to generate a    ;
0439            146   ; 2048 Hz square wave at pin P3.7 ;
0439            147   ;---------------------------------;
0439            148   
0439            149   Timer0_ISR:
0439            150   ;        cpl SOUND_OUT; Connect speaker to P3.7!
0439 32         151            reti
043A            152     
043A            153   ;---------------------------------;
043A            154   ; Routine to initialize the ISR   ;
043A            155   ; for timer 2                     ;
043A            156   ;---------------------------------;
043A            157   Timer2_Init:
043A 75C800     158            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
043D 75CDA9     159            mov TH2, #high(TIMER2_RELOAD)
0440 75CC9A     160            mov TL2, #low(TIMER2_RELOAD)
0443            161            ; Set the reload value
0443 75CBA9     162            mov RCAP2H, #high(TIMER2_RELOAD)
0446 75CA9A     163            mov RCAP2L, #low(TIMER2_RELOAD)
0449            164            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0449 E4         165            clr a
044A F551       166            mov Count1ms+0, a
044C F552       167            mov Count1ms+1, a
044E            168            ; Enable the timer and interrupts
044E D2AD       169       setb ET2  ; Enable timer 2 interrupt
0450 D2CA       170       setb TR2  ; Enable timer 2
0452 22         171            ret
0453            172   
0453            173   ;---------------------------------;
0453            174   ; ISR for timer 2                 ;
0453            175   ;---------------------------------;
0453            176   Timer2_ISR:
0453 C2CF       177            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0455 B2B6       178            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0457            179            
0457            180            ; The two registers used in the ISR must be saved in the stack
0457 C0E0       181            push acc
0459 C0D0       182            push psw
045B            183            
045B            184            ; Increment the 16-bit one mili second counter
045B 0551       185            inc Count1ms+0    ; Increment the low 8-bits first
045D E551       186            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
045F 7002       187            jnz Inc_Done
0461 0552       188            inc Count1ms+1
0463            189   
0463            190     Inc_Done:
0463            191            ; Check if half second has passed
0463 E551       192            mov a, Count1ms+0
0465 B4F411     193            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0468 E552       194            mov a, Count1ms+1
046A B4010C     195            cjne a, #high(500), Timer2_ISR_done
046D            196            
046D            197       ; cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
046D            198       ; where is halfsecondflag?                                   
046D            199                                            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
046D E4         200            clr a
046E F551       201            mov Count1ms+0, a
0470 F552       202            mov Count1ms+1, a
0472            203     
0472 E554       204            mov a, second   ; Increment the BCD counter
0474            205   
0474 2401       206            add a, #0x01 ;THIS IS ADDING SECONDS
0476            207   
0476 D4         208            da a ; Decimal adjust instruction.  Check datasheet for more details!
0477 F554       209            mov second, a
0479            210            
0479            211   Timer2_ISR_done:
0479 D0D0       212            pop psw
047B D0E0       213            pop acc
047D 32         214            reti
047E            215      
047E            216   ;---------------------------------;
047E            217   ; initialize the slave                 ;
047E            218   ;---------------------------------;
047E            219   
047E            220   INIT_SPI:
047E D2A2       221    setb MY_MISO ; Make MISO an input pin
0480 C2A3       222    clr MY_SCLK ; For mode (0,0) SCLK is zero
0482 22         223    ret
0483            224   
0483            225   ;---------------------------------;
0483            226   ; receive and send data                          ;
0483            227   ;---------------------------------;
0483            228   
0483            229   DO_SPI_G:
0483 C0E0       230             push acc
0485 7900       231             mov R1, #0 ; Received byte stored in R1
0487 7A08       232             mov R2, #8 ; Loop counter (8-bits)
0489            233   DO_SPI_G_LOOP:
0489 E8         234             mov a, R0 ; Byte to write is in R0
048A 33         235             rlc a ; Carry flag has bit to write
048B F8         236             mov R0, a
048C 92A1       237             mov MY_MOSI, c
048E D2A3       238             setb MY_SCLK ; Transmit
0490 A2A2       239             mov c, MY_MISO ; Read received bit
0492 E9         240             mov a, R1 ; Save received bit in R1
0493 33         241             rlc a
0494 F9         242             mov R1, a
0495 C2A3       243             clr MY_SCLK
0497 DAF0       244             djnz R2, DO_SPI_G_LOOP
0499 D0E0       245             pop acc
049B 22         246             ret
049C            247   
049C            248   ; Send a character using the serial port
049C            249   putchar1:
049C 3099FD     250       jnb TI, putchar1
049F C299       251       clr TI
04A1 F599       252       mov SBUF, a
04A3 22         253       ret
04A4            254   
04A4            255   ; Send a constant-zero-terminated string using the serial port
04A4            256   SendString:
04A4 E4         257       clr A
04A5 93         258       movc A, @A+DPTR
04A6 6006       259       jz SendStringDone
04A8 1200DC     260       lcall putchar
04AB A3         261       inc DPTR
04AC 80F6       262       sjmp SendString
04AE            263   SendStringDone:
04AE 22         264       ret
04AF            265   
04AF            266   Display_10_digit_BCD:
04AF C0E0       267            push acc
04B1 7406       267            mov a, #6
04B3 14         267            dec a
04B4 1200C1     267            lcall ?Set_Cursor_1 ; Select column and row
04B7 D0E0       267            pop acc
04B9 C000       268            push ar0
04BB A83C       268            mov r0, bcd+4
04BD 1200C6     268            lcall ?Display_BCD
04C0 D000       268            pop ar0
04C2 C000       269            push ar0
04C4 A83B       269            mov r0, bcd+3
04C6 1200C6     269            lcall ?Display_BCD
04C9 D000       269            pop ar0
04CB C000       270            push ar0
04CD A83A       270            mov r0, bcd+2
04CF 1200C6     270            lcall ?Display_BCD
04D2 D000       270            pop ar0
04D4 C000       271            push ar0
04D6 A839       271            mov r0, bcd+1
04D8 1200C6     271            lcall ?Display_BCD
04DB D000       271            pop ar0
04DD C000       272            push ar0
04DF A838       272            mov r0, bcd+0
04E1 1200C6     272            lcall ?Display_BCD
04E4 D000       272            pop ar0
04E6 22         273            ret
04E7            274            
04E7            275   ;---------------------------------;
04E7            276   ; initialize the serial ports     ;
04E7            277   ;---------------------------------;
04E7            278   InitSerialPort:
04E7            279       ; Since the reset button bounces, we need to wait a bit before
04E7            280       ; sending messages, otherwise we risk displaying gibberish!
04E7 79DE       281       mov R1, #222
04E9 78A6       282       mov R0, #166
04EB D8FE       283       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
04ED D9FA       284       djnz R1, $-4 ; 22.51519us*222=4.998ms
04EF            285       ; Now we can proceed with the configuration
04EF 438780     286            orl     PCON,#0x80
04F2 759852     287            mov     SCON,#0x52
04F5 759B00     288            mov     BDRCON,#0x00
04F8 759AF4     289            mov     BRL,#BRG_VAL
04FB 759B1E     290            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
04FE 22         291       ret
04FF            292    
04FF            293    ;---------------------------------;
04FF            294   ; MAIN PROGRAM                                                         ;
04FF            295   ;---------------------------------;  
04FF            296   
04FF            297   MainProgram:
04FF 75817F     298            mov sp, #07FH ; Initialize the stack pointer
0502            299            ; Configure P0 in bidirectional mode
0502 75E600     300       mov P0M0, #0
0505 75E700     301       mov P0M1, #0
0508 D2AF       302       setb EA 
050A 120088     303       lcall LCD_4BIT
050D 754400     304       mov soaktemp, #0x00
0510 754500     305       mov soaktemp+1, #0x00
0513 754600     306       mov soaktime, #0x00
0516 754700     307       mov soaktime+1, #0x00
0519 754800     308       mov reflowtemp, #0x00
051C 754900     309       mov reflowtemp+1, #0x00
051F 754A00     310       mov reflowtime, #0x00
0522 754B00     311       mov reflowtime+1, #0x00
0525 755400     312       mov second, #0
0528            313      ; mov countererror, #0        ; to check if the thermocouple is in the oven
0528            314                    
0528            315       ;initial message 
0528            316      ; Set_Cursor(1, 1)
0528            317      ; Send_Constant_String(#Test_msg)
0528            318      ; Set_Cursor(1,11)
0528            319      ; WriteData(#223) ; print the degree sign   
0528 755700     320       mov count, #0
052B            321       
052B 1204E7     322       lcall InitSerialPort
052E 12047E     323                    lcall INIT_SPI
0531 120422     324                    lcall Timer0_Init
0534            325      ; lcall Timer2_Init
0534 1206C2     326      lcall TurnOvenOff
0537            327      
0537 0207F8     328       ljmp Menu_select1 ;; selecting and setting profiles
053A            329       
053A            330   FOREVER: ;this will be how the oven is being controlled ; jump here once start button is pressed!!!
053A            331   ;------state 1 -------- ;        
053A C0E0       332            push acc
053C 7401       332            mov a, #1
053E 14         332            dec a
053F 1200C1     332            lcall ?Set_Cursor_1 ; Select column and row
0542 D0E0       332            pop acc
0544 C083       333            push dph
0546 C082       333            push dpl
0548 C0E0       333            push acc
054A 9003F3     333            mov dptr, #TemperatureRise
054D 1200B4     333            lcall ?Send_Constant_String
0550 D0E0       333            pop acc
0552 D082       333            pop dpl
0554 D083       333            pop dph
0556            334    ;  lcall checkstop       ;checks if stop button is pressed. If so, turns off oven and goes back to menu
0556            335      ;lcall checkerror      ;if error, terminate program and return
0556 1206A8     336      lcall Readingtemperatures  ;calculates temperature of oven using thermocouple junctions
0559 1206C8     337      lcall DisplayingLCD
055C            338   
055C            339      ;lcall cst ; checking if we have reached Soak Temp yet
055C            340     ; lcall State_change_BEEPER ; temp = soak temp, so going to soak time state 
055C            341     
055C E53F       342     mov a, coldtemp
055E 8544F0     343     mov b, soaktemp
0561 84         344     div AB
0562 E5F0       345     mov a,b 
0564 B400D3     346     cjne a, #0, FOREVER
0567 1206C2     347     lcall TurnOvenOff
056A            348     
056A C2CA       349      clr tr2                       ; restarting timer 2 to keep track of the time lasped since we reached soaktemp
056C 7400       350      mov a, #0x0
056E F554       351      mov second, a
0570 D2CA       352      setb tr2
0572 8000       353      sjmp skiped
0574            354    
0574            355    skiped:
0574            356     ; after we reached the soak temp stay there for __ seconds
0574            357     ;-----state 2 ------;
0574            358   soaktempchecked:
0574 C0E0       359            push acc
0576 7401       359            mov a, #1
0578 14         359            dec a
0579 1200C1     359            lcall ?Set_Cursor_1 ; Select column and row
057C D0E0       359            pop acc
057E C083       360            push dph
0580 C082       360            push dpl
0582 C0E0       360            push acc
0584 9003E8     360            mov dptr, #SoakState
0587 1200B4     360            lcall ?Send_Constant_String
058A D0E0       360            pop acc
058C D082       360            pop dpl
058E D083       360            pop dph  
0590            361   ;        lcall checkstop         
0590 1206A8     362      lcall Readingtemperatures
0593 1206C8     363      lcall DisplayingLCD
0596 120635     364     lcall keepingsoaktempsame ; boundary temp
0599 120645     365     lcall keepingsoaktempsame1
059C 120680     366     lcall checksoaktime ; if soak time is up go to next state
059F 80D3       367     sjmp soaktempchecked
05A1            368     
05A1            369   ; ---- state 3 ---- ; increaseing to reflow temp
05A1            370   increasereflowtemp: 
05A1            371    ; lcall checkstop
05A1 C0E0       372            push acc
05A3 7401       372            mov a, #1
05A5 14         372            dec a
05A6 1200C1     372            lcall ?Set_Cursor_1 ; Select column and row
05A9 D0E0       372            pop acc
05AB C083       373            push dph
05AD C082       373            push dpl
05AF C0E0       373            push acc
05B1 9003F3     373            mov dptr, #TemperatureRise
05B4 1200B4     373            lcall ?Send_Constant_String
05B7 D0E0       373            pop acc
05B9 D082       373            pop dpl
05BB D083       373            pop dph 
05BD 1206A8     374     lcall Readingtemperatures
05C0 1206C8     375      lcall DisplayingLCD
05C3            376      
05C3            377   
05C3 C3         378     clr c
05C4 E548       379     mov a, reflowtemp
05C6 953F       380     subb a, coldtemp
05C8 50D7       381     jnc increasereflowtemp
05CA            382      
05CA 1206C2     383     lcall TurnOvenOff  
05CD            384      
05CD            385    ; lcall checkingreflowtemp
05CD            386    ; lcall State_change_BEEPER
05CD C2CA       387     clr tr2
05CF 7400       388     mov a, #0
05D1 F554       389     mov second, a
05D3 D2CA       390     setb tr2
05D5            391   
05D5            392     ;----state 4 ---;
05D5            393    reflowstate:
05D5            394     ;lcall checkstop
05D5 1206A8     395     lcall Readingtemperatures
05D8 1206C8     396      lcall DisplayingLCD
05DB C0E0       397            push acc
05DD 7401       397            mov a, #1
05DF 14         397            dec a
05E0 1200C1     397            lcall ?Set_Cursor_1 ; Select column and row
05E3 D0E0       397            pop acc
05E5 C083       398            push dph
05E7 C082       398            push dpl
05E9 C0E0       398            push acc
05EB 9003DB     398            mov dptr, #ReflowStateMess
05EE 1200B4     398            lcall ?Send_Constant_String
05F1 D0E0       398            pop acc
05F3 D082       398            pop dpl
05F5 D083       398            pop dph 
05F7 12065F     399     lcall keepingreflowtempsame
05FA 12066F     400     lcall keepingreflowtempsame1
05FD 120694     401     lcall checkreflowtime
0600 80D3       402     sjmp reflowstate
0602            403     
0602            404    ;------- state5-----;
0602            405    cooling:
0602 C0E0       406            push acc
0604 7401       406            mov a, #1
0606 14         406            dec a
0607 1200C1     406            lcall ?Set_Cursor_1 ; Select column and row
060A D0E0       406            pop acc
060C C083       407            push dph
060E C082       407            push dpl
0610 C0E0       407            push acc
0612 900402     407            mov dptr, #CoolingTemp
0615 1200B4     407            lcall ?Send_Constant_String
0618 D0E0       407            pop acc
061A D082       407            pop dpl
061C D083       407            pop dph 
061E 1206A8     408    lcall Readingtemperatures
0621 1206C8     409     lcall DisplayingLCD
0624 12062A     410    lcall waitforcooling
0627            411   ; lcall Open_oven_toaster_BEEPER
0627            412    
0627 020627     413    ljmp $
062A            414     
062A            415   ;---------------------------------;
062A            416   ; functions                                                                                  ;
062A            417   ;---------------------------------; 
062A            418   
062A            419   waitforcooling:
062A            420   
062A            421   
062A C3         422     clr c
062B 743C       423     mov a, #60
062D 953F       424     subb a, coldtemp
062F 5003       425     jnc cooled
0631 020602     426     ljmp cooling
0634            427     
0634            428     
0634            429   ;        load_X(coldtemp)
0634            430   ;  load_Y(60)
0634            431   ;  lcall x_gteq_y   ; compare if temp >= 60 
0634            432   ;  jnb mf, cooled
0634            433   ;  ljmp cooling
0634            434     
0634            435    
0634            436   cooled:
0634 22         437            ret
0635            438   
0635            439   ; *********** STATE 2 **********
0635            440   ; After reaching the soak temperature we stay at that temp 
0635            441   ; for 60 to 120 seconds
0635            442   
0635            443   keepingsoaktempsame:
0635 E544       444     mov a, soaktemp
0637 2405       445     add a, #5
0639 F530       446     mov x, a
063B            447      
063B C3         448     clr c
063C E530       449     mov a, x
063E 953F       450     subb a, coldtemp
0640 5014       451     jnc soaktempisokay
0642 020657     452     ljmp soaktemptoohigh
0645            453   
0645            454     ;load_Y(coldtemp)
0645            455     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0645            456    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0645            457    
0645            458    keepingsoaktempsame1:
0645            459     ; temp>= soaktemp-10
0645            460    ; load_Y(5)
0645            461    ; load_X(soaktemp)
0645            462    ; lcall sub32   
0645 E544       463     mov a, soaktemp
0647 C3         464     clr c
0648 9405       465     subb a, #5
064A F530       466     mov x, a
064C            467     
064C C3         468     clr c
064D E53F       469     mov a, coldtemp
064F 9530       470     subb a, x
0651 5003       471     jnc soaktempisokay
0653 02065B     472     ljmp soaktemptoolow
0656            473     
0656            474      
0656            475     
0656            476   soaktempisokay:
0656 22         477            ret
0657            478     
0657            479   soaktemptoohigh: 
0657 1206C2     480     lcall TurnOvenOff
065A 22         481     ret
065B            482     
065B            483   soaktemptoolow:
065B 1206C5     484            lcall TurnOvenOn
065E 22         485     ret
065F            486     
065F            487    keepingreflowtempsame:
065F E548       488     mov a, reflowtemp
0661 2405       489     add a, #5
0663 F530       490     mov x, a
0665            491      
0665 C3         492     clr c
0666 E530       493     mov a, x
0668 953F       494     subb a, coldtemp
066A 50EA       495     jnc soaktempisokay
066C 020657     496     ljmp soaktemptoohigh
066F            497   
066F            498     ;load_Y(coldtemp)
066F            499     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
066F            500    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
066F            501    
066F            502    keepingreflowtempsame1:
066F            503     ; temp>= soaktemp-10
066F            504    ; load_Y(5)
066F            505    ; load_X(soaktemp)
066F            506    ; lcall sub32   
066F E548       507     mov a, reflowtemp
0671 C3         508     clr c
0672 9405       509     subb a, #5
0674 F530       510     mov x, a
0676            511     
0676 C3         512     clr c
0677 E53F       513     mov a, coldtemp
0679 9530       514     subb a, x
067B 50D9       515     jnc soaktempisokay
067D 02065B     516     ljmp soaktemptoolow
0680            517     
0680            518    ; lower bound for the straight line for the soak temp: soaktemp-10
0680            519   ;  load_Y(coldtemp)
0680            520    ; lcall x_gteq_y   ; compare if temp <= soaktemp - 10 
0680            521    ; jb mf, soaktemptoolow; if mf!=1 then keep checking
0680            522    ; ljmp soaktempisokay
0680            523     
0680            524   
0680            525   checksoaktime:
0680 E554       526            mov a, second
0682 B5460E     527     cjne a, soaktime, soaknotdone
0685 1206C5     528     lcall TurnOvenOn
0688 C2CA       529     clr tr2
068A 7400       530     mov a, #0
068C F554       531     mov second, a
068E D2CA       532     setb tr2
0690 0205A1     533     ljmp increasereflowtemp
0693            534   soaknotdone:
0693 22         535            ret 
0694            536     
0694            537   checkreflowtime:
0694 E554       538            mov a, second
0696 B54A0E     539     cjne a, reflowtime,reflownotdone
0699 1206C2     540     lcall TurnOvenOff
069C C2CA       541     clr tr2
069E 7400       542     mov a, #0
06A0 F554       543     mov second, a
06A2 D2CA       544     setb tr2
06A4 020602     545     ljmp cooling
06A7            546   reflownotdone:
06A7 22         547            ret
06A8            548   
06A8            549   ; reading the thermocouple junction values 
06A8            550   Readingtemperatures:
06A8 12072C     551     lcall readingcoldjunction ;answer in x is saved in variable called 'coldtemp'
06AB            552   
06AB E530       553     mov a, x
06AD F53F       554     mov coldtemp, a ;final temperature is in the temperature variable
06AF 22         555     ret
06B0            556   
06B0            557   ; checking if the temperture at the hot end is equal to soak temp yet
06B0            558   
06B0            559   
06B0            560   ;checkingsoaktemperature: 
06B0            561   ;  clr c
06B0            562    ; mov a, soaktemp
06B0            563    ; subb a, coldtemp
06B0            564    ; jnc Jump_to_FOREVER  
06B0            565    ; lcall TurnOvenOff
06B0            566    ; ret
06B0            567   Jump_to_FOREVER:
06B0 02053A     568            ljmp FOREVER
06B3            569   
06B3            570   ; checking if the temperture at the hot end is equal to reflow temp yet
06B3            571   
06B3            572   
06B3            573    ;stop the process at any time  
06B3            574   checkstop:                     ; stop the reflow process
06B3 208405     575            jb STARTBUTTON, return
06B6 3084FD     576            jnb STARTBUTTON, $
06B9 8001       577            sjmp stop
06BB            578   return:
06BB 22         579     ret
06BC            580   stop:
06BC 1206C2     581            lcall TurnOvenOff
06BF 0206BF     582       ljmp $
06C2            583   
06C2            584     
06C2            585   ;---------------------------------- ;
06C2            586   ; SSR Box communicating with the           ;
06C2            587   ; Microcontroller                                                                        ;
06C2            588   ;(1) uses OvenButton to communicate ; 
06C2            589     ;with the transistor to turn the       ;
06C2            590     ;oven or off                                                                                   ;
06C2            591   ;(2)                                                                                                                             ;
06C2            592   ;                                                                                                                                                ;
06C2            593   ;                                                                                                                                                ;
06C2            594   ;-----------------------------------;
06C2            595            
06C2            596   TurnOvenOff:
06C2 C2A5       597            clr OvenButton  
06C4 22         598     ret
06C5            599   TurnOvenOn:
06C5 D2A5       600            setb OvenButton
06C7 22         601     ret
06C8            602   
06C8            603   DisplayingLCD:
06C8 C0E0       604            push acc
06CA 7401       604            mov a, #1
06CC 14         604            dec a
06CD 1200BF     604            lcall ?Set_Cursor_2 ; Select column and row
06D0 D0E0       604            pop acc
06D2            604   
06D2 C000       605            push ar0
06D4 A854       605            mov r0, second
06D6 1200C6     605            lcall ?Display_BCD
06D9 D000       605            pop ar0
06DB            606            
06DB C0E0       607            push acc
06DD 740C       607            mov a, #12
06DF 14         607            dec a
06E0 1200BF     607            lcall ?Set_Cursor_2 ; Select column and row
06E3 D0E0       607            pop acc
06E5 853F30     608            mov x, coldtemp
06E8 1200FA     609            lcall hex2bcd
06EB            610            
06EB C000       611            push ar0
06ED A838       611            mov r0, bcd
06EF 1200C6     611            lcall ?Display_BCD
06F2 D000       611            pop ar0
06F4 C0E0       612            push acc
06F6 740F       612            mov a, #15
06F8 14         612            dec a
06F9 1200BF     612            lcall ?Set_Cursor_2 ; Select column and row
06FC D0E0       612            pop acc
06FE 74DF       613            mov a, #0xDF
0700 12007E     613            lcall ?WriteData
0703 C0E0       614            push acc
0705 7410       614            mov a, #16
0707 14         614            dec a
0708 1200BF     614            lcall ?Set_Cursor_2 ; Select column and row
070B D0E0       614            pop acc
070D 7443       615            mov a, #'C'
070F 12007E     615            lcall ?WriteData
0712            616       
0712 22         617       ret
0713            618       
0713            619       
0713            620   
0713            621   
0713            622   
0713            623   ;As a safety measure, the reflow process must be aborted if the oven doesn’t reach at least 50oC in the first 60 seconds of operation
0713            624   checkerror: 
0713 C0E0       625            push acc
0715 C0D0       626     push psw
0717            627     
0717            628   ;  mov x, second
0717            629   ;  Load_y(60)
0717            630   ;  lcall x_gteq_y
0717            631   ;  jnb mf, noerror; if mf = 0, then x<y, time<60secs, don't need to check time yet
0717            632     ;check temp because time>60sec
0717            633     
0717 C3         634     clr c
0718 7460       635     mov a, #0x60
071A 9554       636     subb a, second
071C 5009       637     jnc noerror
071E            638     
071E 7432       639     mov a, #50
0720 953F       640     subb a, coldtemp
0722 5003       641     jnc noerror
0724 1206C2     642     lcall TurnOvenOff
0727            643     
0727            644     ;mov x, coldtemp
0727            645     ;Load_y(50)
0727            646     ;lcall x_gteq_y
0727            647     ;jb mf, noerror  ;if mf = 1, then x>=y which is what we want, no error
0727            648     ;there is error, so turn off oven
0727            649     ;lcall TurnOvenOff
0727            650     
0727            651   noerror:
0727 D0D0       652     pop psw
0729 D0E0       653     pop acc 
072B 22         654     ret
072C            655            
072C            656   ;------------------------------;
072C            657   ; Temperature Reader From Sam     ;
072C            658   ;------------------------------;
072C            659            
072C            660   readingcoldjunction: ;read the cold junction from the adc
072C            661   ;reading the adc
072C C0E0       662            push acc
072E C0D0       663       push psw
0730            664     
0730 C2A0       665            clr CE_ADC 
0732 7801       666            mov R0, #00000001B ; Start bit:1 
0734 120483     667            lcall DO_SPI_G
0737 7880       668            mov R0, #10000000B ; Single ended, read channel 0 
0739 120483     669            lcall DO_SPI_G 
073C E9         670            mov a, R1          ; R1 contains bits 8 and 9 
073D 5403       671            anl a, #00000011B  ; We need only the two least significant bits 
073F F53E       672            mov Result+1, a    ; Save result high.
0741 7855       673            mov R0, #55H ; It doesn't matter what we transmit... 
0743 120483     674            lcall DO_SPI_G 
0746 893D       675            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
0748 D2A0       676            setb CE_ADC 
074A            677            ;wait for 1 second 
074A C002       678            push AR2
074C 7AFA       678            mov R2, #250
074E 120039     678            lcall ?Wait_Milli_Seconds
0751 D002       678            pop AR2
0753 C002       679            push AR2
0755 7AFA       679            mov R2, #250
0757 120039     679            lcall ?Wait_Milli_Seconds
075A D002       679            pop AR2
075C            680     
075C 120768     681            lcall Calculate_Temp_in_C 
075F E530       682       mov a, x
0761 F53F       683       mov coldtemp, a
0763            684     
0763 D0D0       685              pop psw
0765 D0E0       686              pop acc
0767 22         687              ret   
0768            688               
0768            689   
0768            690   ;Trying to transfer the binary value in ADC into BCD and then into 
0768            691   ;ASCII to show in putty
0768            692   Calculate_Temp_in_C:     
0768 E4         693            clr a 
0769 753000     694            mov x+0, #low (0 % 0x10000) 
076C 753100     694            mov x+1, #high(0 % 0x10000) 
076F 753200     694            mov x+2, #low (0 / 0x10000) 
0772 753300     694            mov x+3, #high(0 / 0x10000)     ; 
0775 753400     695            mov y+0, #low (0 % 0x10000) 
0778 753500     695            mov y+1, #high(0 % 0x10000) 
077B 753600     695            mov y+2, #low (0 / 0x10000) 
077E 753700     695            mov y+3, #high(0 / 0x10000) 
0781            696            ; load the result into X 
0781 E53D       697            mov a, Result+0
0783 F530       698            mov X, a
0785 E53E       699            mov a, Result+1
0787 F531       700            mov X+1, a
0789 75349A     701            mov y+0, #low (410 % 0x10000) 
078C 753501     701            mov y+1, #high(410 % 0x10000) 
078F 753600     701            mov y+2, #low (410 / 0x10000) 
0792 753700     701            mov y+3, #high(410 / 0x10000) 
0795 120274     702            lcall mul32;
0798 7534FF     703            mov y+0, #low (1023 % 0x10000) 
079B 753503     703            mov y+1, #high(1023 % 0x10000) 
079E 753600     703            mov y+2, #low (1023 / 0x10000) 
07A1 753700     703            mov y+3, #high(1023 / 0x10000) 
07A4 120301     704            lcall div32;  
07A7            705            ;calculte temperature 
07A7 753411     706            mov y+0, #low (273 % 0x10000) 
07AA 753501     706            mov y+1, #high(273 % 0x10000) 
07AD 753600     706            mov y+2, #low (273 / 0x10000) 
07B0 753700     706            mov y+3, #high(273 / 0x10000) 
07B3 853056     707            mov temp, X
07B6 1201E0     708            lcall sub32
07B9 1200FA     709            lcall hex2bcd ; converts binary in x to BCD in BCD
07BC            710            ;Set_Cursor(2, 13)
07BC            711            ;Display_BCD(bcd)
07BC            712   ;        lcall Display_Temp_Putty
07BC 22         713            ret
07BD            714   
07BD            715   
07BD            716                    
07BD            717   ; Display Temperature in Putty!
07BD            718   Display_Temp_Putty:
07BD C000       719            push ar0
07BF A839       719            mov r0, bcd+1
07C1 1200E4     719            lcall ?Send_BCD
07C4 D000       719            pop ar0
07C6 C000       720            push ar0
07C8 A838       720            mov r0, bcd
07CA 1200E4     720            lcall ?Send_BCD
07CD D000       720            pop ar0
07CF 740D       721            mov a, #'\r'
07D1 1200DC     722            lcall putchar
07D4 740A       723            mov a, #'\n'
07D6 1200DC     724            lcall putchar
07D9 22         725            ret     
07DA            726   
07DA            727   ; Display Temperature in LCD
07DA            728   Display_Temp_LCD:
07DA            729   ; show temp in Celcius 
07DA C0E0       730            push acc
07DC 7406       730            mov a, #6
07DE 14         730            dec a
07DF 1200C1     730            lcall ?Set_Cursor_1 ; Select column and row
07E2 D0E0       730            pop acc;
07E4 C000       731            push ar0
07E6 A839       731            mov r0, bcd+1
07E8 1200C6     731            lcall ?Display_BCD
07EB D000       731            pop ar0
07ED C0E0       732            push acc
07EF 7409       732            mov a, #9
07F1 14         732            dec a
07F2 1200C1     732            lcall ?Set_Cursor_1 ; Select column and row
07F5 D0E0       732            pop acc;  
07F7 22         733            ret
07F8            734            
07F8            735   ; MENU SELECT;   
07F8            736            
07F8            737            
07F8            738   Menu_select1:  
07F8 7401       739            mov a, #0x01
07FA 120083     739            lcall ?WriteCommand
07FD C002       740            push AR2
07FF 7A32       740            mov R2, #50
0801 120039     740            lcall ?Wait_Milli_Seconds
0804 D002       740            pop AR2
0806            741   Menu_select2:
0806 C0E0       742            push acc
0808 7401       742            mov a, #1
080A 14         742            dec a
080B 1200C1     742            lcall ?Set_Cursor_1 ; Select column and row
080E D0E0       742            pop acc
0810 C083       743            push dph
0812 C082       743            push dpl
0814 C0E0       743            push acc
0816 900377     743            mov dptr, #MenuMessage1
0819 1200B4     743            lcall ?Send_Constant_String
081C D0E0       743            pop acc
081E D082       743            pop dpl
0820 D083       743            pop dph
0822 C0E0       744            push acc
0824 7401       744            mov a, #1
0826 14         744            dec a
0827 1200BF     744            lcall ?Set_Cursor_2 ; Select column and row
082A D0E0       744            pop acc
082C C083       745            push dph
082E C082       745            push dpl
0830 C0E0       745            push acc
0832 900383     745            mov dptr, #MenuMessage2
0835 1200B4     745            lcall ?Send_Constant_String
0838 D0E0       745            pop acc
083A D082       745            pop dpl
083C D083       745            pop dph
083E            746     
083E C002       747            push AR2
0840 7A32       747            mov R2, #50
0842 120039     747            lcall ?Wait_Milli_Seconds
0845 D002       747            pop AR2 ;go to set Soak Temperature
0847 208306     748     jb BUTTON_1, Menu_select2_2
084A 3083FD     749     jnb BUTTON_1, $
084D 02089D     750     ljmp Jump_to_Set_SoakTemp1
0850            751     
0850            752   Menu_select2_2:
0850 C002       753            push AR2
0852 7A32       753            mov R2, #50
0854 120039     753            lcall ?Wait_Milli_Seconds
0857 D002       753            pop AR2 ;go to set Soak Time
0859 208206     754     jb BUTTON_2, Menu_select2_3
085C 3082FD     755     jnb BUTTON_2, $
085F 0208A0     756     ljmp Jump_to_Set_SoakTime1
0862            757     
0862            758   Menu_select2_3:
0862 C002       759            push AR2
0864 7A32       759            mov R2, #50
0866 120039     759            lcall ?Wait_Milli_Seconds
0869 D002       759            pop AR2 ;go to second set of menus
086B 208706     760     jb BUTTON_3, Menu_select2_4
086E 3087FD     761     jnb BUTTON_3, $
0871 0208A6     762     ljmp Jump_to_Menu_select3
0874            763     
0874            764   Menu_select2_4:
0874 C002       765            push AR2
0876 7A32       765            mov R2, #50
0878 120039     765            lcall ?Wait_Milli_Seconds
087B D002       765            pop AR2   ; start the reflow process
087D 208423     766     jb StartButton, Jump_to_Menu_select2_1
0880 3084FD     767     jnb StartButton, $
0883 020886     768     ljmp Jump_To_FOREVER1
0886            769     
0886            770   Jump_To_FOREVER1:
0886 7401       771            mov a, #0x01
0888 120083     771            lcall ?WriteCommand
088B C002       772            push AR2
088D 7A32       772            mov R2, #50
088F 120039     772            lcall ?Wait_Milli_Seconds
0892 D002       772            pop AR2
0894 12043A     773     lcall Timer2_init
0897            774            
0897 755400     775            mov second, #0
089A            776            
089A 02053A     777            ljmp FOREVER
089D            778   
089D            779   Jump_to_Set_SoakTemp1:
089D 0208A9     780            ljmp Set_SoakTemp1
08A0            781     
08A0            782   Jump_to_Set_SoakTime1:
08A0 0209CE     783            ljmp Set_SoakTime1
08A3            784            
08A3            785   Jump_to_Menu_select2_1:
08A3 020806     786            ljmp Menu_select2
08A6            787     
08A6            788   Jump_to_Menu_select3:
08A6 020AF3     789            ljmp Menu_select3
08A9            790   
08A9            791   ; Settings - Soak Temperature
08A9            792   Set_SoakTemp1:
08A9 7401       793            mov a, #0x01
08AB 120083     793            lcall ?WriteCommand          ;clear display
08AE C002       794            push AR2
08B0 7A32       794            mov R2, #50
08B2 120039     794            lcall ?Wait_Milli_Seconds
08B5 D002       794            pop AR2
08B7 C0E0       795            push acc
08B9 7401       795            mov a, #1
08BB 14         795            dec a
08BC 1200C1     795            lcall ?Set_Cursor_1 ; Select column and row
08BF D0E0       795            pop acc
08C1 C083       796            push dph
08C3 C082       796            push dpl
08C5 C0E0       796            push acc
08C7 9003AB     796            mov dptr, #MenuSoakTemp
08CA 1200B4     796            lcall ?Send_Constant_String
08CD D0E0       796            pop acc
08CF D082       796            pop dpl
08D1 D083       796            pop dph
08D3 C0E0       797            push acc
08D5 7401       797            mov a, #1
08D7 14         797            dec a
08D8 1200BF     797            lcall ?Set_Cursor_2 ; Select column and row
08DB D0E0       797            pop acc
08DD C000       798            push ar0
08DF A845       798            mov r0, soaktemp+1
08E1 1200C6     798            lcall ?Display_BCD
08E4 D000       798            pop ar0
08E6 C0E0       799            push acc
08E8 7403       799            mov a, #3
08EA 14         799            dec a
08EB 1200BF     799            lcall ?Set_Cursor_2 ; Select column and row
08EE D0E0       799            pop acc
08F0 C000       800            push ar0
08F2 A844       800            mov r0, soaktemp+0
08F4 1200C6     800            lcall ?Display_BCD
08F7 D000       800            pop ar0
08F9            801   Set_SoakTemp2:
08F9 20830F     802     jb BUTTON_1, Set_SoakTemp2_2
08FC C002       803            push AR2
08FE 7A32       803            mov R2, #50
0900 120039     803            lcall ?Wait_Milli_Seconds
0903 D002       803            pop AR2
0905 208303     804     jb BUTTON_1, Set_SoakTemp2_2
0908 020932     805     ljmp SoakTemp_inc
090B            806   Set_SoakTemp2_2:
090B 20820F     807     jb BUTTON_2, Set_SoakTemp2_3
090E C002       808            push AR2
0910 7A32       808            mov R2, #50
0912 120039     808            lcall ?Wait_Milli_Seconds
0915 D002       808            pop AR2
0917 208203     809     jb BUTTON_2, Set_SoakTemp2_3
091A 02097F     810     ljmp SoakTemp_dec
091D            811   Set_SoakTemp2_3:
091D 20870F     812            jb BUTTON_3, Set_SoakTemp2_4
0920 C002       813            push AR2
0922 7A32       813            mov R2, #50
0924 120039     813            lcall ?Wait_Milli_Seconds
0927 D002       813            pop AR2
0929 208703     814     jb BUTTON_3, Set_SoakTemp2_4
092C 0207F8     815     ljmp Menu_select1
092F            816   Set_SoakTemp2_4:
092F 0208F9     817     ljmp Set_SoakTemp2
0932            818     
0932            819   SoakTemp_inc:
0932 E544       820     mov a, soaktemp+0
0934 B4990C     821     cjne a, #0x99, SoakTemp_inc2
0937 E545       822     mov a, soaktemp+1
0939 B4020E     823     cjne a, #0x02, SoakTemp_inc3
093C E4         824     clr a                      ;299->0
093D F545       825     mov soaktemp+1, a
093F F544       826     mov soaktemp+0, a
0941 8013       827     sjmp SoakTemp_inc4
0943            828   SoakTemp_inc2:   ;regular increment
0943 2401       829     add a, #0x01
0945 D4         830     da a
0946 F544       831     mov soaktemp+0, a
0948 800C       832     sjmp SoakTemp_inc4
094A            833   SoakTemp_inc3:    ;99->100, 199->200, etc
094A E545       834     mov a, soaktemp+1 
094C 2401       835     add a, #0x01
094E D4         836     da a
094F F545       837     mov soaktemp+1, a
0951 E4         838     clr a
0952 F544       839     mov soaktemp+0, a
0954 8000       840     sjmp SoakTemp_inc4
0956            841   SoakTemp_inc4:  ;display
0956 C0E0       842            push acc
0958 7401       842            mov a, #1
095A 14         842            dec a
095B 1200BF     842            lcall ?Set_Cursor_2 ; Select column and row
095E D0E0       842            pop acc
0960 C000       843            push ar0
0962 A845       843            mov r0, soaktemp+1
0964 1200C6     843            lcall ?Display_BCD
0967 D000       843            pop ar0
0969 C0E0       844            push acc
096B 7403       844            mov a, #3
096D 14         844            dec a
096E 1200BF     844            lcall ?Set_Cursor_2 ; Select column and row
0971 D0E0       844            pop acc
0973 C000       845            push ar0
0975 A844       845            mov r0, soaktemp+0
0977 1200C6     845            lcall ?Display_BCD
097A D000       845            pop ar0
097C 0208F9     846     ljmp Set_SoakTemp2
097F            847     
097F            848   SoakTemp_dec:
097F E544       849     mov a, soaktemp+0
0981 B4000D     850     cjne a, #0x00, SoakTemp_dec2
0984 E545       851     mov a, soaktemp+1
0986 B4000F     852     cjne a, #0x00, SoakTemp_dec3
0989 754502     853     mov soaktemp+1, #0x02                 ;0->299
098C 754499     854     mov soaktemp+0, #0x99
098F 8014       855     sjmp SoakTemp_dec4
0991            856   SoakTemp_dec2:   ;regular decrement
0991 2499       857     add a, #0x99
0993 D4         858     da a
0994 F544       859     mov soaktemp+0, a
0996 800D       860     sjmp SoakTemp_dec4
0998            861   SoakTemp_dec3:   ;100->99, 200-> 199
0998 E545       862     mov a, soaktemp+1 
099A 2499       863     add a, #0x99
099C D4         864     da a
099D F545       865     mov soaktemp+1, a
099F 7499       866     mov a, #0x99
09A1 F544       867     mov soaktemp+0, a
09A3 8000       868     sjmp SoakTemp_dec4
09A5            869   SoakTemp_dec4:    ;display
09A5 C0E0       870            push acc
09A7 7401       870            mov a, #1
09A9 14         870            dec a
09AA 1200BF     870            lcall ?Set_Cursor_2 ; Select column and row
09AD D0E0       870            pop acc
09AF C000       871            push ar0
09B1 A845       871            mov r0, soaktemp+1
09B3 1200C6     871            lcall ?Display_BCD
09B6 D000       871            pop ar0
09B8 C0E0       872            push acc
09BA 7403       872            mov a, #3
09BC 14         872            dec a
09BD 1200BF     872            lcall ?Set_Cursor_2 ; Select column and row
09C0 D0E0       872            pop acc
09C2 C000       873            push ar0
09C4 A844       873            mov r0, soaktemp+0
09C6 1200C6     873            lcall ?Display_BCD
09C9 D000       873            pop ar0
09CB 0208F9     874     ljmp Set_SoakTemp2
09CE            875   
09CE            876   ; Settings - Soak Time
09CE            877   Set_SoakTime1:
09CE 7401       878            mov a, #0x01
09D0 120083     878            lcall ?WriteCommand          ;clear display
09D3 C002       879            push AR2
09D5 7A32       879            mov R2, #50
09D7 120039     879            lcall ?Wait_Milli_Seconds
09DA D002       879            pop AR2
09DC C0E0       880            push acc
09DE 7401       880            mov a, #1
09E0 14         880            dec a
09E1 1200C1     880            lcall ?Set_Cursor_1 ; Select column and row
09E4 D0E0       880            pop acc
09E6 C083       881            push dph
09E8 C082       881            push dpl
09EA C0E0       881            push acc
09EC 9003B6     881            mov dptr, #MenuSoakTime
09EF 1200B4     881            lcall ?Send_Constant_String
09F2 D0E0       881            pop acc
09F4 D082       881            pop dpl
09F6 D083       881            pop dph
09F8 C0E0       882            push acc
09FA 7401       882            mov a, #1
09FC 14         882            dec a
09FD 1200BF     882            lcall ?Set_Cursor_2 ; Select column and row
0A00 D0E0       882            pop acc
0A02 C000       883            push ar0
0A04 A847       883            mov r0, soaktime+1
0A06 1200C6     883            lcall ?Display_BCD
0A09 D000       883            pop ar0
0A0B C0E0       884            push acc
0A0D 7403       884            mov a, #3
0A0F 14         884            dec a
0A10 1200BF     884            lcall ?Set_Cursor_2 ; Select column and row
0A13 D0E0       884            pop acc
0A15 C000       885            push ar0
0A17 A846       885            mov r0, soaktime+0
0A19 1200C6     885            lcall ?Display_BCD
0A1C D000       885            pop ar0
0A1E            886   Set_SoakTime2:
0A1E 20830F     887     jb BUTTON_1, Set_SoakTime2_2
0A21 C002       888            push AR2
0A23 7A32       888            mov R2, #50
0A25 120039     888            lcall ?Wait_Milli_Seconds
0A28 D002       888            pop AR2
0A2A 208303     889     jb BUTTON_1, Set_SoakTime2_2
0A2D 020A57     890     ljmp SoakTime_inc
0A30            891   Set_SoakTime2_2:
0A30 20820F     892     jb BUTTON_2, Set_SoakTime2_3
0A33 C002       893            push AR2
0A35 7A32       893            mov R2, #50
0A37 120039     893            lcall ?Wait_Milli_Seconds
0A3A D002       893            pop AR2
0A3C 208203     894     jb BUTTON_2, Set_SoakTime2_3
0A3F 020AA4     895     ljmp SoakTime_dec
0A42            896   Set_SoakTime2_3:
0A42 20870F     897            jb BUTTON_3, Set_SoakTime2_4
0A45 C002       898            push AR2
0A47 7A32       898            mov R2, #50
0A49 120039     898            lcall ?Wait_Milli_Seconds
0A4C D002       898            pop AR2
0A4E 208703     899     jb BUTTON_3, Set_SoakTime2_4
0A51 0207F8     900     ljmp Menu_select1
0A54            901   Set_SoakTime2_4:
0A54 020A1E     902     ljmp Set_SoakTime2
0A57            903   
0A57            904   SoakTime_inc:
0A57 E546       905     mov a, soaktime+0
0A59 B4990C     906     cjne a, #0x99, SoakTime_inc2
0A5C E547       907     mov a, soaktime+1
0A5E B4020E     908     cjne a, #0x02, SoakTime_inc3
0A61 E4         909     clr a                      ;299->0
0A62 F547       910     mov soaktime+1, a
0A64 F546       911     mov soaktime+0, a
0A66 8013       912     sjmp SoakTime_inc4
0A68            913   SoakTime_inc2:   ;regular increment
0A68 2401       914     add a, #0x01
0A6A D4         915     da a
0A6B F546       916     mov soaktime+0, a
0A6D 800C       917     sjmp SoakTime_inc4
0A6F            918   SoakTime_inc3:    ;99->100, 199->200, etc
0A6F E547       919     mov a, soaktime+1 
0A71 2401       920     add a, #0x01
0A73 D4         921     da a
0A74 F547       922     mov soaktime+1, a
0A76 E4         923     clr a
0A77 F546       924     mov soaktime+0, a
0A79 8000       925     sjmp SoakTime_inc4
0A7B            926   SoakTime_inc4:  ;display
0A7B C0E0       927            push acc
0A7D 7401       927            mov a, #1
0A7F 14         927            dec a
0A80 1200BF     927            lcall ?Set_Cursor_2 ; Select column and row
0A83 D0E0       927            pop acc
0A85 C000       928            push ar0
0A87 A847       928            mov r0, soaktime+1
0A89 1200C6     928            lcall ?Display_BCD
0A8C D000       928            pop ar0
0A8E C0E0       929            push acc
0A90 7403       929            mov a, #3
0A92 14         929            dec a
0A93 1200BF     929            lcall ?Set_Cursor_2 ; Select column and row
0A96 D0E0       929            pop acc
0A98 C000       930            push ar0
0A9A A846       930            mov r0, soaktime+0
0A9C 1200C6     930            lcall ?Display_BCD
0A9F D000       930            pop ar0
0AA1 020A1E     931     ljmp Set_SoakTime2
0AA4            932     
0AA4            933   SoakTime_dec:
0AA4 E546       934     mov a, soaktime+0
0AA6 B4000D     935     cjne a, #0x00, SoakTime_dec2
0AA9 E547       936     mov a, soaktime+1
0AAB B4000F     937     cjne a, #0x00, SoakTime_dec3
0AAE 754702     938     mov soaktime+1, #0x02                 ;0->299
0AB1 754699     939     mov soaktime+0, #0x99
0AB4 8014       940     sjmp SoakTime_dec4
0AB6            941   SoakTime_dec2:   ;regular decrement
0AB6 2499       942     add a, #0x99
0AB8 D4         943     da a
0AB9 F546       944     mov soaktime+0, a
0ABB 800D       945     sjmp SoakTime_dec4
0ABD            946   SoakTime_dec3:   ;100->99, 200-> 199
0ABD E547       947     mov a, soaktime+1 
0ABF 2499       948     add a, #0x99
0AC1 D4         949     da a
0AC2 F547       950     mov soaktime+1, a
0AC4 7499       951     mov a, #0x99
0AC6 F546       952     mov soaktime+0, a
0AC8 8000       953     sjmp SoakTime_dec4
0ACA            954   SoakTime_dec4:    ;display
0ACA C0E0       955            push acc
0ACC 7401       955            mov a, #1
0ACE 14         955            dec a
0ACF 1200BF     955            lcall ?Set_Cursor_2 ; Select column and row
0AD2 D0E0       955            pop acc
0AD4 C000       956            push ar0
0AD6 A847       956            mov r0, soaktime+1
0AD8 1200C6     956            lcall ?Display_BCD
0ADB D000       956            pop ar0
0ADD C0E0       957            push acc
0ADF 7403       957            mov a, #3
0AE1 14         957            dec a
0AE2 1200BF     957            lcall ?Set_Cursor_2 ; Select column and row
0AE5 D0E0       957            pop acc
0AE7 C000       958            push ar0
0AE9 A846       958            mov r0, soaktime+0
0AEB 1200C6     958            lcall ?Display_BCD
0AEE D000       958            pop ar0
0AF0 020A1E     959     ljmp Set_SoakTime2
0AF3            960   
0AF3            961   ; Second set of Menu - Set reflow parameters
0AF3            962   Menu_select3:
0AF3 7401       963            mov a, #0x01
0AF5 120083     963            lcall ?WriteCommand
0AF8 C002       964            push AR2
0AFA 7A32       964            mov R2, #50
0AFC 120039     964            lcall ?Wait_Milli_Seconds
0AFF D002       964            pop AR2
0B01            965   Menu_select4:
0B01 C0E0       966            push acc
0B03 7401       966            mov a, #1
0B05 14         966            dec a
0B06 1200C1     966            lcall ?Set_Cursor_1 ; Select column and row
0B09 D0E0       966            pop acc
0B0B C083       967            push dph
0B0D C082       967            push dpl
0B0F C0E0       967            push acc
0B11 90038F     967            mov dptr, #MenuMessage3
0B14 1200B4     967            lcall ?Send_Constant_String
0B17 D0E0       967            pop acc
0B19 D082       967            pop dpl
0B1B D083       967            pop dph
0B1D C0E0       968            push acc
0B1F 7401       968            mov a, #1
0B21 14         968            dec a
0B22 1200BF     968            lcall ?Set_Cursor_2 ; Select column and row
0B25 D0E0       968            pop acc
0B27 C083       969            push dph
0B29 C082       969            push dpl
0B2B C0E0       969            push acc
0B2D 90039D     969            mov dptr, #MenuMessage4
0B30 1200B4     969            lcall ?Send_Constant_String
0B33 D0E0       969            pop acc
0B35 D082       969            pop dpl
0B37 D083       969            pop dph
0B39            970     
0B39 C002       971            push AR2
0B3B 7A32       971            mov R2, #50
0B3D 120039     971            lcall ?Wait_Milli_Seconds
0B40 D002       971            pop AR2 ;go to set Reflow Temperature
0B42 208306     972     jb BUTTON_1, Menu_select4_2
0B45 3083FD     973     jnb BUTTON_1, $
0B48 020B84     974     ljmp Jump_to_Set_ReflowTemp1
0B4B            975     
0B4B            976   Menu_select4_2:
0B4B C002       977            push AR2
0B4D 7A32       977            mov R2, #50
0B4F 120039     977            lcall ?Wait_Milli_Seconds
0B52 D002       977            pop AR2 ;go to set Reflow Time
0B54 208206     978     jb BUTTON_2, Menu_select4_3
0B57 3082FD     979     jnb BUTTON_2, $
0B5A 020B87     980     ljmp Jump_to_Set_ReflowTime1
0B5D            981     
0B5D            982   Menu_select4_3:
0B5D C002       983            push AR2
0B5F 7A32       983            mov R2, #50
0B61 120039     983            lcall ?Wait_Milli_Seconds
0B64 D002       983            pop AR2 ;go to first set of menus
0B66 208706     984     jb BUTTON_3, Menu_select4_4
0B69 3087FD     985     jnb BUTTON_3, $
0B6C 020B8D     986     ljmp Jump_to_Menu_select2
0B6F            987   
0B6F            988   Menu_select4_4:
0B6F C002       989            push AR2
0B71 7A32       989            mov R2, #50
0B73 120039     989            lcall ?Wait_Milli_Seconds
0B76 D002       989            pop AR2   ; start the reflow process
0B78 20840F     990     jb StartButton, Jump_to_Menu_select3_1
0B7B 3084FD     991     jnb StartButton, $
0B7E 020886     992     ljmp Jump_To_FOREVER1
0B81            993   
0B81            994   Jump_To_FOREVER2:
0B81 02053A     995            ljmp FOREVER
0B84            996     
0B84            997   
0B84            998   Jump_to_Set_ReflowTemp1:
0B84 020B90     999            ljmp Set_ReflowTemp1
0B87           1000     
0B87           1001   Jump_to_Set_ReflowTime1:
0B87 020CB5    1002            ljmp Set_ReflowTime1
0B8A           1003            
0B8A           1004   Jump_to_Menu_select3_1:
0B8A 020B01    1005            ljmp Menu_select4
0B8D           1006     
0B8D           1007   Jump_to_Menu_select2:
0B8D 0207F8    1008            ljmp Menu_select1
0B90           1009     
0B90           1010   ; Settings - Reflow Temperature
0B90           1011   Set_ReflowTemp1:
0B90 7401      1012            mov a, #0x01
0B92 120083    1012            lcall ?WriteCommand          ;clear display
0B95 C002      1013            push AR2
0B97 7A32      1013            mov R2, #50
0B99 120039    1013            lcall ?Wait_Milli_Seconds
0B9C D002      1013            pop AR2
0B9E C0E0      1014            push acc
0BA0 7401      1014            mov a, #1
0BA2 14        1014            dec a
0BA3 1200C1    1014            lcall ?Set_Cursor_1 ; Select column and row
0BA6 D0E0      1014            pop acc
0BA8 C083      1015            push dph
0BAA C082      1015            push dpl
0BAC C0E0      1015            push acc
0BAE 9003C1    1015            mov dptr, #MenuReflowTemp
0BB1 1200B4    1015            lcall ?Send_Constant_String
0BB4 D0E0      1015            pop acc
0BB6 D082      1015            pop dpl
0BB8 D083      1015            pop dph
0BBA C0E0      1016            push acc
0BBC 7401      1016            mov a, #1
0BBE 14        1016            dec a
0BBF 1200BF    1016            lcall ?Set_Cursor_2 ; Select column and row
0BC2 D0E0      1016            pop acc
0BC4 C000      1017            push ar0
0BC6 A849      1017            mov r0, reflowtemp+1
0BC8 1200C6    1017            lcall ?Display_BCD
0BCB D000      1017            pop ar0
0BCD C0E0      1018            push acc
0BCF 7403      1018            mov a, #3
0BD1 14        1018            dec a
0BD2 1200BF    1018            lcall ?Set_Cursor_2 ; Select column and row
0BD5 D0E0      1018            pop acc
0BD7 C000      1019            push ar0
0BD9 A848      1019            mov r0, reflowtemp+0
0BDB 1200C6    1019            lcall ?Display_BCD
0BDE D000      1019            pop ar0
0BE0           1020     
0BE0           1021   Set_ReflowTemp2:
0BE0 20830F    1022     jb BUTTON_1, Set_ReflowTemp2_2
0BE3 C002      1023            push AR2
0BE5 7A32      1023            mov R2, #50
0BE7 120039    1023            lcall ?Wait_Milli_Seconds
0BEA D002      1023            pop AR2
0BEC 208303    1024     jb BUTTON_1, Set_ReflowTemp2_2
0BEF 020C19    1025     ljmp ReflowTemp_inc
0BF2           1026   Set_ReflowTemp2_2:
0BF2 20820F    1027     jb BUTTON_2, Set_ReflowTemp2_3
0BF5 C002      1028            push AR2
0BF7 7A32      1028            mov R2, #50
0BF9 120039    1028            lcall ?Wait_Milli_Seconds
0BFC D002      1028            pop AR2
0BFE 208203    1029     jb BUTTON_2, Set_ReflowTemp2_3
0C01 020C66    1030     ljmp ReflowTemp_dec
0C04           1031   Set_ReflowTemp2_3:
0C04 20870F    1032            jb BUTTON_3, Set_ReflowTemp2_4
0C07 C002      1033            push AR2
0C09 7A32      1033            mov R2, #50
0C0B 120039    1033            lcall ?Wait_Milli_Seconds
0C0E D002      1033            pop AR2
0C10 208703    1034     jb BUTTON_3, Set_ReflowTemp2_4
0C13 020AF3    1035     ljmp Menu_select3
0C16           1036   Set_ReflowTemp2_4:
0C16 020BE0    1037     ljmp Set_ReflowTemp2
0C19           1038    
0C19           1039   ReflowTemp_inc:
0C19 E548      1040     mov a, reflowtemp+0
0C1B B4990C    1041     cjne a, #0x99, ReflowTemp_inc2
0C1E E549      1042     mov a, reflowtemp+1
0C20 B4020E    1043     cjne a, #0x02, ReflowTemp_inc3
0C23 E4        1044     clr a                      ;299->0
0C24 F549      1045     mov reflowtemp+1, a
0C26 F548      1046     mov reflowtemp+0, a
0C28 8013      1047     sjmp ReflowTemp_inc4
0C2A           1048   ReflowTemp_inc2:   ;regular increment
0C2A 2401      1049     add a, #0x01
0C2C D4        1050     da a
0C2D F548      1051     mov reflowtemp+0, a
0C2F 800C      1052     sjmp ReflowTemp_inc4
0C31           1053   ReflowTemp_inc3:    ;99->100, 199->200, etc
0C31 E549      1054     mov a, reflowtemp+1 
0C33 2401      1055     add a, #0x01
0C35 D4        1056     da a
0C36 F549      1057     mov reflowtemp+1, a
0C38 E4        1058     clr a
0C39 F548      1059     mov reflowtemp+0, a
0C3B 8000      1060     sjmp ReflowTemp_inc4
0C3D           1061   ReflowTemp_inc4:  ;display
0C3D C0E0      1062            push acc
0C3F 7401      1062            mov a, #1
0C41 14        1062            dec a
0C42 1200BF    1062            lcall ?Set_Cursor_2 ; Select column and row
0C45 D0E0      1062            pop acc
0C47 C000      1063            push ar0
0C49 A849      1063            mov r0, reflowtemp+1
0C4B 1200C6    1063            lcall ?Display_BCD
0C4E D000      1063            pop ar0
0C50 C0E0      1064            push acc
0C52 7403      1064            mov a, #3
0C54 14        1064            dec a
0C55 1200BF    1064            lcall ?Set_Cursor_2 ; Select column and row
0C58 D0E0      1064            pop acc
0C5A C000      1065            push ar0
0C5C A848      1065            mov r0, reflowtemp+0
0C5E 1200C6    1065            lcall ?Display_BCD
0C61 D000      1065            pop ar0
0C63 020BE0    1066     ljmp Set_ReflowTemp2
0C66           1067     
0C66           1068   ReflowTemp_dec:
0C66 E548      1069     mov a, reflowtemp+0
0C68 B4000D    1070     cjne a, #0x00, ReflowTemp_dec2
0C6B E549      1071     mov a, reflowtemp+1
0C6D B4000F    1072     cjne a, #0x00, ReflowTemp_dec3
0C70 754902    1073     mov reflowtemp+1, #0x02                 ;0->299
0C73 754899    1074     mov reflowtemp+0, #0x99
0C76 8014      1075     sjmp ReflowTemp_dec4
0C78           1076   ReflowTemp_dec2:   ;regular decrement
0C78 2499      1077     add a, #0x99
0C7A D4        1078     da a
0C7B F548      1079     mov reflowtemp+0, a
0C7D 800D      1080     sjmp ReflowTemp_dec4
0C7F           1081   ReflowTemp_dec3:   ;100->99, 200-> 199
0C7F E549      1082     mov a, reflowtemp+1 
0C81 2499      1083     add a, #0x99
0C83 D4        1084     da a
0C84 F549      1085     mov reflowtemp+1, a
0C86 7499      1086     mov a, #0x99
0C88 F548      1087     mov reflowtemp+0, a
0C8A 8000      1088     sjmp ReflowTemp_dec4
0C8C           1089   ReflowTemp_dec4:    ;display
0C8C C0E0      1090            push acc
0C8E 7401      1090            mov a, #1
0C90 14        1090            dec a
0C91 1200BF    1090            lcall ?Set_Cursor_2 ; Select column and row
0C94 D0E0      1090            pop acc
0C96 C000      1091            push ar0
0C98 A849      1091            mov r0, reflowtemp+1
0C9A 1200C6    1091            lcall ?Display_BCD
0C9D D000      1091            pop ar0
0C9F C0E0      1092            push acc
0CA1 7403      1092            mov a, #3
0CA3 14        1092            dec a
0CA4 1200BF    1092            lcall ?Set_Cursor_2 ; Select column and row
0CA7 D0E0      1092            pop acc
0CA9 C000      1093            push ar0
0CAB A848      1093            mov r0, reflowtemp+0
0CAD 1200C6    1093            lcall ?Display_BCD
0CB0 D000      1093            pop ar0
0CB2 020BE0    1094     ljmp Set_ReflowTemp2
0CB5           1095   
0CB5           1096   ; Settings - Reflow Time
0CB5           1097   Set_ReflowTime1:
0CB5 7401      1098            mov a, #0x01
0CB7 120083    1098            lcall ?WriteCommand          ;clear display
0CBA C002      1099            push AR2
0CBC 7A32      1099            mov R2, #50
0CBE 120039    1099            lcall ?Wait_Milli_Seconds
0CC1 D002      1099            pop AR2
0CC3 C0E0      1100            push acc
0CC5 7401      1100            mov a, #1
0CC7 14        1100            dec a
0CC8 1200C1    1100            lcall ?Set_Cursor_1 ; Select column and row
0CCB D0E0      1100            pop acc
0CCD C083      1101            push dph
0CCF C082      1101            push dpl
0CD1 C0E0      1101            push acc
0CD3 9003CE    1101            mov dptr, #MenuReflowTime
0CD6 1200B4    1101            lcall ?Send_Constant_String
0CD9 D0E0      1101            pop acc
0CDB D082      1101            pop dpl
0CDD D083      1101            pop dph
0CDF C0E0      1102            push acc
0CE1 7401      1102            mov a, #1
0CE3 14        1102            dec a
0CE4 1200BF    1102            lcall ?Set_Cursor_2 ; Select column and row
0CE7 D0E0      1102            pop acc
0CE9 C000      1103            push ar0
0CEB A84B      1103            mov r0, reflowtime+1
0CED 1200C6    1103            lcall ?Display_BCD
0CF0 D000      1103            pop ar0
0CF2 C0E0      1104            push acc
0CF4 7403      1104            mov a, #3
0CF6 14        1104            dec a
0CF7 1200BF    1104            lcall ?Set_Cursor_2 ; Select column and row
0CFA D0E0      1104            pop acc
0CFC C000      1105            push ar0
0CFE A84A      1105            mov r0, reflowtime+0
0D00 1200C6    1105            lcall ?Display_BCD
0D03 D000      1105            pop ar0
0D05           1106   Set_ReflowTime2:
0D05 20830F    1107     jb BUTTON_1, Set_ReflowTime2_2
0D08 C002      1108            push AR2
0D0A 7A32      1108            mov R2, #50
0D0C 120039    1108            lcall ?Wait_Milli_Seconds
0D0F D002      1108            pop AR2
0D11 208303    1109     jb BUTTON_1, Set_ReflowTime2_2
0D14 020D3E    1110     ljmp ReflowTime_inc
0D17           1111   Set_ReflowTime2_2:
0D17 20820F    1112     jb BUTTON_2, Set_ReflowTime2_3
0D1A C002      1113            push AR2
0D1C 7A32      1113            mov R2, #50
0D1E 120039    1113            lcall ?Wait_Milli_Seconds
0D21 D002      1113            pop AR2
0D23 208203    1114     jb BUTTON_2, Set_ReflowTime2_3
0D26 020D8B    1115     ljmp ReflowTime_dec
0D29           1116   Set_ReflowTime2_3:
0D29 20870F    1117            jb BUTTON_3, Set_ReflowTime2_4
0D2C C002      1118            push AR2
0D2E 7A32      1118            mov R2, #50
0D30 120039    1118            lcall ?Wait_Milli_Seconds
0D33 D002      1118            pop AR2
0D35 208703    1119     jb BUTTON_3, Set_ReflowTime2_4
0D38 020AF3    1120     ljmp Menu_select3
0D3B           1121   Set_ReflowTime2_4:
0D3B 020D05    1122     ljmp Set_ReflowTime2
0D3E           1123   
0D3E           1124   ReflowTime_inc:
0D3E E54A      1125     mov a, reflowtime+0
0D40 B4990C    1126     cjne a, #0x99, ReflowTime_inc2
0D43 E54B      1127     mov a, reflowtime+1
0D45 B4020E    1128     cjne a, #0x02, ReflowTime_inc3
0D48 E4        1129     clr a                      ;299->0
0D49 F54B      1130     mov reflowtime+1, a
0D4B F54A      1131     mov reflowtime+0, a
0D4D 8013      1132     sjmp ReflowTime_inc4
0D4F           1133   ReflowTime_inc2:   ;regular increment
0D4F 2401      1134     add a, #0x01
0D51 D4        1135     da a
0D52 F54A      1136     mov reflowtime+0, a
0D54 800C      1137     sjmp ReflowTime_inc4
0D56           1138   ReflowTime_inc3:    ;99->100, 199->200, etc
0D56 E54B      1139     mov a, reflowtime+1 
0D58 2401      1140     add a, #0x01
0D5A D4        1141     da a
0D5B F54B      1142     mov reflowtime+1, a
0D5D E4        1143     clr a
0D5E F54A      1144     mov reflowtime+0, a
0D60 8000      1145     sjmp ReflowTime_inc4
0D62           1146   ReflowTime_inc4:  ;display
0D62 C0E0      1147            push acc
0D64 7401      1147            mov a, #1
0D66 14        1147            dec a
0D67 1200BF    1147            lcall ?Set_Cursor_2 ; Select column and row
0D6A D0E0      1147            pop acc
0D6C C000      1148            push ar0
0D6E A84B      1148            mov r0, reflowtime+1
0D70 1200C6    1148            lcall ?Display_BCD
0D73 D000      1148            pop ar0
0D75 C0E0      1149            push acc
0D77 7403      1149            mov a, #3
0D79 14        1149            dec a
0D7A 1200BF    1149            lcall ?Set_Cursor_2 ; Select column and row
0D7D D0E0      1149            pop acc
0D7F C000      1150            push ar0
0D81 A84A      1150            mov r0, reflowtime+0
0D83 1200C6    1150            lcall ?Display_BCD
0D86 D000      1150            pop ar0
0D88 020D05    1151     ljmp Set_ReflowTime2
0D8B           1152     
0D8B           1153   ReflowTime_dec:
0D8B E54A      1154     mov a, reflowtime+0
0D8D B4000D    1155     cjne a, #0x00, ReflowTime_dec2
0D90 E54B      1156     mov a, reflowtime+1
0D92 B4000F    1157     cjne a, #0x00, ReflowTime_dec3
0D95 754B02    1158     mov reflowtime+1, #0x02                 ;0->299
0D98 754A99    1159     mov reflowtime+0, #0x99
0D9B 8014      1160     sjmp ReflowTime_dec4
0D9D           1161   ReflowTime_dec2:   ;regular decrement
0D9D 2499      1162     add a, #0x99
0D9F D4        1163     da a
0DA0 F54A      1164     mov reflowtime+0, a
0DA2 800D      1165     sjmp ReflowTime_dec4
0DA4           1166   ReflowTime_dec3:   ;100->99, 200-> 199
0DA4 E54B      1167     mov a, reflowtime+1 
0DA6 2499      1168     add a, #0x99
0DA8 D4        1169     da a
0DA9 F54B      1170     mov reflowtime+1, a
0DAB 7499      1171     mov a, #0x99
0DAD F54A      1172     mov reflowtime+0, a
0DAF 8000      1173     sjmp ReflowTime_dec4
0DB1           1174   ReflowTime_dec4:    ;display
0DB1 C0E0      1175            push acc
0DB3 7401      1175            mov a, #1
0DB5 14        1175            dec a
0DB6 1200BF    1175            lcall ?Set_Cursor_2 ; Select column and row
0DB9 D0E0      1175            pop acc
0DBB C000      1176            push ar0
0DBD A84B      1176            mov r0, reflowtime+1
0DBF 1200C6    1176            lcall ?Display_BCD
0DC2 D000      1176            pop ar0
0DC4 C0E0      1177            push acc
0DC6 7403      1177            mov a, #3
0DC8 14        1177            dec a
0DC9 1200BF    1177            lcall ?Set_Cursor_2 ; Select column and row
0DCC D0E0      1177            pop acc
0DCE C000      1178            push ar0
0DD0 A84A      1178            mov r0, reflowtime+0
0DD2 1200C6    1178            lcall ?Display_BCD
0DD5 D000      1178            pop ar0
0DD7 020D05    1179     ljmp Set_ReflowTime2
0DDA           1180            
0DDA           1181            
0DDA           1182   EN
