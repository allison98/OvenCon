                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0205CD       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096       ;reference at LM4040
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   BEEPER EQU P3.7 ; placeholder pin for beeper
0003             16   
0003             17   
0003             18   SEGA equ P2.4
0003             19   SEGB equ P2.5
0003             20   SEGC equ P2.6
0003             21   SEGD equ P2.7
0003             22   SEGE equ P4.5
0003             23   SEGF equ P4.4
0003             24   SEGG equ P0.7
0003             25   CA1  equ P0.1
0003             26   CA2  equ P0.2
0003             27   CA3  equ P0.0
0003             28   
0003             29   TIMER0_RELOAD_L DATA 0xf2
0003             30   TIMER1_RELOAD_L DATA 0xf3
0003             31   TIMER0_RELOAD_H DATA 0xf4
0003             32   TIMER1_RELOAD_H DATA 0xf5
0003             33   
0003             34   TIMER0_RATE   EQU 4096             ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0003             35   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             36   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0003             37   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0003             38   
0003             39   C4                        EQU 262
0003             40   D4                EQU 294
0003             41   E4                        EQU 330
0003             42   F4                        EQU 349
0003             43   G4                        EQU 392
0003             44   A4                        EQU 440
0003             45   B4                EQU 494
0003             46   
0003             47   C5                        EQU 523
0003             48   D5                EQU 587
0003             49   E5                        EQU 659
0003             50   F5                        EQU 698
0003             51   G5                        EQU 784
0003             52   A5                        EQU 880
0003             53   B5                EQU 988
0003             54   
0003             55   G4F                       EQU 370
0003             56   A4F                       EQU 415
0003             57   B4F                       EQU 466
0003             58   C5S                       EQU 554
0003             59   D5F                       EQU 554
0003             60   E5F                       EQU 622
0003             61   
0003             62   C4_reload        EQU ((65536-(CLK/(2*C4))))
0003             63   D4_reload   EQU ((65536-(CLK/(2*D4))))
0003             64   E4_reload        EQU ((65536-(CLK/(2*E4))))
0003             65   F4_reload        EQU ((65536-(CLK/(2*F4))))
0003             66   G4_reload        EQU ((65536-(CLK/(2*G4))))
0003             67   A4_reload        EQU ((65536-(CLK/(2*A4))))
0003             68   B4_reload        EQU ((65536-(CLK/(2*B4))))
0003             69   
0003             70   C5_reload        EQU ((65536-(CLK/(2*C5))))
0003             71   D5_reload   EQU ((65536-(CLK/(2*D5))))
0003             72   E5_reload        EQU ((65536-(CLK/(2*E5))))
0003             73   F5_reload        EQU ((65536-(CLK/(2*F5))))
0003             74   G5_reload        EQU ((65536-(CLK/(2*G5))))
0003             75   A5_reload        EQU ((65536-(CLK/(2*A5))))
0003             76   B5_reload        EQU ((65536-(CLK/(2*B5))))
0003             77   
0003             78   G4F_reload       EQU ((65536-(CLK/(2*G4F))))
0003             79   A4F_reload       EQU ((65536-(CLK/(2*A4F))))
0003             80   B4F_reload       EQU ((65536-(CLK/(2*B4F))))
0003             81   C5S_reload       EQU ((65536-(CLK/(2*C5S))))
0003             82   D5F_reload       EQU ((65536-(CLK/(2*D5F))))
0003             83   E5F_reload       EQU ((65536-(CLK/(2*E5F))))
0003             84   
0003             85   
0003             86   ; buttons
0003             87   BOOT_BUTTON   equ P4.5
0003             88   
0003             89   ; External interrupt 0 vector (not used in this code)
0003             90   org 0x0003
0003 32          91            reti
0004             92   
0004             93   ; Timer/Counter 0 overflow interrupt vector
000B             94   org 0x000B
000B 02048C      95            ljmp Timer0_ISR
000E             96   
000E             97   ; External interrupt 1 vector (not used in this code)
0013             98   org 0x0013
0013 32          99            reti
0014            100   
0014            101   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            102   org 0x001B
001B 32         103            reti
001C            104   
001C            105   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            106   org 0x0023 
0023 32         107            reti
0024            108            
0024            109   ; Timer/Counter 2 overflow interrupt vector
002B            110   org 0x002B
002B 0204A8     111            ljmp Timer2_ISR
002E            112            
0030            113   dseg at 0x30
0030            114   ;future variables
0030            115   x:   ds 4
0034            116   y:   ds 4
0038            117   bcd: ds 5
003D            118   Result: ds 2
003F            119   coldtemp: ds 1
0040            120   hottemp:ds 4
0044            121   soaktemp: ds 1
0045            122   soaktime: ds 1
0046            123   reflowtemp: ds 1
0047            124   reflowtime: ds 1
0048            125   countererror: ds 1
0049            126   temperature:ds 4
004D            127   Count1ms:     ds 2 ; Used to determine when half second has passed 
004F            128   reflowparam: ds 1
0050            129   second: ds 1
0051            130   minute: ds 1
0052            131   temp: ds 1
0053            132   count: ds 1
0054            133   Disp1:  ds 1 
0055            134   Disp2:  ds 1
0056            135   Disp3:  ds 1
0057            136   state:  ds 1
0058            137   
0000            138   BSEG
0000            139   startflag: dbit 1
0001            140   errorflag: dbit 1
0002            141   mf: dbit 1
0003            142   
002E            143   CSEG
002E            144   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E            145   LCD_RS equ P1.1
002E            146   LCD_RW equ P1.2
002E            147   LCD_E  equ P1.3
002E            148   LCD_D4 equ P3.2
002E            149   LCD_D5 equ P3.3
002E            150   LCD_D6 equ P3.4
002E            151   LCD_D7 equ P3.5
002E            152   
002E            153   StartButton equ P0.3
002E            154   BUTTON_1 equ P0.4
002E            155   BUTTON_2 equ P0.5
002E            156   BUTTON_3 equ P0.6
002E            157   OvenButton equ P1.0
002E            158   
002E            159   
                161   $LIST
011F            163   
                546   $LIST
                165   $LIST
038F            167   
038F            168   
038F            169   ; constant strings  
038F 54656D70   170   Test_msg:  db 'Temp:xx.xx*C', 0
     3A78782E
     78782A43
     00
039C 312E536F   171   MenuMessage1: db '1.Soak Temp', 0   ;used when selecting parameter
     616B2054
     656D7000
03A8 322E536F   172   MenuMessage2: db '2.Soak Time', 0
     616B2054
     696D6500
03B4 332E5265   173   MenuMessage3: db '3.Reflow Temp', 0
     666C6F77
     2054656D
     7000
03C2 342E5265   174   MenuMessage4: db '4.Reflow Time', 0
     666C6F77
     2054696D
     6500
03D0 536F616B   175   MenuSoakTemp: db 'Soak Temp:', 0  ;used when changing parameter
     2054656D
     703A00
03DB 536F616B   176   MenuSoakTime: db 'Soak Time:', 0
     2054696D
     653A00
03E6 5265666C   177   MenuReflowTemp: db 'Reflow Temp:', 0
     6F772054
     656D703A
     00
03F3 5265666C   178   MenuReflowTime: db 'Reflow Time:', 0
     6F772054
     696D653A
     00
0400 5265666C   179   ReflowStateMess: db 'Reflow State    ', 0
     6F772053
     74617465
     20202020
     00
0411 536F616B   180   SoakState: db 'Soak State      ', 0
     20537461
     74652020
     20202020
     00
0422 54656D70   181   TemperatureRise: db 'Temp. Increase  ',0
     2E20496E
     63726561
     73652020
     00
0433 4F76656E   182   CoolingTemp: db 'Oven is cooling.',0
     20697320
     636F6F6C
     696E672E
     00
0444            183   
0444 31537572   184   Tone_Message1:     db '1Surprise 2Mario', 0
     70726973
     6520324D
     6172696F
     00
0455 20202033   185   Tone_Message2:     db '   3Star Wars   ', 0
     53746172
     20576172
     73202020
     00
0466            186   
0466            187   
0466 20202020   188   Blank: db '              ',0
     20202020
     20202020
     202000
0475            189   
0475            190   ;---------------------------------;
0475            191   ; Routine to initialize the ISR   ;
0475            192   ; for timer 0                     ;
0475            193   ;---------------------------------;
0475            194   
0475            195   Timer0_Init:
0475 E589       196            mov a, TMOD
0477 54F0       197            anl a, #0xf0 ; Clear the bits for timer 0
0479 4401       198            orl a, #0x01 ; Configure timer 0 as 16-timer
047B F589       199            mov TMOD, a
047D 758CEA     200            mov TH0, #high(TIMER0_RELOAD)
0480 758AE8     201            mov TL0, #low(TIMER0_RELOAD)
0483            202            ; Set autoreload value
0483 75F4EA     203            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0486 75F2E8     204            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0489            205            ; Enable the timer and interrupts
0489 D2A9       206       setb ET0  ; Enable timer 0 interrupt
048B            207       ;setb TR0  ; Start timer 0
048B 22         208            ret
048C            209   
048C            210   ;---------------------------------;
048C            211   ; ISR for timer 0.  Set to execute;
048C            212   ; every 1/4096Hz to generate a    ;
048C            213   ; 2048 Hz square wave at pin P3.7 ;
048C            214   ; Used for the state change beeps ;
048C            215   ;---------------------------------;
048C            216   
048C            217   Timer0_ISR:
048C B2B7       218            cpl BEEPER
048E 32         219            reti
048F            220     
048F            221   ;---------------------------------;
048F            222   ; Routine to initialize the ISR   ;
048F            223   ; for timer 2                     ;
048F            224   ;---------------------------------;
048F            225   Timer2_Init:
048F 75C800     226            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0492 75CDA9     227            mov TH2, #high(TIMER2_RELOAD)
0495 75CC9A     228            mov TL2, #low(TIMER2_RELOAD)
0498            229            ; Set the reload value
0498 75CBA9     230            mov RCAP2H, #high(TIMER2_RELOAD)
049B 75CA9A     231            mov RCAP2L, #low(TIMER2_RELOAD)
049E            232            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
049E E4         233            clr a
049F F54D       234            mov Count1ms+0, a
04A1 F54E       235            mov Count1ms+1, a
04A3            236            ; Enable the timer and interrupts
04A3 D2AD       237       setb ET2  ; Enable timer 2 interrupt
04A5 D2CA       238       setb TR2  ; Enable timer 2
04A7 22         239            ret
04A8            240   
04A8            241   ;---------------------------------;
04A8            242   ; ISR for timer 2                 ;
04A8            243   ;---------------------------------;
04A8            244   Timer2_ISR:
04A8 C2CF       245            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
04AA B2B6       246            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
04AC            247            
04AC            248            ; The two registers used in the ISR must be saved in the stack
04AC C0E0       249            push acc
04AE C0D0       250            push psw
04B0            251            
04B0 D281       252            setb CA1
04B2 D282       253            setb CA2
04B4 D280       254            setb CA3
04B6            255   
04B6 E557       256            mov a, state
04B8            257   state0:
04B8 B4000B     258            cjne a, #0, state1
04BB E554       259            mov a, disp1
04BD 120508     260            lcall load_segments
04C0 C281       261            clr CA1
04C2 0557       262            inc state
04C4 8020       263            sjmp state_done
04C6            264   state1:
04C6 B4010B     265            cjne a, #1, state2
04C9 E555       266            mov a, disp2
04CB 120508     267            lcall load_segments
04CE C282       268            clr CA2
04D0 0557       269            inc state
04D2 8012       270            sjmp state_done
04D4            271   state2:
04D4 B4020C     272            cjne a, #2, state_reset
04D7 E556       273            mov a, disp3
04D9 120508     274            lcall load_segments
04DC C280       275            clr CA3
04DE 755700     276            mov state, #0
04E1 8003       277            sjmp state_done
04E3            278   state_reset:
04E3 755700     279            mov state, #0
04E6            280   state_done:
04E6            281            ; Increment the 16-bit one mili second counter
04E6 054D       282            inc Count1ms+0    ; Increment the low 8-bits first
04E8 E54D       283            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04EA 7002       284            jnz Inc_Done
04EC 054E       285            inc Count1ms+1
04EE            286   
04EE            287     Inc_Done:
04EE            288            ; Check if half second has passed
04EE E54D       289            mov a, Count1ms+0
04F0 B4F410     290            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04F3 E54E       291            mov a, Count1ms+1
04F5 B4010B     292            cjne a, #high(500), Timer2_ISR_done
04F8            293            
04F8            294       ; cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
04F8            295       ; where is halfsecondflag?                                   
04F8            296                                            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
04F8 E4         297            clr a
04F9 F54D       298            mov Count1ms+0, a
04FB F54E       299            mov Count1ms+1, a
04FD            300     
04FD E550       301            mov a, second   ; Increment the BCD counter
04FF            302   
04FF 2401       303            add a, #0x01 ;THIS IS ADDING SECONDS
0501            304   
0501            305   test2:
0501            306   ;        da a ; Decimal adjust instruction.  Check datasheet for more details!
0501 F550       307            mov second, a
0503            308            
0503            309   Timer2_ISR_done:
0503 D0D0       310            pop psw
0505 D0E0       311            pop acc
0507 32         312            reti
0508            313   
0508            314   load_segments:
0508 A2E0       315            mov c, acc.0
050A 92A4       316            mov SEGA, c
050C A2E1       317            mov c, acc.1
050E 92A5       318            mov SEGB, c
0510 A2E2       319            mov c, acc.2
0512 92A6       320            mov SEGC, c
0514 A2E3       321            mov c, acc.3
0516 92A7       322            mov SEGD, c
0518 A2E4       323            mov c, acc.4
051A 92C5       324            mov SEGE, c
051C A2E5       325            mov c, acc.5
051E 92C4       326            mov SEGF, c
0520 A2E6       327            mov c, acc.6
0522 9287       328            mov SEGG, c
0524 A2E7       329            mov c, acc.7
0526            330            ;mov SEGP, c
0526 22         331            ret  
0527            332   ;---------------------------------;
0527            333   ; initialize the slave                 ;
0527            334   ;---------------------------------;
0527            335   
0527            336   INIT_SPI:
0527 D2A2       337    setb MY_MISO ; Make MISO an input pin
0529 C2A3       338    clr MY_SCLK ; For mode (0,0) SCLK is zero
052B 22         339    ret
052C            340   
052C            341   ;---------------------------------;
052C            342   ; receive and send data                          ;
052C            343   ;---------------------------------;
052C            344   
052C            345   DO_SPI_G:
052C C0E0       346             push acc
052E 7900       347             mov R1, #0 ; Received byte stored in R1
0530 7A08       348             mov R2, #8 ; Loop counter (8-bits)
0532            349   DO_SPI_G_LOOP:
0532 E8         350             mov a, R0 ; Byte to write is in R0
0533 33         351             rlc a ; Carry flag has bit to write
0534 F8         352             mov R0, a
0535 92A1       353             mov MY_MOSI, c
0537 D2A3       354             setb MY_SCLK ; Transmit
0539 A2A2       355             mov c, MY_MISO ; Read received bit
053B E9         356             mov a, R1 ; Save received bit in R1
053C 33         357             rlc a
053D F9         358             mov R1, a
053E C2A3       359             clr MY_SCLK
0540 DAF0       360             djnz R2, DO_SPI_G_LOOP
0542 D0E0       361             pop acc
0544 22         362             ret
0545            363   
0545            364   ; Send a character using the serial port
0545            365   putchar1:
0545 3099FD     366       jnb TI, putchar1
0548 C299       367       clr TI
054A F599       368       mov SBUF, a
054C 22         369       ret
054D            370   
054D            371   ; Send a constant-zero-terminated string using the serial port
054D            372   SendString:
054D E4         373       clr A
054E 93         374       movc A, @A+DPTR
054F 6006       375       jz SendStringDone
0551 120545     376       lcall putchar1
0554 A3         377       inc DPTR
0555 80F6       378       sjmp SendString
0557            379   SendStringDone:
0557 22         380       ret
0558            381   
0558            382   Display_10_digit_BCD:
0558 C0E0       383            push acc
055A 7406       383            mov a, #6
055C 14         383            dec a
055D 1200C1     383            lcall ?Set_Cursor_1 ; Select column and row
0560 D0E0       383            pop acc
0562 C000       384            push ar0
0564 A83C       384            mov r0, bcd+4
0566 1200C6     384            lcall ?Display_BCD
0569 D000       384            pop ar0
056B C000       385            push ar0
056D A83B       385            mov r0, bcd+3
056F 1200C6     385            lcall ?Display_BCD
0572 D000       385            pop ar0
0574 C000       386            push ar0
0576 A83A       386            mov r0, bcd+2
0578 1200C6     386            lcall ?Display_BCD
057B D000       386            pop ar0
057D C000       387            push ar0
057F A839       387            mov r0, bcd+1
0581 1200C6     387            lcall ?Display_BCD
0584 D000       387            pop ar0
0586 C000       388            push ar0
0588 A838       388            mov r0, bcd+0
058A 1200C6     388            lcall ?Display_BCD
058D D000       388            pop ar0
058F 22         389            ret
0590            390            
0590            391   ;---------------------------------;
0590            392   ; initialize the serial ports     ;
0590            393   ;---------------------------------;
0590            394   InitSerialPort:
0590            395       ; Since the reset button bounces, we need to wait a bit before
0590            396       ; sending messages, otherwise we risk displaying gibberish!
0590 79DE       397       mov R1, #222
0592 78A6       398       mov R0, #166
0594 D8FE       399       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0596 D9FA       400       djnz R1, $-4 ; 22.51519us*222=4.998ms
0598            401       ; Now we can proceed with the configuration
0598 438780     402            orl     PCON,#0x80
059B 759852     403            mov     SCON,#0x52
059E 759B00     404            mov     BDRCON,#0x00
05A1 759AF4     405            mov     BRL,#BRG_VAL
05A4 759B1E     406            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
05A7 22         407       ret
05A8            408    
05A8            409   ; CODE FOR DISPLAYING 7SEG 
05A8            410     display7seg:
05A8            411                    ; ones digit disp 2
05A8 9005C3     412            mov dptr, #HEX_7SEG
05AB E538       413            mov a, bcd+0
05AD 540F       414            anl a, #0x0f
05AF 93         415            movc a, @a+dptr
05B0 F555       416            mov disp2, a
05B2            417            
05B2            418            ;tens digit disp3
05B2 E538       419            mov a, bcd+0
05B4 C4         420            swap a
05B5 540F       421            anl a, #0x0f
05B7 93         422            movc a, @a+dptr
05B8 F556       423            mov disp3, a
05BA            424            
05BA            425            ;hundreds digit disp1
05BA E4         426            clr a
05BB            427            
05BB E539       428            mov a, bcd+1
05BD            429            ;swap a
05BD 540F       430            anl a, #0x0f
05BF 93         431            movc a, @a+dptr
05C0            432            
05C0 F554       433            mov disp1, a
05C2            434            
05C2 22         435            ret
05C3            436    ;---------------------------------;
05C3            437   ; MAIN PROGRAM                                                         ;
05C3            438   ;---------------------------------;  
05C3            439   
05C3 C0F9A4B0   440   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
05CD            441   
05CD            442   MainProgram:
05CD 75817F     443            mov sp, #07FH ; Initialize the stack pointer
05D0            444            ; Configure P0 in bidirectional mode
05D0 75E600     445       mov P0M0, #0
05D3 75E700     446       mov P0M1, #0
05D6 758E11     447       mov auxr, #00010001B
05D9 D2AF       448       setb EA 
05DB 120088     449       lcall LCD_4BIT
05DE 754400     450       mov soaktemp, #0x0
05E1            451       
05E1 754500     452       mov soaktime, #0x0
05E4            453   
05E4 754600     454       mov reflowtemp, #0x0
05E7            455      
05E7 754700     456       mov reflowtime, #0x0
05EA            457   
05EA 755000     458       mov second, #0
05ED            459      
05ED            460      ; mov countererror, #0        ; to check if the thermocouple is in the oven
05ED            461                    
05ED            462       ;initial message 
05ED            463      ; Set_Cursor(1, 1)
05ED            464      ; Send_Constant_String(#Test_msg)
05ED            465      ; Set_Cursor(1,11)
05ED            466      ; WriteData(#223) ; print the degree sign   
05ED 755300     467       mov count, #0
05F0            468       
05F0 120590     469       lcall InitSerialPort
05F3 120527     470                    lcall INIT_SPI
05F6 120475     471                    lcall Timer0_Init
05F9            472     ;  lcall Timer2_Init
05F9 1207AF     473      lcall TurnOvenOff
05FC            474     ; lcall TurnOvenOn
05FC 020A75     475      ljmp Menu_select1 ;; selecting and setting profiles
05FF            476       
05FF            477   FOREVER: ;this will be how the oven is being controlled ; jump here once start button is pressed!!!
05FF            478   
05FF            479            
05FF            480   
05FF C0E0       481            push acc
0601 7401       481            mov a, #1
0603 14         481            dec a
0604 1200C1     481            lcall ?Set_Cursor_1 ; Select column and row
0607 D0E0       481            pop acc
0609 C083       482            push dph
060B C082       482            push dpl
060D C0E0       482            push acc
060F 900422     482            mov dptr, #TemperatureRise
0612 1200B4     482            lcall ?Send_Constant_String
0615 D0E0       482            pop acc
0617 D082       482            pop dpl
0619 D083       482            pop dph
061B 1207A0     483    lcall checkstop       ;checks if stop button is pressed. If so, turns off oven and goes back to menu
061E 12087D     484      lcall checkerror      ;if error, terminate program and return
0621 120795     485      lcall Readingtemperatures  ;calculates temperature of oven using thermocouple junctions
0624            486      
0624 12082F     487      lcall DisplayingLCD_wotime
0627 1205A8     488      lcall display7seg
062A            489      
062A            490       ; temp = soak temp, so going to soak time state 
062A            491    
062A C3         492     clr c
062B E544       493     mov a, soaktemp
062D 953F       494     subb a, coldtemp
062F 50CE       495     jnc FOREVER
0631 1209FF     496      lcall State_change_BEEPER
0634 1207AF     497     lcall TurnOvenOff
0637            498     
0637 C2CA       499      clr tr2                       ; restarting timer 2 to keep track of the time lasped since we reached soaktemp
0639 7400       500      mov a, #0x0
063B F550       501      mov second, a
063D D2CA       502      setb tr2
063F            503      
063F            504     ; after we reached the soak temp stay there for __ seconds
063F            505     ;-----state 2 ------;
063F            506   soaktempchecked:
063F C0E0       507            push acc
0641 7401       507            mov a, #1
0643 14         507            dec a
0644 1200C1     507            lcall ?Set_Cursor_1 ; Select column and row
0647 D0E0       507            pop acc
0649 C083       508            push dph
064B C082       508            push dpl
064D C0E0       508            push acc
064F 900411     508            mov dptr, #SoakState
0652 1200B4     508            lcall ?Send_Constant_String
0655 D0E0       508            pop acc
0657 D082       508            pop dpl
0659 D083       508            pop dph  
065B 1207A0     509            lcall checkstop         
065E 120795     510      lcall Readingtemperatures
0661 1207B5     511      lcall DisplayingLCD
0664 1205A8     512      lcall display7seg
0667            513      
0667 120718     514     lcall keepingsoaktempsame ; boundary temp
066A 120728     515     lcall keepingsoaktempsame1
066D            516     
066D 120763     517     lcall checksoaktime ; if soak time is up go to next state
0670            518    
0670 80CD       519     sjmp soaktempchecked
0672            520     
0672            521   ; ---- state 3 ---- ; increaseing to reflow temp
0672            522   increasereflowtemp: 
0672 1207A0     523     lcall checkstop
0675 C0E0       524            push acc
0677 7401       524            mov a, #1
0679 14         524            dec a
067A 1200C1     524            lcall ?Set_Cursor_1 ; Select column and row
067D D0E0       524            pop acc
067F C083       525            push dph
0681 C082       525            push dpl
0683 C0E0       525            push acc
0685 900422     525            mov dptr, #TemperatureRise
0688 1200B4     525            lcall ?Send_Constant_String
068B D0E0       525            pop acc
068D D082       525            pop dpl
068F D083       525            pop dph 
0691 120795     526     lcall Readingtemperatures
0694 12082F     527      lcall DisplayingLCD_wotime
0697 1205A8     528       lcall display7seg
069A            529     
069A C3         530     clr c
069B E546       531     mov a, reflowtemp
069D 953F       532     subb a, coldtemp
069F 50D1       533     jnc increasereflowtemp
06A1            534      
06A1 1207AF     535     lcall TurnOvenOff  
06A4            536      
06A4            537   
06A4 1209FF     538     lcall State_change_BEEPER
06A7 C2CA       539     clr tr2
06A9 7400       540     mov a, #0
06AB F550       541     mov second, a
06AD D2CA       542     setb tr2
06AF            543   
06AF            544     ;----state 4 ---;
06AF            545    reflowstate:
06AF 1207A0     546     lcall checkstop
06B2 120795     547     lcall Readingtemperatures
06B5 1207B5     548      lcall DisplayingLCD
06B8 1205A8     549       lcall display7seg
06BB C0E0       550            push acc
06BD 7401       550            mov a, #1
06BF 14         550            dec a
06C0 1200C1     550            lcall ?Set_Cursor_1 ; Select column and row
06C3 D0E0       550            pop acc
06C5 C083       551            push dph
06C7 C082       551            push dpl
06C9 C0E0       551            push acc
06CB 900400     551            mov dptr, #ReflowStateMess
06CE 1200B4     551            lcall ?Send_Constant_String
06D1 D0E0       551            pop acc
06D3 D082       551            pop dpl
06D5 D083       551            pop dph 
06D7 120742     552     lcall keepingreflowtempsame
06DA 120752     553     lcall keepingreflowtempsame1
06DD 12077C     554     lcall checkreflowtime
06E0 80CD       555     sjmp reflowstate
06E2            556     
06E2            557    ;------- state5-----;
06E2            558    cooling:
06E2 C0E0       559            push acc
06E4 7401       559            mov a, #1
06E6 14         559            dec a
06E7 1200C1     559            lcall ?Set_Cursor_1 ; Select column and row
06EA D0E0       559            pop acc
06EC C083       560            push dph
06EE C082       560            push dpl
06F0 C0E0       560            push acc
06F2 900433     560            mov dptr, #CoolingTemp
06F5 1200B4     560            lcall ?Send_Constant_String
06F8 D0E0       560            pop acc
06FA D082       560            pop dpl
06FC D083       560            pop dph 
06FE 120795     561      lcall Readingtemperatures
0701 12082F     562      lcall DisplayingLCD_wotime
0704 1205A8     563      lcall display7seg
0707            564      
0707            565      
0707 C3         566     clr c
0708 743C       567     mov a, #60
070A 953F       568     subb a, coldtemp
070C 5003       569     jnc cooled
070E 0206E2     570     ljmp cooling
0711            571     
0711            572      
0711            573      
0711            574   ;   lcall waitforcooling
0711            575     cooled: 
0711 12128D     576      lcall TonePlayer2   ;Change according to which song you want
0714            577    
0714            578    
0714 020A75     579    ljmp Menu_select1
0717            580     
0717            581   ;---------------------------------;
0717            582   ; functions                                                                                  ;
0717            583   ;---------------------------------; 
0717            584   
0717            585   waitforcooling:
0717            586   
0717            587   
0717            588     
0717            589   ;        load_X(coldtemp)
0717            590   ;  load_Y(60)
0717            591   ;  lcall x_gteq_y   ; compare if temp >= 60 
0717            592   ;  jnb mf, cooled
0717            593   ;  ljmp cooling
0717            594     
0717            595    
0717            596   ;cooled:
0717 22         597            ret
0718            598   
0718            599   ; *********** STATE 2 **********
0718            600   ; After reaching the soak temperature we stay at that temp 
0718            601   ; for 60 to 120 seconds
0718            602   
0718            603   keepingsoaktempsame:
0718 E544       604     mov a, soaktemp
071A 2401       605     add a, #1
071C F530       606     mov x, a
071E            607      
071E C3         608     clr c
071F E530       609     mov a, x
0721 953F       610     subb a, coldtemp
0723 5014       611     jnc soaktempisokay
0725 02073A     612     ljmp soaktemptoohigh
0728            613   
0728            614     ;load_Y(coldtemp)
0728            615     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0728            616    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0728            617    
0728            618    keepingsoaktempsame1:
0728            619     ; temp>= soaktemp-10
0728            620    ; load_Y(5)
0728            621    ; load_X(soaktemp)
0728            622    ; lcall sub32   
0728 E544       623     mov a, soaktemp
072A C3         624     clr c
072B 9401       625     subb a, #1
072D F530       626     mov x, a
072F            627     
072F C3         628     clr c
0730 E53F       629     mov a, coldtemp
0732 9530       630     subb a, x
0734 5003       631     jnc soaktempisokay
0736 02073E     632     ljmp soaktemptoolow
0739            633     
0739            634      
0739            635     
0739            636   soaktempisokay:
0739 22         637            ret
073A            638     
073A            639   soaktemptoohigh: 
073A 1207AF     640     lcall TurnOvenOff
073D 22         641     ret
073E            642     
073E            643   soaktemptoolow:
073E 1207B2     644            lcall TurnOvenOn
0741 22         645     ret
0742            646     
0742            647    keepingreflowtempsame:
0742 E546       648     mov a, reflowtemp
0744 2401       649     add a, #1
0746 F530       650     mov x, a
0748            651      
0748 C3         652     clr c
0749 E530       653     mov a, x
074B 953F       654     subb a, coldtemp
074D 50EA       655     jnc soaktempisokay
074F 02073A     656     ljmp soaktemptoohigh
0752            657   
0752            658     ;load_Y(coldtemp)
0752            659     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0752            660    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0752            661    
0752            662    keepingreflowtempsame1:
0752            663     ; temp>= soaktemp-10
0752            664    ; load_Y(5)
0752            665    ; load_X(soaktemp)
0752            666    ; lcall sub32   
0752 E546       667     mov a, reflowtemp
0754 C3         668     clr c
0755 9401       669     subb a, #1
0757 F530       670     mov x, a
0759            671     
0759 C3         672     clr c
075A E53F       673     mov a, coldtemp
075C 9530       674     subb a, x
075E 50D9       675     jnc soaktempisokay
0760 02073E     676     ljmp soaktemptoolow
0763            677   
0763            678   
0763            679   checksoaktime:
0763 C3         680     clr c
0764 E545       681     mov a, soaktime
0766 9550       682     subb a, second
0768 5011       683     jnc soaknotdone
076A 1207B2     684     lcall TurnOvenOn
076D C2CA       685     clr tr2
076F 7400       686     mov a, #0
0771 F550       687     mov second, a
0773 D2CA       688     setb tr2
0775 1209FF     689      lcall State_change_BEEPER
0778 020672     690     ljmp increasereflowtemp
077B            691   soaknotdone:
077B 22         692            ret 
077C            693     
077C            694   checkreflowtime:
077C C3         695     clr c
077D E547       696     mov a, reflowtime
077F 9550       697     subb a, second
0781 5011       698     jnc reflownotdone
0783 1207AF     699     lcall TurnOvenOff
0786 C2CA       700     clr tr2
0788 7400       701     mov a, #0
078A F550       702     mov second, a
078C D2CA       703     setb tr2
078E 120A19     704     lcall Open_oven_toaster_BEEPER
0791 0206E2     705     ljmp cooling
0794            706     
0794            707   reflownotdone:
0794 22         708            ret
0795            709   
0795            710   ; reading the thermocouple junction values 
0795            711   Readingtemperatures:
0795            712     ;lcall readingcoldjunction ;answer in x is saved in variable called 'coldtemp'
0795 12092C     713     lcall readinghotjunction
0798            714     
0798            715   
0798 E530       716     mov a, x
079A F53F       717     mov coldtemp, a
079C 22         718    ret
079D            719    ; mov a, x
079D            720    ; mov coldtemp, a ;final temperature is in the temperature variable
079D            721    ; ret
079D            722   
079D            723   ; checking if the temperture at the hot end is equal to soak temp yet
079D            724   
079D            725   
079D            726   Jump_to_FOREVER:
079D 0205FF     727            ljmp FOREVER
07A0            728   
07A0            729   ; checking if the temperture at the hot end is equal to reflow temp yet
07A0            730   
07A0            731   
07A0            732    ;stop the process at any time  
07A0            733   checkstop:                     ; stop the reflow process
07A0 208305     734            jb STARTBUTTON, return
07A3 3083FD     735            jnb STARTBUTTON, $
07A6 8001       736            sjmp stop
07A8            737   return:
07A8 22         738     ret
07A9            739   stop:
07A9 1207AF     740            lcall TurnOvenOff
07AC 020A75     741       ljmp menu_select1
07AF            742   
07AF            743     
07AF            744   ;---------------------------------- ;
07AF            745   ; SSR Box communicating with the           ;
07AF            746   ; Microcontroller                                                                        ;
07AF            747   ;(1) uses OvenButton to communicate ; 
07AF            748     ;with the transistor to turn the       ;
07AF            749     ;oven or off                                                                                   ;
07AF            750   ;(2)                                                                                                                             ;
07AF            751   ;                                                                                                                                                ;
07AF            752   ;                                                                                                                                                ;
07AF            753   ;-----------------------------------;
07AF            754            
07AF            755   TurnOvenOff:
07AF C290       756            clr OvenButton  
07B1 22         757     ret
07B2            758   TurnOvenOn:
07B2 D290       759            setb OvenButton
07B4 22         760     ret
07B5            761   
07B5            762   DisplayingLCD:
07B5            763      
07B5 855030     764            mov x, second
07B8 12011F     765            lcall hex2bcd
07BB C0E0       766            push acc
07BD 7401       766            mov a, #1
07BF 14         766            dec a
07C0 1200BF     766            lcall ?Set_Cursor_2 ; Select column and row
07C3 D0E0       766            pop acc
07C5            766   
07C5 C000       767            push ar0
07C7 A839       767            mov r0, bcd+1
07C9 1200C6     767            lcall ?Display_BCD
07CC D000       767            pop ar0
07CE C0E0       768            push acc
07D0 7403       768            mov a, #3
07D2 14         768            dec a
07D3 1200BF     768            lcall ?Set_Cursor_2 ; Select column and row
07D6 D0E0       768            pop acc
07D8 C000       769            push ar0
07DA A838       769            mov r0, bcd
07DC 1200C6     769            lcall ?Display_BCD
07DF D000       769            pop ar0
07E1            770            
07E1            771            
07E1 853F30     772            mov x, coldtemp         
07E4 12011F     773            lcall hex2bcd   
07E7 C0E0       774            push acc
07E9 740A       774            mov a, #10
07EB 14         774            dec a
07EC 1200BF     774            lcall ?Set_Cursor_2 ; Select column and row
07EF D0E0       774            pop acc
07F1 C000       775            push ar0
07F3 A839       775            mov r0, bcd+1
07F5 1200C6     775            lcall ?Display_BCD
07F8 D000       775            pop ar0
07FA C0E0       776            push acc
07FC 740C       776            mov a, #12
07FE 14         776            dec a
07FF 1200BF     776            lcall ?Set_Cursor_2 ; Select column and row
0802 D0E0       776            pop acc
0804 C000       777            push ar0
0806 A838       777            mov r0, bcd
0808 1200C6     777            lcall ?Display_BCD
080B D000       777            pop ar0
080D            778       
080D 1209C6     779       lcall display_temp_putty
0810            780                            
0810 C0E0       781            push acc
0812 740F       781            mov a, #15
0814 14         781            dec a
0815 1200BF     781            lcall ?Set_Cursor_2 ; Select column and row
0818 D0E0       781            pop acc
081A 74DF       782            mov a, #0xDF
081C 12007E     782            lcall ?WriteData
081F C0E0       783            push acc
0821 7410       783            mov a, #16
0823 14         783            dec a
0824 1200BF     783            lcall ?Set_Cursor_2 ; Select column and row
0827 D0E0       783            pop acc
0829 7443       784            mov a, #'C'
082B 12007E     784            lcall ?WriteData
082E            785       
082E 22         786       ret
082F            787       
082F            788       
082F            789   DisplayingLCD_wotime:
082F            790            
082F 853F30     791            mov x, coldtemp         
0832 12011F     792            lcall hex2bcd   
0835 C0E0       793            push acc
0837 740A       793            mov a, #10
0839 14         793            dec a
083A 1200BF     793            lcall ?Set_Cursor_2 ; Select column and row
083D D0E0       793            pop acc
083F C000       794            push ar0
0841 A839       794            mov r0, bcd+1
0843 1200C6     794            lcall ?Display_BCD
0846 D000       794            pop ar0
0848 C0E0       795            push acc
084A 740C       795            mov a, #12
084C 14         795            dec a
084D 1200BF     795            lcall ?Set_Cursor_2 ; Select column and row
0850 D0E0       795            pop acc
0852 C000       796            push ar0
0854 A838       796            mov r0, bcd
0856 1200C6     796            lcall ?Display_BCD
0859 D000       796            pop ar0
085B            797       
085B 1209C6     798       lcall display_temp_putty
085E            799                            
085E C0E0       800            push acc
0860 740F       800            mov a, #15
0862 14         800            dec a
0863 1200BF     800            lcall ?Set_Cursor_2 ; Select column and row
0866 D0E0       800            pop acc
0868 74DF       801            mov a, #0xDF
086A 12007E     801            lcall ?WriteData
086D C0E0       802            push acc
086F 7410       802            mov a, #16
0871 14         802            dec a
0872 1200BF     802            lcall ?Set_Cursor_2 ; Select column and row
0875 D0E0       802            pop acc
0877 7443       803            mov a, #'C'
0879 12007E     803            lcall ?WriteData
087C            804       
087C 22         805       ret
087D            806   
087D            807   
087D            808   ;As a safety measure, the reflow process must be aborted if the oven doesn’t reach at least 50oC in the first 60 seconds of operation
087D            809   checkerror: 
087D C0E0       810            push acc
087F C0D0       811     push psw
0881            812     
0881            813     
0881 C3         814     clr c
0882 7460       815     mov a, #0x60
0884 9550       816     subb a, second
0886 500E       817     jnc noerror
0888            818   
0888            819     
0888 7432       820     mov a, #50
088A 953F       821     subb a, coldtemp
088C 5002       822     jnc error
088E 8006       823     sjmp noerror
0890            824     error:
0890 1207AF     825     lcall TurnOvenOff
0893 020A75     826     ljmp Menu_Select1
0896            827     
0896            828   
0896            829   noerror:
0896 D0D0       830     pop psw
0898 D0E0       831     pop acc 
089A 22         832     ret
089B            833            
089B            834   ;------------------------------;
089B            835   ; Temperature Reader From Sam     ;
089B            836   ;------------------------------;
089B            837            
089B            838   readingcoldjunction: ;read the cold junction from the adc
089B            839   ;reading the adc
089B C0E0       840            push acc
089D C0D0       841       push psw
089F            842     
089F C2A0       843            clr CE_ADC 
08A1 7801       844            mov R0, #00000001B ; Start bit:1 
08A3 12052C     845            lcall DO_SPI_G
08A6 7880       846            mov R0, #10000000B ; Single ended, read channel 0 
08A8 12052C     847            lcall DO_SPI_G 
08AB E9         848            mov a, R1          ; R1 contains bits 8 and 9 
08AC 5403       849            anl a, #00000011B  ; We need only the two least significant bits 
08AE F53E       850            mov Result+1, a    ; Save result high.
08B0 7855       851            mov R0, #55H ; It doesn't matter what we transmit... 
08B2 12052C     852            lcall DO_SPI_G 
08B5 893D       853            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
08B7 D2A0       854            setb CE_ADC 
08B9            855            ;wait for 1 second 
08B9 C002       856            push AR2
08BB 7AFA       856            mov R2, #250
08BD 120039     856            lcall ?Wait_Milli_Seconds
08C0 D002       856            pop AR2
08C2 C002       857            push AR2
08C4 7AFA       857            mov R2, #250
08C6 120039     857            lcall ?Wait_Milli_Seconds
08C9 D002       857            pop AR2
08CB            858     
08CB 1208D7     859            lcall Calculate_Temp_in_C 
08CE E530       860       mov a, x
08D0 F53F       861       mov coldtemp, a
08D2            862     
08D2 D0D0       863              pop psw
08D4 D0E0       864              pop acc
08D6 22         865              ret   
08D7            866               
08D7            867   
08D7            868   ;Trying to transfer the binary value in ADC into BCD and then into 
08D7            869   ;ASCII to show in putty
08D7            870   Calculate_Temp_in_C:     
08D7 E4         871            clr a 
08D8 753000     872            mov x+0, #low (0 % 0x10000) 
08DB 753100     872            mov x+1, #high(0 % 0x10000) 
08DE 753200     872            mov x+2, #low (0 / 0x10000) 
08E1 753300     872            mov x+3, #high(0 / 0x10000)     ; 
08E4 753400     873            mov y+0, #low (0 % 0x10000) 
08E7 753500     873            mov y+1, #high(0 % 0x10000) 
08EA 753600     873            mov y+2, #low (0 / 0x10000) 
08ED 753700     873            mov y+3, #high(0 / 0x10000) 
08F0            874            ; load the result into X 
08F0 E53D       875            mov a, Result+0
08F2 F530       876            mov X, a
08F4 E53E       877            mov a, Result+1
08F6 F531       878            mov X+1, a
08F8 75349A     879            mov y+0, #low (410 % 0x10000) 
08FB 753501     879            mov y+1, #high(410 % 0x10000) 
08FE 753600     879            mov y+2, #low (410 / 0x10000) 
0901 753700     879            mov y+3, #high(410 / 0x10000) 
0904 120299     880            lcall mul32;
0907 7534FF     881            mov y+0, #low (1023 % 0x10000) 
090A 753503     881            mov y+1, #high(1023 % 0x10000) 
090D 753600     881            mov y+2, #low (1023 / 0x10000) 
0910 753700     881            mov y+3, #high(1023 / 0x10000) 
0913 120326     882            lcall div32;  
0916            883            ;calculte temperature 
0916 753411     884            mov y+0, #low (273 % 0x10000) 
0919 753501     884            mov y+1, #high(273 % 0x10000) 
091C 753600     884            mov y+2, #low (273 / 0x10000) 
091F 753700     884            mov y+3, #high(273 / 0x10000) 
0922 853052     885            mov temp, X
0925 120205     886            lcall sub32
0928 12011F     887            lcall hex2bcd ; converts binary in x to BCD in BCD
092B            888            ;Set_Cursor(2, 13)
092B            889            ;Display_BCD(bcd)
092B            890   ;        lcall Display_Temp_Putty
092B 22         891            ret
092C            892   
092C            893   readinghotjunction: ;read the hot junction from the adc from oven and thermocouple wires
092C            894   ;reading the adc
092C C0E0       895            push acc
092E C0D0       896     push psw
0930            897     
0930 C2A0       898            clr CE_ADC 
0932 7801       899            mov R0, #00000001B ; Start bit:1 
0934 12052C     900            lcall DO_SPI_G
0937 7890       901            mov R0, #10010000B ; Single ended, read channel 1 
0939 12052C     902            lcall DO_SPI_G 
093C E9         903            mov a, R1          ; R1 contains bits 8 and 9 
093D 5403       904            anl a, #00000011B  ; We need only the two least significant bits 
093F F53E       905            mov Result+1, a    ; Save result high.
0941 7855       906            mov R0, #55H ; It doesn't matter what we transmit... 
0943 12052C     907            lcall DO_SPI_G 
0946 893D       908            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
0948 D2A0       909            setb CE_ADC 
094A            910            ;wait for 1 second 
094A C002       911            push AR2
094C 7AFA       911            mov R2, #250
094E 120039     911            lcall ?Wait_Milli_Seconds
0951 D002       911            pop AR2
0953 C002       912            push AR2
0955 7AFA       912            mov R2, #250
0957 120039     912            lcall ?Wait_Milli_Seconds
095A D002       912            pop AR2
095C            913            
095C 753000     914            mov x+0, #low (0 % 0x10000) 
095F 753100     914            mov x+1, #high(0 % 0x10000) 
0962 753200     914            mov x+2, #low (0 / 0x10000) 
0965 753300     914            mov x+3, #high(0 / 0x10000) 
0968            915   
0968 E53D       916            mov a,Result
096A F530       917            mov x,a
096C E53E       918            mov a,Result+1
096E F531       919            mov x+1,a
0970            920            
0970 12011F     921            lcall hex2bcd
0973            922                            
0973            923     
0973 12097F     924            lcall Calculate_hot 
0976 E530       925       mov a, x
0978 F540       926       mov hottemp, a
097A            927     
097A D0D0       928              pop psw
097C D0E0       929              pop acc
097E 22         930              ret   
097F            931   
097F            932   Calculate_hot:
097F C0E0       933   push acc
0981 C0D0       934            push psw
0983            935            ; Vout calculations
0983 853D30     936            mov x, Result
0986 853E31     937            mov x+1, Result+1
0989 753200     938            mov x+2, #0
098C 753300     939            mov x+3, #0
098F            940            
098F 75341D     941            mov y+0, #low (29 % 0x10000) 
0992 753500     941            mov y+1, #high(29 % 0x10000) 
0995 753600     941            mov y+2, #low (29 / 0x10000) 
0998 753700     941            mov y+3, #high(29 / 0x10000) 
099B 120299     942            lcall mul32
099E 753466     943            mov y+0, #low (2150 % 0x10000) 
09A1 753508     943            mov y+1, #high(2150 % 0x10000) 
09A4 753600     943            mov y+2, #low (2150 / 0x10000) 
09A7 753700     943            mov y+3, #high(2150 / 0x10000) 
09AA 1201E4     944            lcall add32
09AD 753464     945            mov y+0, #low (100 % 0x10000) 
09B0 753500     945            mov y+1, #high(100 % 0x10000) 
09B3 753600     945            mov y+2, #low (100 / 0x10000) 
09B6 753700     945            mov y+3, #high(100 / 0x10000) 
09B9 120326     946            lcall div32
09BC            947       
09BC 12011F     948            lcall hex2bcd
09BF E530       949            mov a, x
09C1 D0D0       950                    pop psw 
09C3 D0E0       951            pop acc
09C5 22         952            ret
09C6            953                    
09C6            954   ; Display Temperature in Putty!
09C6            955   Display_Temp_Putty:
09C6 C000       956            push ar0
09C8 A839       956            mov r0, bcd+1
09CA 1200E4     956            lcall ?Send_BCD
09CD D000       956            pop ar0
09CF C000       957            push ar0
09D1 A838       957            mov r0, bcd
09D3 1200E4     957            lcall ?Send_BCD
09D6 D000       957            pop ar0
09D8 740D       958            mov a, #'\r'
09DA 120545     959            lcall putchar1
09DD 740A       960            mov a, #'\n'
09DF 120545     961            lcall putchar1
09E2 22         962            ret     
09E3            963   ;beeper function to indicate reflow process has started
09E3            964   Reflow_start_BEEPER:
09E3 1211D1     965    lcall ToneReset
09E6 D28C       966    setb tr0
09E8 B28C       967    cpl tr0
09EA C002       968            push AR2
09EC 7AFA       968            mov R2, #250
09EE 120039     968            lcall ?Wait_Milli_Seconds
09F1 D002       968            pop AR2
09F3 C002       969            push AR2
09F5 7AFA       969            mov R2, #250
09F7 120039     969            lcall ?Wait_Milli_Seconds
09FA D002       969            pop AR2
09FC C28C       970    clr tr0
09FE 22         971    ret
09FF            972    
09FF            973   State_change_BEEPER:
09FF 1211D1     974    lcall ToneReset
0A02 D28C       975    setb tr0
0A04 C002       976            push AR2
0A06 7AFA       976            mov R2, #250
0A08 120039     976            lcall ?Wait_Milli_Seconds
0A0B D002       976            pop AR2
0A0D C002       977            push AR2
0A0F 7AFA       977            mov R2, #250
0A11 120039     977            lcall ?Wait_Milli_Seconds
0A14 D002       977            pop AR2
0A16 C28C       978    clr tr0
0A18 22         979    ret
0A19            980    
0A19            981   Open_oven_toaster_BEEPER:
0A19 1211D1     982     lcall ToneReset
0A1C D28C       983    setb tr0
0A1E C002       984            push AR2
0A20 7AFA       984            mov R2, #250
0A22 120039     984            lcall ?Wait_Milli_Seconds
0A25 D002       984            pop AR2
0A27 C002       985            push AR2
0A29 7AFA       985            mov R2, #250
0A2B 120039     985            lcall ?Wait_Milli_Seconds
0A2E D002       985            pop AR2
0A30 C002       986            push AR2
0A32 7AFA       986            mov R2, #250
0A34 120039     986            lcall ?Wait_Milli_Seconds
0A37 D002       986            pop AR2
0A39 C002       987            push AR2
0A3B 7AFA       987            mov R2, #250
0A3D 120039     987            lcall ?Wait_Milli_Seconds
0A40 D002       987            pop AR2
0A42 C002       988            push AR2
0A44 7AFA       988            mov R2, #250
0A46 120039     988            lcall ?Wait_Milli_Seconds
0A49 D002       988            pop AR2
0A4B C002       989            push AR2
0A4D 7AFA       989            mov R2, #250
0A4F 120039     989            lcall ?Wait_Milli_Seconds
0A52 D002       989            pop AR2
0A54            990   
0A54            991   
0A54 C28C       992    clr tr0
0A56 22         993    ret
0A57            994   ; Display Temperature in LCD
0A57            995   Display_Temp_LCD:
0A57            996   ; show temp in Celcius 
0A57 C0E0       997            push acc
0A59 7406       997            mov a, #6
0A5B 14         997            dec a
0A5C 1200C1     997            lcall ?Set_Cursor_1 ; Select column and row
0A5F D0E0       997            pop acc;
0A61 C000       998            push ar0
0A63 A839       998            mov r0, bcd+1
0A65 1200C6     998            lcall ?Display_BCD
0A68 D000       998            pop ar0
0A6A C0E0       999            push acc
0A6C 7409       999            mov a, #9
0A6E 14         999            dec a
0A6F 1200C1     999            lcall ?Set_Cursor_1 ; Select column and row
0A72 D0E0       999            pop acc;  
0A74 22        1000            ret
0A75           1001            
0A75           1002   ; MENU SELECT;   
0A75           1003            
0A75           1004            
0A75           1005   Menu_select1:  
0A75 7401      1006            mov a, #0x01
0A77 120083    1006            lcall ?WriteCommand
0A7A C002      1007            push AR2
0A7C 7A32      1007            mov R2, #50
0A7E 120039    1007            lcall ?Wait_Milli_Seconds
0A81 D002      1007            pop AR2
0A83           1008   Menu_select2:
0A83 C0E0      1009            push acc
0A85 7401      1009            mov a, #1
0A87 14        1009            dec a
0A88 1200C1    1009            lcall ?Set_Cursor_1 ; Select column and row
0A8B D0E0      1009            pop acc
0A8D C083      1010            push dph
0A8F C082      1010            push dpl
0A91 C0E0      1010            push acc
0A93 90039C    1010            mov dptr, #MenuMessage1
0A96 1200B4    1010            lcall ?Send_Constant_String
0A99 D0E0      1010            pop acc
0A9B D082      1010            pop dpl
0A9D D083      1010            pop dph
0A9F C0E0      1011            push acc
0AA1 7401      1011            mov a, #1
0AA3 14        1011            dec a
0AA4 1200BF    1011            lcall ?Set_Cursor_2 ; Select column and row
0AA7 D0E0      1011            pop acc
0AA9 C083      1012            push dph
0AAB C082      1012            push dpl
0AAD C0E0      1012            push acc
0AAF 9003A8    1012            mov dptr, #MenuMessage2
0AB2 1200B4    1012            lcall ?Send_Constant_String
0AB5 D0E0      1012            pop acc
0AB7 D082      1012            pop dpl
0AB9 D083      1012            pop dph
0ABB           1013     
0ABB C002      1014            push AR2
0ABD 7A32      1014            mov R2, #50
0ABF 120039    1014            lcall ?Wait_Milli_Seconds
0AC2 D002      1014            pop AR2 ;go to set Soak Temperature
0AC4 208406    1015     jb BUTTON_1, Menu_select2_2
0AC7 3084FD    1016     jnb BUTTON_1, $
0ACA 020B29    1017     ljmp Jump_to_Set_SoakTemp1
0ACD           1018     
0ACD           1019   Menu_select2_2:
0ACD C002      1020            push AR2
0ACF 7A32      1020            mov R2, #50
0AD1 120039    1020            lcall ?Wait_Milli_Seconds
0AD4 D002      1020            pop AR2 ;go to set Soak Time
0AD6 208506    1021     jb BUTTON_2, Menu_select2_3
0AD9 3085FD    1022     jnb BUTTON_2, $
0ADC 020B2C    1023     ljmp Jump_to_Set_SoakTime1
0ADF           1024     
0ADF           1025   Menu_select2_3:
0ADF C002      1026            push AR2
0AE1 7A32      1026            mov R2, #50
0AE3 120039    1026            lcall ?Wait_Milli_Seconds
0AE6 D002      1026            pop AR2 ;go to second set of menus
0AE8 208606    1027     jb BUTTON_3, Menu_select2_4
0AEB 3086FD    1028     jnb BUTTON_3, $
0AEE 020B32    1029     ljmp Jump_to_Menu_select3
0AF1           1030     
0AF1           1031   Menu_select2_4:
0AF1 C002      1032            push AR2
0AF3 7A32      1032            mov R2, #50
0AF5 120039    1032            lcall ?Wait_Milli_Seconds
0AF8 D002      1032            pop AR2   ; start the reflow process
0AFA 208332    1033     jb StartButton, Jump_to_Menu_select2_1
0AFD 3083FD    1034     jnb StartButton, $
0B00 020B03    1035     ljmp Jump_To_FOREVER1
0B03           1036     
0B03           1037   Jump_To_FOREVER1:
0B03 7401      1038            mov a, #0x01
0B05 120083    1038            lcall ?WriteCommand
0B08 C002      1039            push AR2
0B0A 7A32      1039            mov R2, #50
0B0C 120039    1039            lcall ?Wait_Milli_Seconds
0B0F D002      1039            pop AR2
0B11 1207B2    1040     lcall TurnOvenOn
0B14 12048F    1041     lcall Timer2_init
0B17           1042            
0B17 755000    1043            mov second, #0
0B1A 12128D    1044    lcall TonePlayer2
0B1D C002      1045            push AR2
0B1F 7A32      1045            mov R2, #50
0B21 120039    1045            lcall ?Wait_Milli_Seconds
0B24 D002      1045            pop AR2
0B26 0205FF    1046            ljmp FOREVER
0B29           1047   
0B29           1048   Jump_to_Set_SoakTemp1:
0B29 020B35    1049            ljmp Set_SoakTemp1
0B2C           1050     
0B2C           1051   Jump_to_Set_SoakTime1:
0B2C 020C39    1052            ljmp Set_SoakTime1
0B2F           1053            
0B2F           1054   Jump_to_Menu_select2_1:
0B2F 020A83    1055            ljmp Menu_select2
0B32           1056     
0B32           1057   Jump_to_Menu_select3:
0B32 020D3D    1058            ljmp Menu_select3
0B35           1059   
0B35           1060   ; Settings - Soak Temperature
0B35           1061   Set_SoakTemp1:
0B35 7401      1062            mov a, #0x01
0B37 120083    1062            lcall ?WriteCommand          ;clear display
0B3A C002      1063            push AR2
0B3C 7A32      1063            mov R2, #50
0B3E 120039    1063            lcall ?Wait_Milli_Seconds
0B41 D002      1063            pop AR2
0B43 C0E0      1064            push acc
0B45 7401      1064            mov a, #1
0B47 14        1064            dec a
0B48 1200C1    1064            lcall ?Set_Cursor_1 ; Select column and row
0B4B D0E0      1064            pop acc
0B4D C083      1065            push dph
0B4F C082      1065            push dpl
0B51 C0E0      1065            push acc
0B53 9003D0    1065            mov dptr, #MenuSoakTemp
0B56 1200B4    1065            lcall ?Send_Constant_String
0B59 D0E0      1065            pop acc
0B5B D082      1065            pop dpl
0B5D D083      1065            pop dph
0B5F C0E0      1066            push acc
0B61 7401      1066            mov a, #1
0B63 14        1066            dec a
0B64 1200BF    1066            lcall ?Set_Cursor_2 ; Select column and row
0B67 D0E0      1066            pop acc
0B69 854430    1067     mov x, soaktemp
0B6C 12011F    1068     lcall hex2bcd
0B6F C000      1069            push ar0
0B71 A839      1069            mov r0, bcd+1
0B73 1200C6    1069            lcall ?Display_BCD
0B76 D000      1069            pop ar0
0B78 C0E0      1070            push acc
0B7A 7403      1070            mov a, #3
0B7C 14        1070            dec a
0B7D 1200BF    1070            lcall ?Set_Cursor_2 ; Select column and row
0B80 D0E0      1070            pop acc
0B82 C000      1071            push ar0
0B84 A838      1071            mov r0, bcd+0
0B86 1200C6    1071            lcall ?Display_BCD
0B89 D000      1071            pop ar0
0B8B           1072   Set_SoakTemp2:
0B8B 20840F    1073     jb BUTTON_1, Set_SoakTemp2_2
0B8E C002      1074            push AR2
0B90 7A32      1074            mov R2, #50
0B92 120039    1074            lcall ?Wait_Milli_Seconds
0B95 D002      1074            pop AR2
0B97 208403    1075     jb BUTTON_1, Set_SoakTemp2_2
0B9A 020BC4    1076     ljmp SoakTemp_inc
0B9D           1077   Set_SoakTemp2_2:
0B9D 20850F    1078     jb BUTTON_2, Set_SoakTemp2_3
0BA0 C002      1079            push AR2
0BA2 7A32      1079            mov R2, #50
0BA4 120039    1079            lcall ?Wait_Milli_Seconds
0BA7 D002      1079            pop AR2
0BA9 208503    1080     jb BUTTON_2, Set_SoakTemp2_3
0BAC 020BE8    1081     ljmp SoakTemp_dec
0BAF           1082   Set_SoakTemp2_3:
0BAF 20860F    1083            jb BUTTON_3, Set_SoakTemp2_4
0BB2 C002      1084            push AR2
0BB4 7A32      1084            mov R2, #50
0BB6 120039    1084            lcall ?Wait_Milli_Seconds
0BB9 D002      1084            pop AR2
0BBB 208603    1085     jb BUTTON_3, Set_SoakTemp2_4
0BBE 020A75    1086     ljmp Menu_select1
0BC1           1087   Set_SoakTemp2_4:
0BC1 020B8B    1088     ljmp Set_SoakTemp2
0BC4           1089     
0BC4           1090   soaktemp_inc:
0BC4 854430    1091    mov x, soaktemp
0BC7 753100    1092    mov x+1, #0
0BCA 753200    1093    mov x+2, #0
0BCD 753300    1094    mov x+3, #0
0BD0 753401    1095            mov y+0, #low (1 % 0x10000) 
0BD3 753500    1095            mov y+1, #high(1 % 0x10000) 
0BD6 753600    1095            mov y+2, #low (1 / 0x10000) 
0BD9 753700    1095            mov y+3, #high(1 / 0x10000) 
0BDC 1201E4    1096    lcall add32
0BDF 853044    1097    mov soaktemp, x
0BE2 120C0C    1098    lcall display_soak_temp 
0BE5 020B8B    1099    ljmp Set_SoakTemp2
0BE8           1100    
0BE8           1101   soaktemp_dec: 
0BE8 854430    1102    mov x, soaktemp
0BEB 753100    1103    mov x+1, #0
0BEE 753200    1104    mov x+2, #0
0BF1 753300    1105    mov x+3, #0
0BF4 753401    1106            mov y+0, #low (1 % 0x10000) 
0BF7 753500    1106            mov y+1, #high(1 % 0x10000) 
0BFA 753600    1106            mov y+2, #low (1 / 0x10000) 
0BFD 753700    1106            mov y+3, #high(1 / 0x10000) 
0C00 120205    1107    lcall sub32
0C03 853044    1108    mov soaktemp, x
0C06 120C0C    1109    lcall display_soak_temp 
0C09 020B8B    1110    ljmp Set_SoakTemp2
0C0C           1111     
0C0C           1112   display_soak_temp: 
0C0C 854430    1113    mov x, soaktemp
0C0F 12011F    1114    lcall hex2bcd
0C12 C0E0      1115            push acc
0C14 7401      1115            mov a, #1
0C16 14        1115            dec a
0C17 1200BF    1115            lcall ?Set_Cursor_2 ; Select column and row
0C1A D0E0      1115            pop acc
0C1C C000      1116            push ar0
0C1E A839      1116            mov r0, bcd+1
0C20 1200C6    1116            lcall ?Display_BCD
0C23 D000      1116            pop ar0
0C25 C0E0      1117            push acc
0C27 7403      1117            mov a, #3
0C29 14        1117            dec a
0C2A 1200BF    1117            lcall ?Set_Cursor_2 ; Select column and row
0C2D D0E0      1117            pop acc
0C2F C000      1118            push ar0
0C31 A838      1118            mov r0, bcd+0
0C33 1200C6    1118            lcall ?Display_BCD
0C36 D000      1118            pop ar0
0C38 22        1119   ret   
0C39           1120   
0C39           1121   ; Settings - Soak Time
0C39           1122   Set_SoakTime1:
0C39 7401      1123            mov a, #0x01
0C3B 120083    1123            lcall ?WriteCommand          ;clear display
0C3E C002      1124            push AR2
0C40 7A32      1124            mov R2, #50
0C42 120039    1124            lcall ?Wait_Milli_Seconds
0C45 D002      1124            pop AR2
0C47 C0E0      1125            push acc
0C49 7401      1125            mov a, #1
0C4B 14        1125            dec a
0C4C 1200C1    1125            lcall ?Set_Cursor_1 ; Select column and row
0C4F D0E0      1125            pop acc
0C51 C083      1126            push dph
0C53 C082      1126            push dpl
0C55 C0E0      1126            push acc
0C57 9003DB    1126            mov dptr, #MenuSoakTime
0C5A 1200B4    1126            lcall ?Send_Constant_String
0C5D D0E0      1126            pop acc
0C5F D082      1126            pop dpl
0C61 D083      1126            pop dph
0C63 C0E0      1127            push acc
0C65 7401      1127            mov a, #1
0C67 14        1127            dec a
0C68 1200BF    1127            lcall ?Set_Cursor_2 ; Select column and row
0C6B D0E0      1127            pop acc
0C6D 854530    1128     mov x, soaktime
0C70 12011F    1129     lcall hex2bcd
0C73 C000      1130            push ar0
0C75 A839      1130            mov r0, bcd+1
0C77 1200C6    1130            lcall ?Display_BCD
0C7A D000      1130            pop ar0
0C7C C0E0      1131            push acc
0C7E 7403      1131            mov a, #3
0C80 14        1131            dec a
0C81 1200BF    1131            lcall ?Set_Cursor_2 ; Select column and row
0C84 D0E0      1131            pop acc
0C86 C000      1132            push ar0
0C88 A838      1132            mov r0, bcd+0
0C8A 1200C6    1132            lcall ?Display_BCD
0C8D D000      1132            pop ar0
0C8F           1133   Set_SoakTime2:
0C8F 20840F    1134     jb BUTTON_1, Set_SoakTime2_2
0C92 C002      1135            push AR2
0C94 7A32      1135            mov R2, #50
0C96 120039    1135            lcall ?Wait_Milli_Seconds
0C99 D002      1135            pop AR2
0C9B 208403    1136     jb BUTTON_1, Set_SoakTime2_2
0C9E 020CC8    1137     ljmp SoakTime_inc
0CA1           1138   Set_SoakTime2_2:
0CA1 20850F    1139     jb BUTTON_2, Set_SoakTime2_3
0CA4 C002      1140            push AR2
0CA6 7A32      1140            mov R2, #50
0CA8 120039    1140            lcall ?Wait_Milli_Seconds
0CAB D002      1140            pop AR2
0CAD 208503    1141     jb BUTTON_2, Set_SoakTime2_3
0CB0 020CEC    1142     ljmp SoakTime_dec
0CB3           1143   Set_SoakTime2_3:
0CB3 20860F    1144            jb BUTTON_3, Set_SoakTime2_4
0CB6 C002      1145            push AR2
0CB8 7A32      1145            mov R2, #50
0CBA 120039    1145            lcall ?Wait_Milli_Seconds
0CBD D002      1145            pop AR2
0CBF 208603    1146     jb BUTTON_3, Set_SoakTime2_4
0CC2 020A75    1147     ljmp Menu_select1
0CC5           1148   Set_SoakTime2_4:
0CC5 020C8F    1149     ljmp Set_SoakTime2
0CC8           1150   
0CC8           1151   soaktime_inc:
0CC8 854530    1152    mov x, soaktime
0CCB 753100    1153    mov x+1, #0
0CCE 753200    1154    mov x+2, #0
0CD1 753300    1155    mov x+3, #0
0CD4 753401    1156            mov y+0, #low (1 % 0x10000) 
0CD7 753500    1156            mov y+1, #high(1 % 0x10000) 
0CDA 753600    1156            mov y+2, #low (1 / 0x10000) 
0CDD 753700    1156            mov y+3, #high(1 / 0x10000) 
0CE0 1201E4    1157    lcall add32
0CE3 853045    1158    mov soaktime, x
0CE6 120D10    1159    lcall display_soak_time
0CE9 020C8F    1160    ljmp Set_SoakTime2
0CEC           1161    
0CEC           1162   soaktime_dec: 
0CEC 854530    1163    mov x, soaktime
0CEF 753100    1164    mov x+1, #0
0CF2 753200    1165    mov x+2, #0
0CF5 753300    1166    mov x+3, #0
0CF8 753401    1167            mov y+0, #low (1 % 0x10000) 
0CFB 753500    1167            mov y+1, #high(1 % 0x10000) 
0CFE 753600    1167            mov y+2, #low (1 / 0x10000) 
0D01 753700    1167            mov y+3, #high(1 / 0x10000) 
0D04 120205    1168    lcall sub32
0D07 853045    1169    mov soaktime, x
0D0A 120D10    1170    lcall display_soak_time
0D0D 020C8F    1171    ljmp Set_SoakTime2
0D10           1172     
0D10           1173   display_soak_time: 
0D10 854530    1174    mov x, soaktime
0D13 12011F    1175    lcall hex2bcd
0D16 C0E0      1176            push acc
0D18 7401      1176            mov a, #1
0D1A 14        1176            dec a
0D1B 1200BF    1176            lcall ?Set_Cursor_2 ; Select column and row
0D1E D0E0      1176            pop acc
0D20 C000      1177            push ar0
0D22 A839      1177            mov r0, bcd+1
0D24 1200C6    1177            lcall ?Display_BCD
0D27 D000      1177            pop ar0
0D29 C0E0      1178            push acc
0D2B 7403      1178            mov a, #3
0D2D 14        1178            dec a
0D2E 1200BF    1178            lcall ?Set_Cursor_2 ; Select column and row
0D31 D0E0      1178            pop acc
0D33 C000      1179            push ar0
0D35 A838      1179            mov r0, bcd+0
0D37 1200C6    1179            lcall ?Display_BCD
0D3A D000      1179            pop ar0
0D3C 22        1180   ret   
0D3D           1181   
0D3D           1182   
0D3D           1183   ; Second set of Menu - Set reflow parameters
0D3D           1184   Menu_select3:
0D3D 7401      1185            mov a, #0x01
0D3F 120083    1185            lcall ?WriteCommand
0D42 C002      1186            push AR2
0D44 7A32      1186            mov R2, #50
0D46 120039    1186            lcall ?Wait_Milli_Seconds
0D49 D002      1186            pop AR2
0D4B           1187   Menu_select4:
0D4B C0E0      1188            push acc
0D4D 7401      1188            mov a, #1
0D4F 14        1188            dec a
0D50 1200C1    1188            lcall ?Set_Cursor_1 ; Select column and row
0D53 D0E0      1188            pop acc
0D55 C083      1189            push dph
0D57 C082      1189            push dpl
0D59 C0E0      1189            push acc
0D5B 9003B4    1189            mov dptr, #MenuMessage3
0D5E 1200B4    1189            lcall ?Send_Constant_String
0D61 D0E0      1189            pop acc
0D63 D082      1189            pop dpl
0D65 D083      1189            pop dph
0D67 C0E0      1190            push acc
0D69 7401      1190            mov a, #1
0D6B 14        1190            dec a
0D6C 1200BF    1190            lcall ?Set_Cursor_2 ; Select column and row
0D6F D0E0      1190            pop acc
0D71 C083      1191            push dph
0D73 C082      1191            push dpl
0D75 C0E0      1191            push acc
0D77 9003C2    1191            mov dptr, #MenuMessage4
0D7A 1200B4    1191            lcall ?Send_Constant_String
0D7D D0E0      1191            pop acc
0D7F D082      1191            pop dpl
0D81 D083      1191            pop dph
0D83           1192     
0D83 C002      1193            push AR2
0D85 7A32      1193            mov R2, #50
0D87 120039    1193            lcall ?Wait_Milli_Seconds
0D8A D002      1193            pop AR2 ;go to set Reflow Temperature
0D8C 208406    1194     jb BUTTON_1, Menu_select4_2
0D8F 3084FD    1195     jnb BUTTON_1, $
0D92 020DCE    1196     ljmp Jump_to_Set_ReflowTemp1
0D95           1197     
0D95           1198   Menu_select4_2:
0D95 C002      1199            push AR2
0D97 7A32      1199            mov R2, #50
0D99 120039    1199            lcall ?Wait_Milli_Seconds
0D9C D002      1199            pop AR2 ;go to set Reflow Time
0D9E 208506    1200     jb BUTTON_2, Menu_select4_3
0DA1 3085FD    1201     jnb BUTTON_2, $
0DA4 020DD1    1202     ljmp Jump_to_Set_ReflowTime1
0DA7           1203     
0DA7           1204   Menu_select4_3:
0DA7 C002      1205            push AR2
0DA9 7A32      1205            mov R2, #50
0DAB 120039    1205            lcall ?Wait_Milli_Seconds
0DAE D002      1205            pop AR2 ;go to first set of menus
0DB0 208606    1206     jb BUTTON_3, Menu_select4_4
0DB3 3086FD    1207     jnb BUTTON_3, $
0DB6 020DD7    1208     ljmp Jump_to_Menu_select2
0DB9           1209   
0DB9           1210   Menu_select4_4:
0DB9 C002      1211            push AR2
0DBB 7A32      1211            mov R2, #50
0DBD 120039    1211            lcall ?Wait_Milli_Seconds
0DC0 D002      1211            pop AR2   ; start the reflow process
0DC2 20830F    1212     jb StartButton, Jump_to_Menu_select3_1
0DC5 3083FD    1213     jnb StartButton, $
0DC8 020B03    1214     ljmp Jump_To_FOREVER1
0DCB           1215   
0DCB           1216   Jump_To_FOREVER2:
0DCB 0205FF    1217            ljmp FOREVER
0DCE           1218     
0DCE           1219   
0DCE           1220   Jump_to_Set_ReflowTemp1:
0DCE 020DDA    1221            ljmp Set_ReflowTemp1
0DD1           1222     
0DD1           1223   Jump_to_Set_ReflowTime1:
0DD1 020EE7    1224            ljmp Set_ReflowTime1
0DD4           1225            
0DD4           1226   Jump_to_Menu_select3_1:
0DD4 020D4B    1227            ljmp Menu_select4
0DD7           1228     
0DD7           1229   Jump_to_Menu_select2:
0DD7 020A75    1230            ljmp Menu_select1
0DDA           1231     
0DDA           1232   ; Settings - Reflow Temperature
0DDA           1233   Set_ReflowTemp1:
0DDA 7401      1234            mov a, #0x01
0DDC 120083    1234            lcall ?WriteCommand          ;clear display
0DDF C002      1235            push AR2
0DE1 7A32      1235            mov R2, #50
0DE3 120039    1235            lcall ?Wait_Milli_Seconds
0DE6 D002      1235            pop AR2
0DE8 C0E0      1236            push acc
0DEA 7401      1236            mov a, #1
0DEC 14        1236            dec a
0DED 1200C1    1236            lcall ?Set_Cursor_1 ; Select column and row
0DF0 D0E0      1236            pop acc
0DF2 C083      1237            push dph
0DF4 C082      1237            push dpl
0DF6 C0E0      1237            push acc
0DF8 9003E6    1237            mov dptr, #MenuReflowTemp
0DFB 1200B4    1237            lcall ?Send_Constant_String
0DFE D0E0      1237            pop acc
0E00 D082      1237            pop dpl
0E02 D083      1237            pop dph
0E04 C0E0      1238            push acc
0E06 7401      1238            mov a, #1
0E08 14        1238            dec a
0E09 1200BF    1238            lcall ?Set_Cursor_2 ; Select column and row
0E0C D0E0      1238            pop acc
0E0E 854630    1239     mov x, reflowtemp
0E11 12011F    1240     lcall hex2bcd
0E14 C000      1241            push ar0
0E16 A839      1241            mov r0, bcd+1
0E18 1200C6    1241            lcall ?Display_BCD
0E1B D000      1241            pop ar0
0E1D C0E0      1242            push acc
0E1F 7403      1242            mov a, #3
0E21 14        1242            dec a
0E22 1200BF    1242            lcall ?Set_Cursor_2 ; Select column and row
0E25 D0E0      1242            pop acc
0E27 C000      1243            push ar0
0E29 A838      1243            mov r0, bcd+0
0E2B 1200C6    1243            lcall ?Display_BCD
0E2E D000      1243            pop ar0
0E30           1244     
0E30           1245   Set_ReflowTemp2:
0E30 20840F    1246     jb BUTTON_1, Set_ReflowTemp2_2
0E33 C002      1247            push AR2
0E35 7A32      1247            mov R2, #50
0E37 120039    1247            lcall ?Wait_Milli_Seconds
0E3A D002      1247            pop AR2
0E3C 208403    1248     jb BUTTON_1, Set_ReflowTemp2_2
0E3F 020EC3    1249     ljmp ReflowTemp_inc
0E42           1250   Set_ReflowTemp2_2:
0E42 20850F    1251     jb BUTTON_2, Set_ReflowTemp2_3
0E45 C002      1252            push AR2
0E47 7A32      1252            mov R2, #50
0E49 120039    1252            lcall ?Wait_Milli_Seconds
0E4C D002      1252            pop AR2
0E4E 208503    1253     jb BUTTON_2, Set_ReflowTemp2_3
0E51 020E69    1254     ljmp ReflowTemp_dec
0E54           1255   Set_ReflowTemp2_3:
0E54 20860F    1256            jb BUTTON_3, Set_ReflowTemp2_4
0E57 C002      1257            push AR2
0E59 7A32      1257            mov R2, #50
0E5B 120039    1257            lcall ?Wait_Milli_Seconds
0E5E D002      1257            pop AR2
0E60 208603    1258     jb BUTTON_3, Set_ReflowTemp2_4
0E63 020D3D    1259     ljmp Menu_select3
0E66           1260   Set_ReflowTemp2_4:
0E66 020E30    1261     ljmp Set_ReflowTemp2
0E69           1262    
0E69           1263    
0E69           1264    
0E69           1265     
0E69           1266   ReflowTemp_dec:
0E69 854630    1267    mov x, reflowtemp
0E6C 753100    1268    mov x+1, #0
0E6F 753200    1269    mov x+2, #0
0E72 753300    1270    mov x+3, #0
0E75 753401    1271            mov y+0, #low (1 % 0x10000) 
0E78 753500    1271            mov y+1, #high(1 % 0x10000) 
0E7B 753600    1271            mov y+2, #low (1 / 0x10000) 
0E7E 753700    1271            mov y+3, #high(1 / 0x10000) 
0E81 120205    1272    lcall sub32
0E84 853046    1273    mov reflowtemp, x
0E87 120E8D    1274    lcall display_reflow_temp
0E8A 020E30    1275    ljmp Set_reflowtemp2
0E8D           1276     
0E8D           1277   display_reflow_temp: 
0E8D 854630    1278    mov x, reflowtemp
0E90 753100    1279    mov x+1, #0
0E93 753200    1280    mov x+2, #0
0E96 753300    1281    mov x+3, #0
0E99 12011F    1282    lcall hex2bcd
0E9C C0E0      1283            push acc
0E9E 7401      1283            mov a, #1
0EA0 14        1283            dec a
0EA1 1200BF    1283            lcall ?Set_Cursor_2 ; Select column and row
0EA4 D0E0      1283            pop acc
0EA6 C000      1284            push ar0
0EA8 A839      1284            mov r0, bcd+1
0EAA 1200C6    1284            lcall ?Display_BCD
0EAD D000      1284            pop ar0
0EAF C0E0      1285            push acc
0EB1 7403      1285            mov a, #3
0EB3 14        1285            dec a
0EB4 1200BF    1285            lcall ?Set_Cursor_2 ; Select column and row
0EB7 D0E0      1285            pop acc
0EB9 C000      1286            push ar0
0EBB A838      1286            mov r0, bcd+0
0EBD 1200C6    1286            lcall ?Display_BCD
0EC0 D000      1286            pop ar0
0EC2 22        1287   ret   
0EC3           1288    
0EC3           1289     
0EC3           1290   Reflowtemp_inc:
0EC3 854630    1291    mov x, reflowtemp
0EC6 753100    1292    mov x+1, #0
0EC9 753200    1293    mov x+2, #0
0ECC 753300    1294    mov x+3, #0
0ECF 753401    1295            mov y+0, #low (1 % 0x10000) 
0ED2 753500    1295            mov y+1, #high(1 % 0x10000) 
0ED5 753600    1295            mov y+2, #low (1 / 0x10000) 
0ED8 753700    1295            mov y+3, #high(1 / 0x10000) 
0EDB 1201E4    1296    lcall add32
0EDE 853046    1297    mov reflowtemp, x
0EE1 120E8D    1298    lcall display_reflow_temp
0EE4 020E30    1299    ljmp Set_Reflowtemp2
0EE7           1300   
0EE7           1301   ; Settings - Reflow Time
0EE7           1302   Set_ReflowTime1:
0EE7 7401      1303            mov a, #0x01
0EE9 120083    1303            lcall ?WriteCommand          ;clear display
0EEC C002      1304            push AR2
0EEE 7A32      1304            mov R2, #50
0EF0 120039    1304            lcall ?Wait_Milli_Seconds
0EF3 D002      1304            pop AR2
0EF5 C0E0      1305            push acc
0EF7 7401      1305            mov a, #1
0EF9 14        1305            dec a
0EFA 1200C1    1305            lcall ?Set_Cursor_1 ; Select column and row
0EFD D0E0      1305            pop acc
0EFF C083      1306            push dph
0F01 C082      1306            push dpl
0F03 C0E0      1306            push acc
0F05 9003F3    1306            mov dptr, #MenuReflowTime
0F08 1200B4    1306            lcall ?Send_Constant_String
0F0B D0E0      1306            pop acc
0F0D D082      1306            pop dpl
0F0F D083      1306            pop dph
0F11 C0E0      1307            push acc
0F13 7401      1307            mov a, #1
0F15 14        1307            dec a
0F16 1200BF    1307            lcall ?Set_Cursor_2 ; Select column and row
0F19 D0E0      1307            pop acc
0F1B 854730    1308     mov x, reflowtime
0F1E 12011F    1309     lcall hex2bcd
0F21 C000      1310            push ar0
0F23 A839      1310            mov r0, bcd+1
0F25 1200C6    1310            lcall ?Display_BCD
0F28 D000      1310            pop ar0
0F2A C0E0      1311            push acc
0F2C 7403      1311            mov a, #3
0F2E 14        1311            dec a
0F2F 1200BF    1311            lcall ?Set_Cursor_2 ; Select column and row
0F32 D0E0      1311            pop acc
0F34 C000      1312            push ar0
0F36 A838      1312            mov r0, bcd+0
0F38 1200C6    1312            lcall ?Display_BCD
0F3B D000      1312            pop ar0
0F3D           1313   Set_ReflowTime2:
0F3D 20840F    1314     jb BUTTON_1, Set_ReflowTime2_2
0F40 C002      1315            push AR2
0F42 7A32      1315            mov R2, #50
0F44 120039    1315            lcall ?Wait_Milli_Seconds
0F47 D002      1315            pop AR2
0F49 208403    1316     jb BUTTON_1, Set_ReflowTime2_2
0F4C 020F76    1317     ljmp ReflowTime_inc
0F4F           1318   Set_ReflowTime2_2:
0F4F 20850F    1319     jb BUTTON_2, Set_ReflowTime2_3
0F52 C002      1320            push AR2
0F54 7A32      1320            mov R2, #50
0F56 120039    1320            lcall ?Wait_Milli_Seconds
0F59 D002      1320            pop AR2
0F5B 208503    1321     jb BUTTON_2, Set_ReflowTime2_3
0F5E 020FD0    1322     ljmp ReflowTime_dec
0F61           1323   Set_ReflowTime2_3:
0F61 20860F    1324            jb BUTTON_3, Set_ReflowTime2_4
0F64 C002      1325            push AR2
0F66 7A32      1325            mov R2, #50
0F68 120039    1325            lcall ?Wait_Milli_Seconds
0F6B D002      1325            pop AR2
0F6D 208603    1326     jb BUTTON_3, Set_ReflowTime2_4
0F70 020D3D    1327     ljmp Menu_select3
0F73           1328   Set_ReflowTime2_4:
0F73 020F3D    1329     ljmp Set_ReflowTime2
0F76           1330   
0F76           1331   ReflowTime_inc:
0F76 854730    1332    mov x, reflowtime
0F79 753100    1333    mov x+1, #0
0F7C 753200    1334    mov x+2, #0
0F7F 753300    1335    mov x+3, #0
0F82 753401    1336            mov y+0, #low (1 % 0x10000) 
0F85 753500    1336            mov y+1, #high(1 % 0x10000) 
0F88 753600    1336            mov y+2, #low (1 / 0x10000) 
0F8B 753700    1336            mov y+3, #high(1 / 0x10000) 
0F8E 1201E4    1337    lcall add32
0F91 853047    1338    mov reflowtime, x
0F94 120F9A    1339    lcall display_reflow_time 
0F97 020F3D    1340    ljmp Set_reflowTime2
0F9A           1341     
0F9A           1342   display_reflow_time: 
0F9A 854730    1343    mov x, reflowtime
0F9D 753100    1344    mov x+1, #0
0FA0 753200    1345    mov x+2, #0
0FA3 753300    1346    mov x+3, #0
0FA6 12011F    1347    lcall hex2bcd
0FA9 C0E0      1348            push acc
0FAB 7401      1348            mov a, #1
0FAD 14        1348            dec a
0FAE 1200BF    1348            lcall ?Set_Cursor_2 ; Select column and row
0FB1 D0E0      1348            pop acc
0FB3 C000      1349            push ar0
0FB5 A839      1349            mov r0, bcd+1
0FB7 1200C6    1349            lcall ?Display_BCD
0FBA D000      1349            pop ar0
0FBC C0E0      1350            push acc
0FBE 7403      1350            mov a, #3
0FC0 14        1350            dec a
0FC1 1200BF    1350            lcall ?Set_Cursor_2 ; Select column and row
0FC4 D0E0      1350            pop acc
0FC6 C000      1351            push ar0
0FC8 A838      1351            mov r0, bcd+0
0FCA 1200C6    1351            lcall ?Display_BCD
0FCD D000      1351            pop ar0
0FCF 22        1352   ret   
0FD0           1353    
0FD0           1354     
0FD0           1355   ReflowTime_dec:
0FD0 854730    1356    mov x, reflowtime
0FD3 753100    1357    mov x+1, #0
0FD6 753200    1358    mov x+2, #0
0FD9 753300    1359    mov x+3, #0
0FDC 753401    1360            mov y+0, #low (1 % 0x10000) 
0FDF 753500    1360            mov y+1, #high(1 % 0x10000) 
0FE2 753600    1360            mov y+2, #low (1 / 0x10000) 
0FE5 753700    1360            mov y+3, #high(1 / 0x10000) 
0FE8 120205    1361    lcall sub32
0FEB 853047    1362    mov reflowtime, x
0FEE 120F9A    1363    lcall display_reflow_time
0FF1 020F3D    1364    ljmp Set_Reflowtime2
0FF4           1365   
0FF4           1366   
0FF4           1367   ;--------------------;
0FF4           1368   ; Bonus - Song stuff ;
0FF4           1369   ;--------------------;
0FF4           1370   ;;;These aren't used in this program (for now at least)
0FF4           1371   Tone1:
0FF4 7401      1372            mov a, #0x01
0FF6 120083    1372            lcall ?WriteCommand
0FF9 C002      1373            push AR2
0FFB 7A32      1373            mov R2, #50
0FFD 120039    1373            lcall ?Wait_Milli_Seconds
1000 D002      1373            pop AR2
1002 C0E0      1374            push acc
1004 7401      1374            mov a, #1
1006 14        1374            dec a
1007 1200C1    1374            lcall ?Set_Cursor_1 ; Select column and row
100A D0E0      1374            pop acc
100C C083      1375            push dph
100E C082      1375            push dpl
1010 C0E0      1375            push acc
1012 900444    1375            mov dptr, #Tone_Message1
1015 1200B4    1375            lcall ?Send_Constant_String
1018 D0E0      1375            pop acc
101A D082      1375            pop dpl
101C D083      1375            pop dph
101E C0E0      1376            push acc
1020 7401      1376            mov a, #1
1022 14        1376            dec a
1023 1200BF    1376            lcall ?Set_Cursor_2 ; Select column and row
1026 D0E0      1376            pop acc
1028 C083      1377            push dph
102A C082      1377            push dpl
102C C0E0      1377            push acc
102E 900455    1377            mov dptr, #Tone_Message2
1031 1200B4    1377            lcall ?Send_Constant_String
1034 D0E0      1377            pop acc
1036 D082      1377            pop dpl
1038 D083      1377            pop dph
103A           1378   
103A           1379   Tone2:
103A 208406    1380            jb BUTTON_1, Tone2_2
103D 3084FD    1381            jnb BUTTON_1, $
1040 0211E4    1382            ljmp TonePlayer1
1043           1383   Tone2_2:
1043 208506    1384            jb BUTTON_2, Tone2_3
1046 3085FD    1385            jnb BUTTON_2, $
1049 02128D    1386            ljmp TonePlayer2
104C           1387   Tone2_3:
104C 2086EB    1388            jb BUTTON_3, Tone2
104F 3086FD    1389            jnb BUTTON_3, $
1052 0212F7    1390            ljmp TonePlayer3
1055           1391            
1055           1392   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1055           1393   ToneC4:
1055 C000      1394            push ar0
1057 785B      1394            mov r0, #high(C4_reload)
1059 1200FA    1394            lcall ?ToneSetH
105C D000      1394            pop ar0
105E C000      1395            push ar0
1060 781E      1395            mov r0, #low(C4_reload)
1062 1200FF    1395            lcall ?ToneSetL
1065 D000      1395            pop ar0
1067 22        1396            ret
1068           1397   
1068           1398   ToneD4:
1068 C000      1399            push ar0
106A 786D      1399            mov r0, #high(D4_reload)
106C 1200FA    1399            lcall ?ToneSetH
106F D000      1399            pop ar0
1071 C000      1400            push ar0
1073 7810      1400            mov r0, #low(D4_reload)
1075 1200FF    1400            lcall ?ToneSetL
1078 D000      1400            pop ar0
107A 22        1401            ret
107B           1402   
107B           1403   ToneE4:
107B C000      1404            push ar0
107D 787D      1404            mov r0, #high(E4_reload)
107F 1200FA    1404            lcall ?ToneSetH
1082 D000      1404            pop ar0
1084 C000      1405            push ar0
1086 7818      1405            mov r0, #low(E4_reload)
1088 1200FF    1405            lcall ?ToneSetL
108B D000      1405            pop ar0
108D 22        1406            ret
108E           1407   
108E           1408   ToneF4:
108E C000      1409            push ar0
1090 7884      1409            mov r0, #high(F4_reload)
1092 1200FA    1409            lcall ?ToneSetH
1095 D000      1409            pop ar0
1097 C000      1410            push ar0
1099 7838      1410            mov r0, #low(F4_reload)
109B 1200FF    1410            lcall ?ToneSetL
109E D000      1410            pop ar0
10A0 22        1411            ret
10A1           1412   
10A1           1413   ToneG4:
10A1 C000      1414            push ar0
10A3 7891      1414            mov r0, #high(G4_reload)
10A5 1200FA    1414            lcall ?ToneSetH
10A8 D000      1414            pop ar0
10AA C000      1415            push ar0
10AC 78CC      1415            mov r0, #low(G4_reload)
10AE 1200FF    1415            lcall ?ToneSetL
10B1 D000      1415            pop ar0
10B3 22        1416            ret
10B4           1417                    
10B4           1418   ToneA4:
10B4 C000      1419            push ar0
10B6 789D      1419            mov r0, #high(A4_reload)
10B8 1200FA    1419            lcall ?ToneSetH
10BB D000      1419            pop ar0
10BD C000      1420            push ar0
10BF 78D2      1420            mov r0, #low(A4_reload)
10C1 1200FF    1420            lcall ?ToneSetL
10C4 D000      1420            pop ar0
10C6 22        1421            ret
10C7           1422            
10C7           1423   ToneB4:
10C7 C000      1424            push ar0
10C9 78A8      1424            mov r0, #high(B4_reload)
10CB 1200FA    1424            lcall ?ToneSetH
10CE D000      1424            pop ar0
10D0 C000      1425            push ar0
10D2 788D      1425            mov r0, #low(B4_reload)
10D4 1200FF    1425            lcall ?ToneSetL
10D7 D000      1425            pop ar0
10D9 22        1426            ret
10DA           1427   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10DA           1428   ToneC5:
10DA C000      1429            push ar0
10DC 78AD      1429            mov r0, #high(C5_reload)
10DE 1200FA    1429            lcall ?ToneSetH
10E1 D000      1429            pop ar0
10E3 C000      1430            push ar0
10E5 7867      1430            mov r0, #low(C5_reload)
10E7 1200FF    1430            lcall ?ToneSetL
10EA D000      1430            pop ar0
10EC 22        1431            ret
10ED           1432   
10ED           1433   ToneD5:
10ED C000      1434            push ar0
10EF 78B6      1434            mov r0, #high(D5_reload)
10F1 1200FA    1434            lcall ?ToneSetH
10F4 D000      1434            pop ar0
10F6 C000      1435            push ar0
10F8 7868      1435            mov r0, #low(D5_reload)
10FA 1200FF    1435            lcall ?ToneSetL
10FD D000      1435            pop ar0
10FF 22        1436            ret
1100           1437            
1100           1438   ToneE5:
1100 C000      1439            push ar0
1102 78BE      1439            mov r0, #high(E5_reload)
1104 1200FA    1439            lcall ?ToneSetH
1107 D000      1439            pop ar0
1109 C000      1440            push ar0
110B 7873      1440            mov r0, #low(E5_reload)
110D 1200FF    1440            lcall ?ToneSetL
1110 D000      1440            pop ar0
1112 22        1441            ret
1113           1442            
1113           1443   ToneF5:
1113 C000      1444            push ar0
1115 78C2      1444            mov r0, #high(F5_reload)
1117 1200FA    1444            lcall ?ToneSetH
111A D000      1444            pop ar0
111C C000      1445            push ar0
111E 781C      1445            mov r0, #low(F5_reload)
1120 1200FF    1445            lcall ?ToneSetL
1123 D000      1445            pop ar0
1125 22        1446            ret
1126           1447            
1126           1448   ToneG5:
1126 C000      1449            push ar0
1128 78C8      1449            mov r0, #high(G5_reload)
112A 1200FA    1449            lcall ?ToneSetH
112D D000      1449            pop ar0
112F C000      1450            push ar0
1131 78E6      1450            mov r0, #low(G5_reload)
1133 1200FF    1450            lcall ?ToneSetL
1136 D000      1450            pop ar0
1138 22        1451            ret
1139           1452            
1139           1453   ToneA5:
1139 C000      1454            push ar0
113B 78CE      1454            mov r0, #high(A5_reload)
113D 1200FA    1454            lcall ?ToneSetH
1140 D000      1454            pop ar0
1142 C000      1455            push ar0
1144 78E9      1455            mov r0, #low(A5_reload)
1146 1200FF    1455            lcall ?ToneSetL
1149 D000      1455            pop ar0
114B 22        1456            ret
114C           1457            
114C           1458   ToneB5:
114C C000      1459            push ar0
114E 78D4      1459            mov r0, #high(B5_reload)
1150 1200FA    1459            lcall ?ToneSetH
1153 D000      1459            pop ar0
1155 C000      1460            push ar0
1157 7847      1460            mov r0, #low(B5_reload)
1159 1200FF    1460            lcall ?ToneSetL
115C D000      1460            pop ar0
115E 22        1461            ret
115F           1462   
115F           1463   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
115F           1464   ToneG4F:
115F C000      1465            push ar0
1161 788B      1465            mov r0, #high(G4F_reload)
1163 1200FA    1465            lcall ?ToneSetH
1166 D000      1465            pop ar0
1168 C000      1466            push ar0
116A 783F      1466            mov r0, #low(G4F_reload)
116C 1200FF    1466            lcall ?ToneSetL
116F D000      1466            pop ar0
1171 22        1467            ret
1172           1468            
1172           1469   ToneA4F:
1172 C000      1470            push ar0
1174 7897      1470            mov r0, #high(A4F_reload)
1176 1200FA    1470            lcall ?ToneSetH
1179 D000      1470            pop ar0
117B C000      1471            push ar0
117D 78E8      1471            mov r0, #low(A4F_reload)
117F 1200FF    1471            lcall ?ToneSetL
1182 D000      1471            pop ar0
1184 22        1472            ret
1185           1473   
1185           1474   ToneB4F:
1185 C000      1475            push ar0
1187 78A3      1475            mov r0, #high(B4F_reload)
1189 1200FA    1475            lcall ?ToneSetH
118C D000      1475            pop ar0
118E C000      1476            push ar0
1190 784C      1476            mov r0, #low(B4F_reload)
1192 1200FF    1476            lcall ?ToneSetL
1195 D000      1476            pop ar0
1197 22        1477            ret
1198           1478            
1198           1479   ToneC5S:
1198 C000      1480            push ar0
119A 78B2      1480            mov r0, #high(C5S_reload)
119C 1200FA    1480            lcall ?ToneSetH
119F D000      1480            pop ar0
11A1 C000      1481            push ar0
11A3 7806      1481            mov r0, #low(C5S_reload)
11A5 1200FF    1481            lcall ?ToneSetL
11A8 D000      1481            pop ar0
11AA 22        1482            ret
11AB           1483   
11AB           1484   ToneD5F:
11AB C000      1485            push ar0
11AD 78B2      1485            mov r0, #high(D5F_reload)
11AF 1200FA    1485            lcall ?ToneSetH
11B2 D000      1485            pop ar0
11B4 C000      1486            push ar0
11B6 7806      1486            mov r0, #low(D5F_reload)
11B8 1200FF    1486            lcall ?ToneSetL
11BB D000      1486            pop ar0
11BD 22        1487            ret
11BE           1488            
11BE           1489   ToneE5F:
11BE C000      1490            push ar0
11C0 78BA      1490            mov r0, #high(E5F_reload)
11C2 1200FA    1490            lcall ?ToneSetH
11C5 D000      1490            pop ar0
11C7 C000      1491            push ar0
11C9 788C      1491            mov r0, #low(E5F_reload)
11CB 1200FF    1491            lcall ?ToneSetL
11CE D000      1491            pop ar0
11D0 22        1492            ret
11D1           1493   
11D1           1494   ToneReset:
11D1 C000      1495            push ar0
11D3 78EA      1495            mov r0, #high(TIMER0_RELOAD)
11D5 1200FA    1495            lcall ?ToneSetH
11D8 D000      1495            pop ar0
11DA C000      1496            push ar0
11DC 78E8      1496            mov r0, #low(TIMER0_RELOAD)
11DE 1200FF    1496            lcall ?ToneSetL
11E1 D000      1496            pop ar0
11E3 22        1497            ret
11E4           1498   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11E4           1499   TonePlayer1: ;Never Gonna Give You Up
11E4 121172    1500            lcall ToneA4F              ;Nev
11E7 12136A    1501            lcall TonePlayEighthSec
11EA           1502            
11EA 121185    1503            lcall ToneB4F               ;er
11ED 12136A    1504            lcall TonePlayEighthSec
11F0           1505            
11F0 1211AB    1506            lcall ToneD5F               ;gon
11F3 12136A    1507            lcall TonePlayEighthSec
11F6           1508            
11F6 121185    1509            lcall ToneB4F                 ;na
11F9 12136A    1510            lcall TonePlayEighthSec
11FC           1511            
11FC 121113    1512            lcall ToneF5                     ;give
11FF 121398    1513            lcall TonePlayThreeEighthSec
1202           1514            
1202 121113    1515            lcall ToneF5                    ;you
1205 121398    1516            lcall TonePlayThreeEighthSec
1208           1517            
1208 1211BE    1518            lcall ToneE5F                   ;up
120B 121398    1519            lcall TonePlayThreeEighthSec   
120E           1520            
120E C002      1521            push AR2
1210 7A50      1521            mov R2, #80
1212 120039    1521            lcall ?Wait_Milli_Seconds
1215 D002      1521            pop AR2
1217           1522            
1217 121172    1523            lcall ToneA4F                ;Nev
121A 12136A    1524            lcall TonePlayEighthSec
121D           1525            
121D 121185    1526            lcall ToneB4F                 ;er
1220 12136A    1527            lcall TonePlayEighthSec
1223           1528            
1223 1210DA    1529            lcall ToneC5                   ;gon
1226 12136A    1530            lcall TonePlayEighthSec
1229           1531            
1229 121172    1532            lcall ToneA4F                  ;na
122C 12136A    1533            lcall TonePlayEighthSec
122F           1534            
122F 1211BE    1535            lcall ToneE5F                    ;let
1232 121398    1536            lcall TonePlayThreeEighthSec
1235           1537            
1235 1211BE    1538            lcall ToneE5F                   ;you
1238 121398    1539            lcall TonePlayThreeEighthSec
123B           1540            
123B 1211AB    1541            lcall ToneD5F                  ;down
123E 121398    1542            lcall TonePlayThreeEighthSec
1241           1543            
1241 C002      1544            push AR2
1243 7A50      1544            mov R2, #80
1245 120039    1544            lcall ?Wait_Milli_Seconds
1248 D002      1544            pop AR2
124A           1545                    
124A 121172    1546            lcall ToneA4F              ;Nev
124D 12136A    1547            lcall TonePlayEighthSec
1250           1548            
1250 121185    1549            lcall ToneB4F                ;er
1253 12136A    1550            lcall TonePlayEighthSec
1256           1551            
1256 1211AB    1552            lcall ToneD5F                   ;gon
1259 12136A    1553            lcall TonePlayEighthSec
125C           1554            
125C 121185    1555            lcall ToneB4F                   ;na
125F 12136A    1556            lcall TonePlayEighthSec
1262           1557   
1262 1211AB    1558            lcall ToneD5F                 ;run
1265 121381    1559            lcall TonePlayQuarterSec
1268           1560            
1268 1211BE    1561            lcall ToneE5F                  ;a
126B 121398    1562            lcall TonePlayThreeEighthSec
126E           1563            
126E 1210DA    1564            lcall ToneC5                   ;round
1271 121398    1565            lcall TonePlayThreeEighthSec
1274           1566            
1274           1567            ;lcall ToneB4F
1274           1568            ;lcall TonePlayEighthSec
1274           1569            
1274 121172    1570            lcall ToneA4F                ;and
1277 121381    1571            lcall TonePlayQuarterSec        
127A           1572            
127A 121172    1573            lcall ToneA4F                ;de
127D 12136A    1574            lcall TonePlayEighthSec
1280           1575            
1280 1211BE    1576            lcall ToneE5F                  ;sert
1283 121398    1577            lcall TonePlayThreeEighthSec
1286           1578            
1286 1211AB    1579            lcall ToneD5F             ;you
1289 121398    1580            lcall TonePlayThreeEighthSec
128C           1581            
128C 22        1582            ret
128D           1583   
128D           1584   TonePlayer2: ;Mario
128D 121100    1585            lcall ToneE5
1290 121381    1586            lcall TonePlayQuarterSec
1293           1587            
1293 121100    1588            lcall ToneE5
1296 121381    1589            lcall TonePlayQuarterSec
1299           1590            
1299 C002      1591            push AR2
129B 7A50      1591            mov R2, #80
129D 120039    1591            lcall ?Wait_Milli_Seconds
12A0 D002      1591            pop AR2
12A2           1592                    
12A2 121100    1593            lcall ToneE5
12A5 121398    1594            lcall TonePlayThreeEighthSec
12A8           1595   
12A8 C002      1596            push AR2
12AA 7A50      1596            mov R2, #80
12AC 120039    1596            lcall ?Wait_Milli_Seconds
12AF D002      1596            pop AR2
12B1           1597                    
12B1 1210DA    1598            lcall ToneC5
12B4 121381    1599            lcall TonePlayQuarterSec
12B7           1600            
12B7 121100    1601            lcall ToneE5
12BA 121381    1602            lcall TonePlayQuarterSec
12BD           1603            
12BD C002      1604            push AR2
12BF 7A50      1604            mov R2, #80
12C1 120039    1604            lcall ?Wait_Milli_Seconds
12C4 D002      1604            pop AR2
12C6           1605            
12C6 121126    1606            lcall ToneG5
12C9 121398    1607            lcall TonePlayThreeEighthSec
12CC           1608            
12CC C002      1609            push AR2
12CE 7A50      1609            mov R2, #80
12D0 120039    1609            lcall ?Wait_Milli_Seconds
12D3 D002      1609            pop AR2
12D5 C002      1610            push AR2
12D7 7A50      1610            mov R2, #80
12D9 120039    1610            lcall ?Wait_Milli_Seconds
12DC D002      1610            pop AR2
12DE C002      1611            push AR2
12E0 7A50      1611            mov R2, #80
12E2 120039    1611            lcall ?Wait_Milli_Seconds
12E5 D002      1611            pop AR2
12E7 C002      1612            push AR2
12E9 7A50      1612            mov R2, #80
12EB 120039    1612            lcall ?Wait_Milli_Seconds
12EE D002      1612            pop AR2
12F0           1613            
12F0 1210A1    1614            lcall ToneG4
12F3 1213AF    1615            lcall TonePlayHalfSec
12F6           1616            
12F6 22        1617            ret
12F7           1618   
12F7           1619   TonePlayer3: ;Star Wars
12F7 121055    1620            lcall ToneC4
12FA 1213AF    1621            lcall TonePlayHalfSec
12FD           1622            
12FD 1210A1    1623            lcall ToneG4
1300 1213AF    1624            lcall TonePlayHalfSec
1303           1625            
1303 12108E    1626            lcall ToneF4
1306 121381    1627            lcall TonePlayQuarterSec
1309           1628            
1309 12107B    1629            lcall ToneE4
130C 121398    1630            lcall TonePlayThreeEighthSec
130F           1631            
130F 121068    1632            lcall ToneD4
1312 121398    1633            lcall TonePlayThreeEighthSec
1315           1634            
1315 1210DA    1635            lcall ToneC5
1318 1213AF    1636            lcall TonePlayHalfSec
131B           1637                    
131B 1210A1    1638            lcall ToneG4
131E 121381    1639            lcall TonePlayQuarterSec
1321           1640            
1321 C002      1641            push AR2
1323 7A50      1641            mov R2, #80
1325 120039    1641            lcall ?Wait_Milli_Seconds
1328 D002      1641            pop AR2
132A           1642                    
132A 12108E    1643            lcall ToneF4
132D 121381    1644            lcall TonePlayQuarterSec
1330           1645            
1330 12107B    1646            lcall ToneE4
1333 121381    1647            lcall TonePlayQuarterSec
1336           1648            
1336 121068    1649            lcall ToneD4
1339 121381    1650            lcall TonePlayQuarterSec
133C           1651            
133C 1210DA    1652            lcall ToneC5
133F 1213AF    1653            lcall TonePlayHalfSec
1342           1654            
1342 1210A1    1655            lcall ToneG4
1345 121381    1656            lcall TonePlayQuarterSec
1348           1657            
1348 C002      1658            push AR2
134A 7A50      1658            mov R2, #80
134C 120039    1658            lcall ?Wait_Milli_Seconds
134F D002      1658            pop AR2
1351           1659                    
1351 12108E    1660            lcall ToneF4
1354 121381    1661            lcall TonePlayQuarterSec
1357           1662            
1357 12107B    1663            lcall ToneE4
135A 121381    1664            lcall TonePlayQuarterSec
135D           1665            
135D 12108E    1666            lcall ToneF4
1360 121381    1667            lcall TonePlayQuarterSec
1363           1668            
1363 121068    1669            lcall ToneD4
1366 1213AF    1670            lcall TonePlayHalfSec
1369           1671            
1369 22        1672            ret
136A           1673   
136A           1674   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
136A           1675   TonePlayEighthSec:
136A D28C      1676            setb TR0
136C C002      1677            push AR2
136E 7A01      1677            mov R2, #0x1
1370 120104    1677            lcall ?Delay_PercentSec
1373 D002      1677            pop AR2   ; 1*(1/8) = 1/8 sec
1375 C28C      1678            clr TR0
1377 C002      1679            push AR2
1379 7A50      1679            mov R2, #80
137B 120039    1679            lcall ?Wait_Milli_Seconds
137E D002      1679            pop AR2
1380 22        1680            ret
1381           1681   
1381           1682   TonePlayQuarterSec:
1381 D28C      1683            setb TR0
1383 C002      1684            push AR2
1385 7A02      1684            mov R2, #0x2
1387 120104    1684            lcall ?Delay_PercentSec
138A D002      1684            pop AR2   ; 2*(1/8) = 1/4 sec
138C C28C      1685            clr TR0
138E C002      1686            push AR2
1390 7A50      1686            mov R2, #80
1392 120039    1686            lcall ?Wait_Milli_Seconds
1395 D002      1686            pop AR2
1397 22        1687            ret
1398           1688   
1398           1689   TonePlayThreeEighthSec:
1398 D28C      1690            setb TR0
139A C002      1691            push AR2
139C 7A03      1691            mov R2, #0x3
139E 120104    1691            lcall ?Delay_PercentSec
13A1 D002      1691            pop AR2   ; 3*(1/8) = 3/8 sec
13A3 C28C      1692            clr TR0
13A5 C002      1693            push AR2
13A7 7A50      1693            mov R2, #80
13A9 120039    1693            lcall ?Wait_Milli_Seconds
13AC D002      1693            pop AR2
13AE 22        1694            ret
13AF           1695   
13AF           1696   TonePlayHalfSec:
13AF D28C      1697            setb TR0
13B1 C002      1698            push AR2
13B3 7A04      1698            mov R2, #0x4
13B5 120104    1698            lcall ?Delay_PercentSec
13B8 D002      1698            pop AR2   ; 4*(1/8) = 1/2 sec
13BA C28C      1699            clr TR0
13BC C002      1700            push AR2
13BE 7A50      1700            mov R2, #80
13C0 120039    1700            lcall ?Wait_Milli_Seconds
13C3 D002      1700            pop AR2
13C5 22        1701            ret
13C6           1702   
13C6           1703   TonePlayOneSec:
13C6 D28C      1704            setb TR0
13C8 C002      1705            push AR2
13CA 7A08      1705            mov R2, #0x8
13CC 120104    1705            lcall ?Delay_PercentSec
13CF D002      1705            pop AR2   ; 8*(1/8) = 1 sec
13D1 C28C      1706            clr TR0
13D3 C002      1707            push AR2
13D5 7A50      1707            mov R2, #80
13D7 120039    1707            lcall ?Wait_Milli_Seconds
13DA D002      1707            pop AR2
13DC 22        1708            ret
13DD           1709   
13DD           1710   TonePlayOneandHalfSec:
13DD D28C      1711            setb TR0
13DF C002      1712            push AR2
13E1 7A12      1712            mov R2, #0x12
13E3 120104    1712            lcall ?Delay_PercentSec
13E6 D002      1712            pop AR2   ; 12*(1/8) = 1.5 sec
13E8 C28C      1713            clr TR0
13EA C002      1714            push AR2
13EC 7A50      1714            mov R2, #80
13EE 120039    1714            lcall ?Wait_Milli_Seconds
13F1 D002      1714            pop AR2
13F3 22        1715            ret     
13F4           1716            
13F4           1717   
13F4           1718   EN
