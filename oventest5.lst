                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0205CD       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096       ;reference at LM4040
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   BEEPER EQU P3.7 ; placeholder pin for beeper
0003             16   
0003             17   
0003             18   SEGA equ P2.4
0003             19   SEGB equ P2.5
0003             20   SEGC equ P2.6
0003             21   SEGD equ P2.7
0003             22   SEGE equ P4.5
0003             23   SEGF equ P4.4
0003             24   SEGG equ P0.7
0003             25   CA1  equ P0.1
0003             26   CA2  equ P0.2
0003             27   CA3  equ P0.0
0003             28   
0003             29   TIMER0_RELOAD_L DATA 0xf2
0003             30   TIMER1_RELOAD_L DATA 0xf3
0003             31   TIMER0_RELOAD_H DATA 0xf4
0003             32   TIMER1_RELOAD_H DATA 0xf5
0003             33   
0003             34   TIMER0_RATE   EQU 4096             ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0003             35   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             36   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0003             37   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0003             38   
0003             39   C4                        EQU 262
0003             40   D4                EQU 294
0003             41   E4                        EQU 330
0003             42   F4                        EQU 349
0003             43   G4                        EQU 392
0003             44   A4                        EQU 440
0003             45   B4                EQU 494
0003             46   
0003             47   C5                        EQU 523
0003             48   D5                EQU 587
0003             49   E5                        EQU 659
0003             50   F5                        EQU 698
0003             51   G5                        EQU 784
0003             52   A5                        EQU 880
0003             53   B5                EQU 988
0003             54   
0003             55   G4F                       EQU 370
0003             56   A4F                       EQU 415
0003             57   B4F                       EQU 466
0003             58   C5S                       EQU 554
0003             59   D5F                       EQU 554
0003             60   E5F                       EQU 622
0003             61   
0003             62   C4_reload        EQU ((65536-(CLK/(2*C4))))
0003             63   D4_reload   EQU ((65536-(CLK/(2*D4))))
0003             64   E4_reload        EQU ((65536-(CLK/(2*E4))))
0003             65   F4_reload        EQU ((65536-(CLK/(2*F4))))
0003             66   G4_reload        EQU ((65536-(CLK/(2*G4))))
0003             67   A4_reload        EQU ((65536-(CLK/(2*A4))))
0003             68   B4_reload        EQU ((65536-(CLK/(2*B4))))
0003             69   
0003             70   C5_reload        EQU ((65536-(CLK/(2*C5))))
0003             71   D5_reload   EQU ((65536-(CLK/(2*D5))))
0003             72   E5_reload        EQU ((65536-(CLK/(2*E5))))
0003             73   F5_reload        EQU ((65536-(CLK/(2*F5))))
0003             74   G5_reload        EQU ((65536-(CLK/(2*G5))))
0003             75   A5_reload        EQU ((65536-(CLK/(2*A5))))
0003             76   B5_reload        EQU ((65536-(CLK/(2*B5))))
0003             77   
0003             78   G4F_reload       EQU ((65536-(CLK/(2*G4F))))
0003             79   A4F_reload       EQU ((65536-(CLK/(2*A4F))))
0003             80   B4F_reload       EQU ((65536-(CLK/(2*B4F))))
0003             81   C5S_reload       EQU ((65536-(CLK/(2*C5S))))
0003             82   D5F_reload       EQU ((65536-(CLK/(2*D5F))))
0003             83   E5F_reload       EQU ((65536-(CLK/(2*E5F))))
0003             84   
0003             85   
0003             86   ; buttons
0003             87   BOOT_BUTTON   equ P4.5
0003             88   
0003             89   ; External interrupt 0 vector (not used in this code)
0003             90   org 0x0003
0003 32          91            reti
0004             92   
0004             93   ; Timer/Counter 0 overflow interrupt vector
000B             94   org 0x000B
000B 02048C      95            ljmp Timer0_ISR
000E             96   
000E             97   ; External interrupt 1 vector (not used in this code)
0013             98   org 0x0013
0013 32          99            reti
0014            100   
0014            101   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            102   org 0x001B
001B 32         103            reti
001C            104   
001C            105   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            106   org 0x0023 
0023 32         107            reti
0024            108            
0024            109   ; Timer/Counter 2 overflow interrupt vector
002B            110   org 0x002B
002B 0204A8     111            ljmp Timer2_ISR
002E            112            
0030            113   dseg at 0x30
0030            114   ;future variables
0030            115   x:   ds 4
0034            116   y:   ds 4
0038            117   bcd: ds 5
003D            118   Result: ds 2
003F            119   coldtemp: ds 1
0040            120   hottemp:ds 4
0044            121   soaktemp: ds 1
0045            122   soaktime: ds 1
0046            123   reflowtemp: ds 1
0047            124   reflowtime: ds 1
0048            125   countererror: ds 1
0049            126   temperature:ds 4
004D            127   Count1ms:     ds 2 ; Used to determine when half second has passed 
004F            128   reflowparam: ds 1
0050            129   second: ds 1
0051            130   minute: ds 1
0052            131   temp: ds 1
0053            132   count: ds 1
0054            133   Disp1:  ds 1 
0055            134   Disp2:  ds 1
0056            135   Disp3:  ds 1
0057            136   state:  ds 1
0058            137   
0000            138   BSEG
0000            139   startflag: dbit 1
0001            140   errorflag: dbit 1
0002            141   mf: dbit 1
0003            142   
002E            143   CSEG
002E            144   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E            145   LCD_RS equ P1.1
002E            146   LCD_RW equ P1.2
002E            147   LCD_E  equ P1.3
002E            148   LCD_D4 equ P3.2
002E            149   LCD_D5 equ P3.3
002E            150   LCD_D6 equ P3.4
002E            151   LCD_D7 equ P3.5
002E            152   
002E            153   StartButton equ P0.3
002E            154   BUTTON_1 equ P0.4
002E            155   BUTTON_2 equ P0.5
002E            156   BUTTON_3 equ P0.6
002E            157   OvenButton equ P1.0
002E            158   
002E            159   
                161   $LIST
011F            163   
                546   $LIST
                165   $LIST
038F            167   
038F            168   
038F            169   ; constant strings  
038F 54656D70   170   Test_msg:  db 'Temp:xx.xx*C', 0
     3A78782E
     78782A43
     00
039C 312E536F   171   MenuMessage1: db '1.Soak Temp', 0   ;used when selecting parameter
     616B2054
     656D7000
03A8 322E536F   172   MenuMessage2: db '2.Soak Time', 0
     616B2054
     696D6500
03B4 332E5265   173   MenuMessage3: db '3.Reflow Temp', 0
     666C6F77
     2054656D
     7000
03C2 342E5265   174   MenuMessage4: db '4.Reflow Time', 0
     666C6F77
     2054696D
     6500
03D0 536F616B   175   MenuSoakTemp: db 'Soak Temp:', 0  ;used when changing parameter
     2054656D
     703A00
03DB 536F616B   176   MenuSoakTime: db 'Soak Time:', 0
     2054696D
     653A00
03E6 5265666C   177   MenuReflowTemp: db 'Reflow Temp:', 0
     6F772054
     656D703A
     00
03F3 5265666C   178   MenuReflowTime: db 'Reflow Time:', 0
     6F772054
     696D653A
     00
0400 5265666C   179   ReflowStateMess: db 'Reflow State    ', 0
     6F772053
     74617465
     20202020
     00
0411 536F616B   180   SoakState: db 'Soak State      ', 0
     20537461
     74652020
     20202020
     00
0422 54656D70   181   TemperatureRise: db 'Temp. Increase  ',0
     2E20496E
     63726561
     73652020
     00
0433 4F76656E   182   CoolingTemp: db 'Oven is cooling.',0
     20697320
     636F6F6C
     696E672E
     00
0444            183   
0444 31537572   184   Tone_Message1:     db '1Surprise 2Mario', 0
     70726973
     6520324D
     6172696F
     00
0455 20202033   185   Tone_Message2:     db '   3Star Wars   ', 0
     53746172
     20576172
     73202020
     00
0466            186   
0466            187   
0466 20202020   188   Blank: db '              ',0
     20202020
     20202020
     202000
0475            189   
0475            190   ;---------------------------------;
0475            191   ; Routine to initialize the ISR   ;
0475            192   ; for timer 0                     ;
0475            193   ;---------------------------------;
0475            194   
0475            195   Timer0_Init:
0475 E589       196            mov a, TMOD
0477 54F0       197            anl a, #0xf0 ; Clear the bits for timer 0
0479 4401       198            orl a, #0x01 ; Configure timer 0 as 16-timer
047B F589       199            mov TMOD, a
047D 758CEA     200            mov TH0, #high(TIMER0_RELOAD)
0480 758AE8     201            mov TL0, #low(TIMER0_RELOAD)
0483            202            ; Set autoreload value
0483 75F4EA     203            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0486 75F2E8     204            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0489            205            ; Enable the timer and interrupts
0489 D2A9       206       setb ET0  ; Enable timer 0 interrupt
048B            207       ;setb TR0  ; Start timer 0
048B 22         208            ret
048C            209   
048C            210   ;---------------------------------;
048C            211   ; ISR for timer 0.  Set to execute;
048C            212   ; every 1/4096Hz to generate a    ;
048C            213   ; 2048 Hz square wave at pin P3.7 ;
048C            214   ; Used for the state change beeps ;
048C            215   ;---------------------------------;
048C            216   
048C            217   Timer0_ISR:
048C B2B7       218            cpl BEEPER
048E 32         219            reti
048F            220     
048F            221   ;---------------------------------;
048F            222   ; Routine to initialize the ISR   ;
048F            223   ; for timer 2                     ;
048F            224   ;---------------------------------;
048F            225   Timer2_Init:
048F 75C800     226            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0492 75CDA9     227            mov TH2, #high(TIMER2_RELOAD)
0495 75CC9A     228            mov TL2, #low(TIMER2_RELOAD)
0498            229            ; Set the reload value
0498 75CBA9     230            mov RCAP2H, #high(TIMER2_RELOAD)
049B 75CA9A     231            mov RCAP2L, #low(TIMER2_RELOAD)
049E            232            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
049E E4         233            clr a
049F F54D       234            mov Count1ms+0, a
04A1 F54E       235            mov Count1ms+1, a
04A3            236            ; Enable the timer and interrupts
04A3 D2AD       237       setb ET2  ; Enable timer 2 interrupt
04A5 D2CA       238       setb TR2  ; Enable timer 2
04A7 22         239            ret
04A8            240   
04A8            241   ;---------------------------------;
04A8            242   ; ISR for timer 2                 ;
04A8            243   ;---------------------------------;
04A8            244   Timer2_ISR:
04A8 C2CF       245            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
04AA B2B6       246            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
04AC            247            
04AC            248            ; The two registers used in the ISR must be saved in the stack
04AC C0E0       249            push acc
04AE C0D0       250            push psw
04B0            251            
04B0 D281       252            setb CA1
04B2 D282       253            setb CA2
04B4 D280       254            setb CA3
04B6            255   
04B6 E557       256            mov a, state
04B8            257   state0:
04B8 B4000B     258            cjne a, #0, state1
04BB E554       259            mov a, disp1
04BD 120508     260            lcall load_segments
04C0 C281       261            clr CA1
04C2 0557       262            inc state
04C4 8020       263            sjmp state_done
04C6            264   state1:
04C6 B4010B     265            cjne a, #1, state2
04C9 E555       266            mov a, disp2
04CB 120508     267            lcall load_segments
04CE C282       268            clr CA2
04D0 0557       269            inc state
04D2 8012       270            sjmp state_done
04D4            271   state2:
04D4 B4020C     272            cjne a, #2, state_reset
04D7 E556       273            mov a, disp3
04D9 120508     274            lcall load_segments
04DC C280       275            clr CA3
04DE 755700     276            mov state, #0
04E1 8003       277            sjmp state_done
04E3            278   state_reset:
04E3 755700     279            mov state, #0
04E6            280   state_done:
04E6            281            ; Increment the 16-bit one mili second counter
04E6 054D       282            inc Count1ms+0    ; Increment the low 8-bits first
04E8 E54D       283            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04EA 7002       284            jnz Inc_Done
04EC 054E       285            inc Count1ms+1
04EE            286   
04EE            287     Inc_Done:
04EE            288            ; Check if half second has passed
04EE E54D       289            mov a, Count1ms+0
04F0 B4F410     290            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04F3 E54E       291            mov a, Count1ms+1
04F5 B4010B     292            cjne a, #high(500), Timer2_ISR_done
04F8            293            
04F8            294       ; cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
04F8            295       ; where is halfsecondflag?                                   
04F8            296                                            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
04F8 E4         297            clr a
04F9 F54D       298            mov Count1ms+0, a
04FB F54E       299            mov Count1ms+1, a
04FD            300     
04FD E550       301            mov a, second   ; Increment the BCD counter
04FF            302   
04FF 2401       303            add a, #0x01 ;THIS IS ADDING SECONDS
0501            304   
0501            305   test2:
0501            306   ;        da a ; Decimal adjust instruction.  Check datasheet for more details!
0501 F550       307            mov second, a
0503            308            
0503            309   Timer2_ISR_done:
0503 D0D0       310            pop psw
0505 D0E0       311            pop acc
0507 32         312            reti
0508            313   
0508            314   load_segments:
0508 A2E0       315            mov c, acc.0
050A 92A4       316            mov SEGA, c
050C A2E1       317            mov c, acc.1
050E 92A5       318            mov SEGB, c
0510 A2E2       319            mov c, acc.2
0512 92A6       320            mov SEGC, c
0514 A2E3       321            mov c, acc.3
0516 92A7       322            mov SEGD, c
0518 A2E4       323            mov c, acc.4
051A 92C5       324            mov SEGE, c
051C A2E5       325            mov c, acc.5
051E 92C4       326            mov SEGF, c
0520 A2E6       327            mov c, acc.6
0522 9287       328            mov SEGG, c
0524 A2E7       329            mov c, acc.7
0526            330            ;mov SEGP, c
0526 22         331            ret  
0527            332   ;---------------------------------;
0527            333   ; initialize the slave                 ;
0527            334   ;---------------------------------;
0527            335   
0527            336   INIT_SPI:
0527 D2A2       337    setb MY_MISO ; Make MISO an input pin
0529 C2A3       338    clr MY_SCLK ; For mode (0,0) SCLK is zero
052B 22         339    ret
052C            340   
052C            341   ;---------------------------------;
052C            342   ; receive and send data                          ;
052C            343   ;---------------------------------;
052C            344   
052C            345   DO_SPI_G:
052C C0E0       346             push acc
052E 7900       347             mov R1, #0 ; Received byte stored in R1
0530 7A08       348             mov R2, #8 ; Loop counter (8-bits)
0532            349   DO_SPI_G_LOOP:
0532 E8         350             mov a, R0 ; Byte to write is in R0
0533 33         351             rlc a ; Carry flag has bit to write
0534 F8         352             mov R0, a
0535 92A1       353             mov MY_MOSI, c
0537 D2A3       354             setb MY_SCLK ; Transmit
0539 A2A2       355             mov c, MY_MISO ; Read received bit
053B E9         356             mov a, R1 ; Save received bit in R1
053C 33         357             rlc a
053D F9         358             mov R1, a
053E C2A3       359             clr MY_SCLK
0540 DAF0       360             djnz R2, DO_SPI_G_LOOP
0542 D0E0       361             pop acc
0544 22         362             ret
0545            363   
0545            364   ; Send a character using the serial port
0545            365   putchar1:
0545 3099FD     366       jnb TI, putchar1
0548 C299       367       clr TI
054A F599       368       mov SBUF, a
054C 22         369       ret
054D            370   
054D            371   ; Send a constant-zero-terminated string using the serial port
054D            372   SendString:
054D E4         373       clr A
054E 93         374       movc A, @A+DPTR
054F 6006       375       jz SendStringDone
0551 120545     376       lcall putchar1
0554 A3         377       inc DPTR
0555 80F6       378       sjmp SendString
0557            379   SendStringDone:
0557 22         380       ret
0558            381   
0558            382   Display_10_digit_BCD:
0558 C0E0       383            push acc
055A 7406       383            mov a, #6
055C 14         383            dec a
055D 1200C1     383            lcall ?Set_Cursor_1 ; Select column and row
0560 D0E0       383            pop acc
0562 C000       384            push ar0
0564 A83C       384            mov r0, bcd+4
0566 1200C6     384            lcall ?Display_BCD
0569 D000       384            pop ar0
056B C000       385            push ar0
056D A83B       385            mov r0, bcd+3
056F 1200C6     385            lcall ?Display_BCD
0572 D000       385            pop ar0
0574 C000       386            push ar0
0576 A83A       386            mov r0, bcd+2
0578 1200C6     386            lcall ?Display_BCD
057B D000       386            pop ar0
057D C000       387            push ar0
057F A839       387            mov r0, bcd+1
0581 1200C6     387            lcall ?Display_BCD
0584 D000       387            pop ar0
0586 C000       388            push ar0
0588 A838       388            mov r0, bcd+0
058A 1200C6     388            lcall ?Display_BCD
058D D000       388            pop ar0
058F 22         389            ret
0590            390            
0590            391   ;---------------------------------;
0590            392   ; initialize the serial ports     ;
0590            393   ;---------------------------------;
0590            394   InitSerialPort:
0590            395       ; Since the reset button bounces, we need to wait a bit before
0590            396       ; sending messages, otherwise we risk displaying gibberish!
0590 79DE       397       mov R1, #222
0592 78A6       398       mov R0, #166
0594 D8FE       399       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0596 D9FA       400       djnz R1, $-4 ; 22.51519us*222=4.998ms
0598            401       ; Now we can proceed with the configuration
0598 438780     402            orl     PCON,#0x80
059B 759852     403            mov     SCON,#0x52
059E 759B00     404            mov     BDRCON,#0x00
05A1 759AF4     405            mov     BRL,#BRG_VAL
05A4 759B1E     406            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
05A7 22         407       ret
05A8            408    
05A8            409   ; CODE FOR DISPLAYING 7SEG 
05A8            410     display7seg:
05A8            411                    ; ones digit disp 2
05A8 9005C3     412            mov dptr, #HEX_7SEG
05AB E538       413            mov a, bcd+0
05AD 540F       414            anl a, #0x0f
05AF 93         415            movc a, @a+dptr
05B0 F555       416            mov disp2, a
05B2            417            
05B2            418            ;tens digit disp3
05B2 E538       419            mov a, bcd+0
05B4 C4         420            swap a
05B5 540F       421            anl a, #0x0f
05B7 93         422            movc a, @a+dptr
05B8 F556       423            mov disp3, a
05BA            424            
05BA            425            ;hundreds digit disp1
05BA E4         426            clr a
05BB            427            
05BB E539       428            mov a, bcd+1
05BD            429            ;swap a
05BD 540F       430            anl a, #0x0f
05BF 93         431            movc a, @a+dptr
05C0            432            
05C0 F554       433            mov disp1, a
05C2            434            
05C2 22         435            ret
05C3            436    ;---------------------------------;
05C3            437   ; MAIN PROGRAM                                                         ;
05C3            438   ;---------------------------------;  
05C3            439   
05C3 C0F9A4B0   440   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
05CD            441   
05CD            442   MainProgram:
05CD 75817F     443            mov sp, #07FH ; Initialize the stack pointer
05D0            444            ; Configure P0 in bidirectional mode
05D0 75E600     445       mov P0M0, #0
05D3 75E700     446       mov P0M1, #0
05D6 758E11     447       mov auxr, #00010001B
05D9 D2AF       448       setb EA 
05DB 120088     449       lcall LCD_4BIT
05DE 754400     450       mov soaktemp, #0x0
05E1            451       
05E1 754500     452       mov soaktime, #0x0
05E4            453   
05E4 754600     454       mov reflowtemp, #0x0
05E7            455      
05E7 754700     456       mov reflowtime, #0x0
05EA            457   
05EA 755000     458       mov second, #0
05ED            459      
05ED            460      ; mov countererror, #0        ; to check if the thermocouple is in the oven
05ED            461                    
05ED            462       ;initial message 
05ED            463      ; Set_Cursor(1, 1)
05ED            464      ; Send_Constant_String(#Test_msg)
05ED            465      ; Set_Cursor(1,11)
05ED            466      ; WriteData(#223) ; print the degree sign   
05ED 755300     467       mov count, #0
05F0            468       
05F0 120590     469       lcall InitSerialPort
05F3 120527     470                    lcall INIT_SPI
05F6 120475     471                    lcall Timer0_Init
05F9            472     ;  lcall Timer2_Init
05F9 1207EA     473      lcall TurnOvenOff
05FC            474     ; lcall TurnOvenOn
05FC 020ACC     475      ljmp Menu_select1 ;; selecting and setting profiles
05FF            476       
05FF            477   FOREVER: ;this will be how the oven is being controlled ; jump here once start button is pressed!!!
05FF            478   
05FF            479            
05FF            480   
05FF C0E0       481            push acc
0601 7401       481            mov a, #1
0603 14         481            dec a
0604 1200C1     481            lcall ?Set_Cursor_1 ; Select column and row
0607 D0E0       481            pop acc
0609 C083       482            push dph
060B C082       482            push dpl
060D C0E0       482            push acc
060F 900422     482            mov dptr, #TemperatureRise
0612 1200B4     482            lcall ?Send_Constant_String
0615 D0E0       482            pop acc
0617 D082       482            pop dpl
0619 D083       482            pop dph
061B 1207DB     483    lcall checkstop       ;checks if stop button is pressed. If so, turns off oven and goes back to menu
061E 1208D4     484      lcall checkerror      ;if error, terminate program and return
0621 1207D0     485      lcall Readingtemperatures  ;calculates temperature of oven using thermocouple junctions
0624            486      
0624 12086A     487      lcall DisplayingLCD_wotime
0627 1205A8     488      lcall display7seg
062A            489      
062A            490       ; temp = soak temp, so going to soak time state 
062A            491    
062A C3         492     clr c
062B E544       493     mov a, soaktemp
062D 953F       494     subb a, coldtemp
062F 50CE       495     jnc FOREVER
0631 120A56     496      lcall State_change_BEEPER
0634 1207EA     497     lcall TurnOvenOff
0637            498     
0637 C2CA       499      clr tr2                       ; restarting timer 2 to keep track of the time lasped since we reached soaktemp
0639 7400       500      mov a, #0x0
063B F550       501      mov second, a
063D D2CA       502      setb tr2
063F            503      
063F            504     ; after we reached the soak temp stay there for __ seconds
063F            505     ;-----state 2 ------;
063F            506   soaktempchecked:
063F C0E0       507            push acc
0641 7401       507            mov a, #1
0643 14         507            dec a
0644 1200C1     507            lcall ?Set_Cursor_1 ; Select column and row
0647 D0E0       507            pop acc
0649 C083       508            push dph
064B C082       508            push dpl
064D C0E0       508            push acc
064F 900411     508            mov dptr, #SoakState
0652 1200B4     508            lcall ?Send_Constant_String
0655 D0E0       508            pop acc
0657 D082       508            pop dpl
0659 D083       508            pop dph  
065B 1207DB     509            lcall checkstop         
065E 1207D0     510      lcall Readingtemperatures
0661 1207F0     511      lcall DisplayingLCD
0664 1205A8     512      lcall display7seg
0667            513      
0667 120753     514     lcall keepingsoaktempsame ; boundary temp
066A 120763     515     lcall keepingsoaktempsame1
066D            516     
066D 12079E     517     lcall checksoaktime ; if soak time is up go to next state
0670            518    
0670 80CD       519     sjmp soaktempchecked
0672            520     
0672            521   ; ---- state 3 ---- ; increaseing to reflow temp
0672            522   increasereflowtemp: 
0672 1207DB     523     lcall checkstop
0675 C0E0       524            push acc
0677 7401       524            mov a, #1
0679 14         524            dec a
067A 1200C1     524            lcall ?Set_Cursor_1 ; Select column and row
067D D0E0       524            pop acc
067F C083       525            push dph
0681 C082       525            push dpl
0683 C0E0       525            push acc
0685 900422     525            mov dptr, #TemperatureRise
0688 1200B4     525            lcall ?Send_Constant_String
068B D0E0       525            pop acc
068D D082       525            pop dpl
068F D083       525            pop dph 
0691 1207D0     526     lcall Readingtemperatures
0694 12086A     527      lcall DisplayingLCD_wotime
0697 1205A8     528       lcall display7seg
069A            529     
069A C3         530     clr c
069B E546       531     mov a, reflowtemp
069D 953F       532     subb a, coldtemp
069F 50D1       533     jnc increasereflowtemp
06A1            534      
06A1 1207EA     535     lcall TurnOvenOff  
06A4            536      
06A4            537   
06A4 120A56     538     lcall State_change_BEEPER
06A7 C2CA       539     clr tr2
06A9 7400       540     mov a, #0
06AB F550       541     mov second, a
06AD D2CA       542     setb tr2
06AF            543   
06AF            544     ;----state 4 ---;
06AF            545    reflowstate:
06AF 1207DB     546     lcall checkstop
06B2 1207D0     547     lcall Readingtemperatures
06B5 1207F0     548      lcall DisplayingLCD
06B8 1205A8     549       lcall display7seg
06BB C0E0       550            push acc
06BD 7401       550            mov a, #1
06BF 14         550            dec a
06C0 1200C1     550            lcall ?Set_Cursor_1 ; Select column and row
06C3 D0E0       550            pop acc
06C5 C083       551            push dph
06C7 C082       551            push dpl
06C9 C0E0       551            push acc
06CB 900400     551            mov dptr, #ReflowStateMess
06CE 1200B4     551            lcall ?Send_Constant_String
06D1 D0E0       551            pop acc
06D3 D082       551            pop dpl
06D5 D083       551            pop dph 
06D7 12077D     552     lcall keepingreflowtempsame
06DA 12078D     553     lcall keepingreflowtempsame1
06DD 1207B7     554     lcall checkreflowtime
06E0 80CD       555     sjmp reflowstate
06E2            556     
06E2            557    ;------- state5-----;
06E2            558    cooling:
06E2 C0E0       559            push acc
06E4 7401       559            mov a, #1
06E6 14         559            dec a
06E7 1200C1     559            lcall ?Set_Cursor_1 ; Select column and row
06EA D0E0       559            pop acc
06EC C083       560            push dph
06EE C082       560            push dpl
06F0 C0E0       560            push acc
06F2 900433     560            mov dptr, #CoolingTemp
06F5 1200B4     560            lcall ?Send_Constant_String
06F8 D0E0       560            pop acc
06FA D082       560            pop dpl
06FC D083       560            pop dph 
06FE 1207D0     561      lcall Readingtemperatures
0701            562     ; lcall DisplayingLCD_wotime
0701 1205A8     563      lcall display7seg
0704 C083       564            push dph
0706 C082       564            push dpl
0708 C0E0       564            push acc
070A 900466     564            mov dptr, #blank
070D 1200B4     564            lcall ?Send_Constant_String
0710 D0E0       564            pop acc
0712 D082       564            pop dpl
0714 D083       564            pop dph
0716 853F30     565            mov x, coldtemp         
0719 12011F     566            lcall hex2bcd   
071C C0E0       567            push acc
071E 740A       567            mov a, #10
0720 14         567            dec a
0721 1200BF     567            lcall ?Set_Cursor_2 ; Select column and row
0724 D0E0       567            pop acc
0726 C000       568            push ar0
0728 A839       568            mov r0, bcd+1
072A 1200C6     568            lcall ?Display_BCD
072D D000       568            pop ar0
072F C0E0       569            push acc
0731 740C       569            mov a, #12
0733 14         569            dec a
0734 1200BF     569            lcall ?Set_Cursor_2 ; Select column and row
0737 D0E0       569            pop acc
0739 C000       570            push ar0
073B A838       570            mov r0, bcd
073D 1200C6     570            lcall ?Display_BCD
0740 D000       570            pop ar0
0742            571       
0742            572      
0742 C3         573     clr c
0743 743C       574     mov a, #60
0745 953F       575     subb a, coldtemp
0747 5003       576     jnc cooled
0749 0206E2     577     ljmp cooling
074C            578     
074C            579      
074C            580      
074C            581   ;   lcall waitforcooling
074C            582     cooled: 
074C 1212E4     583      lcall TonePlayer2   ;Change according to which song you want
074F            584    
074F            585    
074F 020ACC     586    ljmp Menu_select1
0752            587     
0752            588   ;---------------------------------;
0752            589   ; functions                                                                                  ;
0752            590   ;---------------------------------; 
0752            591   
0752            592   waitforcooling:
0752            593   
0752            594   
0752            595     
0752            596   ;        load_X(coldtemp)
0752            597   ;  load_Y(60)
0752            598   ;  lcall x_gteq_y   ; compare if temp >= 60 
0752            599   ;  jnb mf, cooled
0752            600   ;  ljmp cooling
0752            601     
0752            602    
0752            603   ;cooled:
0752 22         604            ret
0753            605   
0753            606   ; *********** STATE 2 **********
0753            607   ; After reaching the soak temperature we stay at that temp 
0753            608   ; for 60 to 120 seconds
0753            609   
0753            610   keepingsoaktempsame:
0753 E544       611     mov a, soaktemp
0755 2401       612     add a, #1
0757 F530       613     mov x, a
0759            614      
0759 C3         615     clr c
075A E530       616     mov a, x
075C 953F       617     subb a, coldtemp
075E 5014       618     jnc soaktempisokay
0760 020775     619     ljmp soaktemptoohigh
0763            620   
0763            621     ;load_Y(coldtemp)
0763            622     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0763            623    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0763            624    
0763            625    keepingsoaktempsame1:
0763            626     ; temp>= soaktemp-10
0763            627    ; load_Y(5)
0763            628    ; load_X(soaktemp)
0763            629    ; lcall sub32   
0763 E544       630     mov a, soaktemp
0765 C3         631     clr c
0766 9401       632     subb a, #1
0768 F530       633     mov x, a
076A            634     
076A C3         635     clr c
076B E53F       636     mov a, coldtemp
076D 9530       637     subb a, x
076F 5003       638     jnc soaktempisokay
0771 020779     639     ljmp soaktemptoolow
0774            640     
0774            641      
0774            642     
0774            643   soaktempisokay:
0774 22         644            ret
0775            645     
0775            646   soaktemptoohigh: 
0775 1207EA     647     lcall TurnOvenOff
0778 22         648     ret
0779            649     
0779            650   soaktemptoolow:
0779 1207ED     651            lcall TurnOvenOn
077C 22         652     ret
077D            653     
077D            654    keepingreflowtempsame:
077D E546       655     mov a, reflowtemp
077F 2401       656     add a, #1
0781 F530       657     mov x, a
0783            658      
0783 C3         659     clr c
0784 E530       660     mov a, x
0786 953F       661     subb a, coldtemp
0788 50EA       662     jnc soaktempisokay
078A 020775     663     ljmp soaktemptoohigh
078D            664   
078D            665     ;load_Y(coldtemp)
078D            666     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
078D            667    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
078D            668    
078D            669    keepingreflowtempsame1:
078D            670     ; temp>= soaktemp-10
078D            671    ; load_Y(5)
078D            672    ; load_X(soaktemp)
078D            673    ; lcall sub32   
078D E546       674     mov a, reflowtemp
078F C3         675     clr c
0790 9401       676     subb a, #1
0792 F530       677     mov x, a
0794            678     
0794 C3         679     clr c
0795 E53F       680     mov a, coldtemp
0797 9530       681     subb a, x
0799 50D9       682     jnc soaktempisokay
079B 020779     683     ljmp soaktemptoolow
079E            684   
079E            685   
079E            686   checksoaktime:
079E C3         687     clr c
079F E545       688     mov a, soaktime
07A1 9550       689     subb a, second
07A3 5011       690     jnc soaknotdone
07A5 1207ED     691     lcall TurnOvenOn
07A8 C2CA       692     clr tr2
07AA 7400       693     mov a, #0
07AC F550       694     mov second, a
07AE D2CA       695     setb tr2
07B0 120A56     696      lcall State_change_BEEPER
07B3 020672     697     ljmp increasereflowtemp
07B6            698   soaknotdone:
07B6 22         699            ret 
07B7            700     
07B7            701   checkreflowtime:
07B7 C3         702     clr c
07B8 E547       703     mov a, reflowtime
07BA 9550       704     subb a, second
07BC 5011       705     jnc reflownotdone
07BE 1207EA     706     lcall TurnOvenOff
07C1 C2CA       707     clr tr2
07C3 7400       708     mov a, #0
07C5 F550       709     mov second, a
07C7 D2CA       710     setb tr2
07C9 120A70     711     lcall Open_oven_toaster_BEEPER
07CC 0206E2     712     ljmp cooling
07CF            713     
07CF            714   reflownotdone:
07CF 22         715            ret
07D0            716   
07D0            717   ; reading the thermocouple junction values 
07D0            718   Readingtemperatures:
07D0            719     ;lcall readingcoldjunction ;answer in x is saved in variable called 'coldtemp'
07D0 120983     720     lcall readinghotjunction
07D3            721     
07D3            722   
07D3 E530       723     mov a, x
07D5 F53F       724     mov coldtemp, a
07D7 22         725    ret
07D8            726    ; mov a, x
07D8            727    ; mov coldtemp, a ;final temperature is in the temperature variable
07D8            728    ; ret
07D8            729   
07D8            730   ; checking if the temperture at the hot end is equal to soak temp yet
07D8            731   
07D8            732   
07D8            733   Jump_to_FOREVER:
07D8 0205FF     734            ljmp FOREVER
07DB            735   
07DB            736   ; checking if the temperture at the hot end is equal to reflow temp yet
07DB            737   
07DB            738   
07DB            739    ;stop the process at any time  
07DB            740   checkstop:                     ; stop the reflow process
07DB 208305     741            jb STARTBUTTON, return
07DE 3083FD     742            jnb STARTBUTTON, $
07E1 8001       743            sjmp stop
07E3            744   return:
07E3 22         745     ret
07E4            746   stop:
07E4 1207EA     747            lcall TurnOvenOff
07E7 020ACC     748       ljmp menu_select1
07EA            749   
07EA            750     
07EA            751   ;---------------------------------- ;
07EA            752   ; SSR Box communicating with the           ;
07EA            753   ; Microcontroller                                                                        ;
07EA            754   ;(1) uses OvenButton to communicate ; 
07EA            755     ;with the transistor to turn the       ;
07EA            756     ;oven or off                                                                                   ;
07EA            757   ;(2)                                                                                                                             ;
07EA            758   ;                                                                                                                                                ;
07EA            759   ;                                                                                                                                                ;
07EA            760   ;-----------------------------------;
07EA            761            
07EA            762   TurnOvenOff:
07EA C290       763            clr OvenButton  
07EC 22         764     ret
07ED            765   TurnOvenOn:
07ED D290       766            setb OvenButton
07EF 22         767     ret
07F0            768   
07F0            769   DisplayingLCD:
07F0            770      
07F0 855030     771            mov x, second
07F3 12011F     772            lcall hex2bcd
07F6 C0E0       773            push acc
07F8 7401       773            mov a, #1
07FA 14         773            dec a
07FB 1200BF     773            lcall ?Set_Cursor_2 ; Select column and row
07FE D0E0       773            pop acc
0800 C000       774            push ar0
0802 A839       774            mov r0, bcd+1
0804 1200C6     774            lcall ?Display_BCD
0807 D000       774            pop ar0
0809 C0E0       775            push acc
080B 7403       775            mov a, #3
080D 14         775            dec a
080E 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
0811 D0E0       775            pop acc
0813 C000       776            push ar0
0815 A838       776            mov r0, bcd
0817 1200C6     776            lcall ?Display_BCD
081A D000       776            pop ar0
081C            777            
081C            778            
081C 853F30     779            mov x, coldtemp         
081F 12011F     780            lcall hex2bcd   
0822 C0E0       781            push acc
0824 740A       781            mov a, #10
0826 14         781            dec a
0827 1200BF     781            lcall ?Set_Cursor_2 ; Select column and row
082A D0E0       781            pop acc
082C C000       782            push ar0
082E A839       782            mov r0, bcd+1
0830 1200C6     782            lcall ?Display_BCD
0833 D000       782            pop ar0
0835 C0E0       783            push acc
0837 740C       783            mov a, #12
0839 14         783            dec a
083A 1200BF     783            lcall ?Set_Cursor_2 ; Select column and row
083D D0E0       783            pop acc
083F C000       784            push ar0
0841 A838       784            mov r0, bcd
0843 1200C6     784            lcall ?Display_BCD
0846 D000       784            pop ar0
0848            785       
0848 120A1D     786       lcall display_temp_putty
084B            787                            
084B C0E0       788            push acc
084D 740F       788            mov a, #15
084F 14         788            dec a
0850 1200BF     788            lcall ?Set_Cursor_2 ; Select column and row
0853 D0E0       788            pop acc
0855 74DF       789            mov a, #0xDF
0857 12007E     789            lcall ?WriteData
085A C0E0       790            push acc
085C 7410       790            mov a, #16
085E 14         790            dec a
085F 1200BF     790            lcall ?Set_Cursor_2 ; Select column and row
0862 D0E0       790            pop acc
0864 7443       791            mov a, #'C'
0866 12007E     791            lcall ?WriteData
0869            792       
0869 22         793       ret
086A            794       
086A            795       
086A            796   DisplayingLCD_wotime:
086A C0E0       797            push acc
086C 7401       797            mov a, #1
086E 14         797            dec a
086F 1200BF     797            lcall ?Set_Cursor_2 ; Select column and row
0872 D0E0       797            pop acc
0874 C083       798            push dph
0876 C082       798            push dpl
0878 C0E0       798            push acc
087A 900466     798            mov dptr, #blank
087D 1200B4     798            lcall ?Send_Constant_String
0880 D0E0       798            pop acc
0882 D082       798            pop dpl
0884 D083       798            pop dph
0886 853F30     799            mov x, coldtemp         
0889 12011F     800            lcall hex2bcd   
088C C0E0       801            push acc
088E 740A       801            mov a, #10
0890 14         801            dec a
0891 1200BF     801            lcall ?Set_Cursor_2 ; Select column and row
0894 D0E0       801            pop acc
0896 C000       802            push ar0
0898 A839       802            mov r0, bcd+1
089A 1200C6     802            lcall ?Display_BCD
089D D000       802            pop ar0
089F C0E0       803            push acc
08A1 740C       803            mov a, #12
08A3 14         803            dec a
08A4 1200BF     803            lcall ?Set_Cursor_2 ; Select column and row
08A7 D0E0       803            pop acc
08A9 C000       804            push ar0
08AB A838       804            mov r0, bcd
08AD 1200C6     804            lcall ?Display_BCD
08B0 D000       804            pop ar0
08B2            805       
08B2 120A1D     806       lcall display_temp_putty
08B5            807                            
08B5 C0E0       808            push acc
08B7 740F       808            mov a, #15
08B9 14         808            dec a
08BA 1200BF     808            lcall ?Set_Cursor_2 ; Select column and row
08BD D0E0       808            pop acc
08BF 74DF       809            mov a, #0xDF
08C1 12007E     809            lcall ?WriteData
08C4 C0E0       810            push acc
08C6 7410       810            mov a, #16
08C8 14         810            dec a
08C9 1200BF     810            lcall ?Set_Cursor_2 ; Select column and row
08CC D0E0       810            pop acc
08CE 7443       811            mov a, #'C'
08D0 12007E     811            lcall ?WriteData
08D3            812       
08D3 22         813       ret
08D4            814   
08D4            815   
08D4            816   ;As a safety measure, the reflow process must be aborted if the oven doesn’t reach at least 50oC in the first 60 seconds of operation
08D4            817   checkerror: 
08D4 C0E0       818            push acc
08D6 C0D0       819     push psw
08D8            820     
08D8            821     
08D8 C3         822     clr c
08D9 7460       823     mov a, #0x60
08DB 9550       824     subb a, second
08DD 500E       825     jnc noerror
08DF            826   
08DF            827     
08DF 7432       828     mov a, #50
08E1 953F       829     subb a, coldtemp
08E3 5002       830     jnc error
08E5 8006       831     sjmp noerror
08E7            832     error:
08E7 1207EA     833     lcall TurnOvenOff
08EA 020ACC     834     ljmp Menu_Select1
08ED            835     
08ED            836   
08ED            837   noerror:
08ED D0D0       838     pop psw
08EF D0E0       839     pop acc 
08F1 22         840     ret
08F2            841            
08F2            842   ;------------------------------;
08F2            843   ; Temperature Reader From Sam     ;
08F2            844   ;------------------------------;
08F2            845            
08F2            846   readingcoldjunction: ;read the cold junction from the adc
08F2            847   ;reading the adc
08F2 C0E0       848            push acc
08F4 C0D0       849       push psw
08F6            850     
08F6 C2A0       851            clr CE_ADC 
08F8 7801       852            mov R0, #00000001B ; Start bit:1 
08FA 12052C     853            lcall DO_SPI_G
08FD 7880       854            mov R0, #10000000B ; Single ended, read channel 0 
08FF 12052C     855            lcall DO_SPI_G 
0902 E9         856            mov a, R1          ; R1 contains bits 8 and 9 
0903 5403       857            anl a, #00000011B  ; We need only the two least significant bits 
0905 F53E       858            mov Result+1, a    ; Save result high.
0907 7855       859            mov R0, #55H ; It doesn't matter what we transmit... 
0909 12052C     860            lcall DO_SPI_G 
090C 893D       861            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
090E D2A0       862            setb CE_ADC 
0910            863            ;wait for 1 second 
0910 C002       864            push AR2
0912 7AFA       864            mov R2, #250
0914 120039     864            lcall ?Wait_Milli_Seconds
0917 D002       864            pop AR2
0919 C002       865            push AR2
091B 7AFA       865            mov R2, #250
091D 120039     865            lcall ?Wait_Milli_Seconds
0920 D002       865            pop AR2
0922            866     
0922 12092E     867            lcall Calculate_Temp_in_C 
0925 E530       868       mov a, x
0927 F53F       869       mov coldtemp, a
0929            870     
0929 D0D0       871              pop psw
092B D0E0       872              pop acc
092D 22         873              ret   
092E            874               
092E            875   
092E            876   ;Trying to transfer the binary value in ADC into BCD and then into 
092E            877   ;ASCII to show in putty
092E            878   Calculate_Temp_in_C:     
092E E4         879            clr a 
092F 753000     880            mov x+0, #low (0 % 0x10000) 
0932 753100     880            mov x+1, #high(0 % 0x10000) 
0935 753200     880            mov x+2, #low (0 / 0x10000) 
0938 753300     880            mov x+3, #high(0 / 0x10000)     ; 
093B 753400     881            mov y+0, #low (0 % 0x10000) 
093E 753500     881            mov y+1, #high(0 % 0x10000) 
0941 753600     881            mov y+2, #low (0 / 0x10000) 
0944 753700     881            mov y+3, #high(0 / 0x10000) 
0947            882            ; load the result into X 
0947 E53D       883            mov a, Result+0
0949 F530       884            mov X, a
094B E53E       885            mov a, Result+1
094D F531       886            mov X+1, a
094F 75349A     887            mov y+0, #low (410 % 0x10000) 
0952 753501     887            mov y+1, #high(410 % 0x10000) 
0955 753600     887            mov y+2, #low (410 / 0x10000) 
0958 753700     887            mov y+3, #high(410 / 0x10000) 
095B 120299     888            lcall mul32;
095E 7534FF     889            mov y+0, #low (1023 % 0x10000) 
0961 753503     889            mov y+1, #high(1023 % 0x10000) 
0964 753600     889            mov y+2, #low (1023 / 0x10000) 
0967 753700     889            mov y+3, #high(1023 / 0x10000) 
096A 120326     890            lcall div32;  
096D            891            ;calculte temperature 
096D 753411     892            mov y+0, #low (273 % 0x10000) 
0970 753501     892            mov y+1, #high(273 % 0x10000) 
0973 753600     892            mov y+2, #low (273 / 0x10000) 
0976 753700     892            mov y+3, #high(273 / 0x10000) 
0979 853052     893            mov temp, X
097C 120205     894            lcall sub32
097F 12011F     895            lcall hex2bcd ; converts binary in x to BCD in BCD
0982            896            ;Set_Cursor(2, 13)
0982            897            ;Display_BCD(bcd)
0982            898   ;        lcall Display_Temp_Putty
0982 22         899            ret
0983            900   
0983            901   readinghotjunction: ;read the hot junction from the adc from oven and thermocouple wires
0983            902   ;reading the adc
0983 C0E0       903            push acc
0985 C0D0       904     push psw
0987            905     
0987 C2A0       906            clr CE_ADC 
0989 7801       907            mov R0, #00000001B ; Start bit:1 
098B 12052C     908            lcall DO_SPI_G
098E 7890       909            mov R0, #10010000B ; Single ended, read channel 1 
0990 12052C     910            lcall DO_SPI_G 
0993 E9         911            mov a, R1          ; R1 contains bits 8 and 9 
0994 5403       912            anl a, #00000011B  ; We need only the two least significant bits 
0996 F53E       913            mov Result+1, a    ; Save result high.
0998 7855       914            mov R0, #55H ; It doesn't matter what we transmit... 
099A 12052C     915            lcall DO_SPI_G 
099D 893D       916            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
099F D2A0       917            setb CE_ADC 
09A1            918            ;wait for 1 second 
09A1 C002       919            push AR2
09A3 7AFA       919            mov R2, #250
09A5 120039     919            lcall ?Wait_Milli_Seconds
09A8 D002       919            pop AR2
09AA C002       920            push AR2
09AC 7AFA       920            mov R2, #250
09AE 120039     920            lcall ?Wait_Milli_Seconds
09B1 D002       920            pop AR2
09B3            921            
09B3 753000     922            mov x+0, #low (0 % 0x10000) 
09B6 753100     922            mov x+1, #high(0 % 0x10000) 
09B9 753200     922            mov x+2, #low (0 / 0x10000) 
09BC 753300     922            mov x+3, #high(0 / 0x10000) 
09BF            923   
09BF E53D       924            mov a,Result
09C1 F530       925            mov x,a
09C3 E53E       926            mov a,Result+1
09C5 F531       927            mov x+1,a
09C7            928            
09C7 12011F     929            lcall hex2bcd
09CA            930                            
09CA            931     
09CA 1209D6     932            lcall Calculate_hot 
09CD E530       933       mov a, x
09CF F540       934       mov hottemp, a
09D1            935     
09D1 D0D0       936              pop psw
09D3 D0E0       937              pop acc
09D5 22         938              ret   
09D6            939   
09D6            940   Calculate_hot:
09D6 C0E0       941   push acc
09D8 C0D0       942            push psw
09DA            943            ; Vout calculations
09DA 853D30     944            mov x, Result
09DD 853E31     945            mov x+1, Result+1
09E0 753200     946            mov x+2, #0
09E3 753300     947            mov x+3, #0
09E6            948            
09E6 75341D     949            mov y+0, #low (29 % 0x10000) 
09E9 753500     949            mov y+1, #high(29 % 0x10000) 
09EC 753600     949            mov y+2, #low (29 / 0x10000) 
09EF 753700     949            mov y+3, #high(29 / 0x10000) 
09F2 120299     950            lcall mul32
09F5 753466     951            mov y+0, #low (2150 % 0x10000) 
09F8 753508     951            mov y+1, #high(2150 % 0x10000) 
09FB 753600     951            mov y+2, #low (2150 / 0x10000) 
09FE 753700     951            mov y+3, #high(2150 / 0x10000) 
0A01 1201E4     952            lcall add32
0A04 753464     953            mov y+0, #low (100 % 0x10000) 
0A07 753500     953            mov y+1, #high(100 % 0x10000) 
0A0A 753600     953            mov y+2, #low (100 / 0x10000) 
0A0D 753700     953            mov y+3, #high(100 / 0x10000) 
0A10 120326     954            lcall div32
0A13            955       
0A13 12011F     956            lcall hex2bcd
0A16 E530       957            mov a, x
0A18 D0D0       958                    pop psw 
0A1A D0E0       959            pop acc
0A1C 22         960            ret
0A1D            961                    
0A1D            962   ; Display Temperature in Putty!
0A1D            963   Display_Temp_Putty:
0A1D C000       964            push ar0
0A1F A839       964            mov r0, bcd+1
0A21 1200E4     964            lcall ?Send_BCD
0A24 D000       964            pop ar0
0A26 C000       965            push ar0
0A28 A838       965            mov r0, bcd
0A2A 1200E4     965            lcall ?Send_BCD
0A2D D000       965            pop ar0
0A2F 740D       966            mov a, #'\r'
0A31 120545     967            lcall putchar1
0A34 740A       968            mov a, #'\n'
0A36 120545     969            lcall putchar1
0A39 22         970            ret     
0A3A            971   ;beeper function to indicate reflow process has started
0A3A            972   Reflow_start_BEEPER:
0A3A 121228     973    lcall ToneReset
0A3D D28C       974    setb tr0
0A3F B28C       975    cpl tr0
0A41 C002       976            push AR2
0A43 7AFA       976            mov R2, #250
0A45 120039     976            lcall ?Wait_Milli_Seconds
0A48 D002       976            pop AR2
0A4A C002       977            push AR2
0A4C 7AFA       977            mov R2, #250
0A4E 120039     977            lcall ?Wait_Milli_Seconds
0A51 D002       977            pop AR2
0A53 C28C       978    clr tr0
0A55 22         979    ret
0A56            980    
0A56            981   State_change_BEEPER:
0A56 121228     982    lcall ToneReset
0A59 D28C       983    setb tr0
0A5B C002       984            push AR2
0A5D 7AFA       984            mov R2, #250
0A5F 120039     984            lcall ?Wait_Milli_Seconds
0A62 D002       984            pop AR2
0A64 C002       985            push AR2
0A66 7AFA       985            mov R2, #250
0A68 120039     985            lcall ?Wait_Milli_Seconds
0A6B D002       985            pop AR2
0A6D C28C       986    clr tr0
0A6F 22         987    ret
0A70            988    
0A70            989   Open_oven_toaster_BEEPER:
0A70 121228     990     lcall ToneReset
0A73 D28C       991    setb tr0
0A75 C002       992            push AR2
0A77 7AFA       992            mov R2, #250
0A79 120039     992            lcall ?Wait_Milli_Seconds
0A7C D002       992            pop AR2
0A7E C002       993            push AR2
0A80 7AFA       993            mov R2, #250
0A82 120039     993            lcall ?Wait_Milli_Seconds
0A85 D002       993            pop AR2
0A87 C002       994            push AR2
0A89 7AFA       994            mov R2, #250
0A8B 120039     994            lcall ?Wait_Milli_Seconds
0A8E D002       994            pop AR2
0A90 C002       995            push AR2
0A92 7AFA       995            mov R2, #250
0A94 120039     995            lcall ?Wait_Milli_Seconds
0A97 D002       995            pop AR2
0A99 C002       996            push AR2
0A9B 7AFA       996            mov R2, #250
0A9D 120039     996            lcall ?Wait_Milli_Seconds
0AA0 D002       996            pop AR2
0AA2 C002       997            push AR2
0AA4 7AFA       997            mov R2, #250
0AA6 120039     997            lcall ?Wait_Milli_Seconds
0AA9 D002       997            pop AR2
0AAB            998   
0AAB            999   
0AAB C28C      1000    clr tr0
0AAD 22        1001    ret
0AAE           1002   ; Display Temperature in LCD
0AAE           1003   Display_Temp_LCD:
0AAE           1004   ; show temp in Celcius 
0AAE C0E0      1005            push acc
0AB0 7406      1005            mov a, #6
0AB2 14        1005            dec a
0AB3 1200C1    1005            lcall ?Set_Cursor_1 ; Select column and row
0AB6 D0E0      1005            pop acc;
0AB8 C000      1006            push ar0
0ABA A839      1006            mov r0, bcd+1
0ABC 1200C6    1006            lcall ?Display_BCD
0ABF D000      1006            pop ar0
0AC1 C0E0      1007            push acc
0AC3 7409      1007            mov a, #9
0AC5 14        1007            dec a
0AC6 1200C1    1007            lcall ?Set_Cursor_1 ; Select column and row
0AC9 D0E0      1007            pop acc;  
0ACB 22        1008            ret
0ACC           1009            
0ACC           1010   ; MENU SELECT;   
0ACC           1011            
0ACC           1012            
0ACC           1013   Menu_select1:  
0ACC 7401      1014            mov a, #0x01
0ACE 120083    1014            lcall ?WriteCommand
0AD1 C002      1015            push AR2
0AD3 7A32      1015            mov R2, #50
0AD5 120039    1015            lcall ?Wait_Milli_Seconds
0AD8 D002      1015            pop AR2
0ADA           1016   Menu_select2:
0ADA C0E0      1017            push acc
0ADC 7401      1017            mov a, #1
0ADE 14        1017            dec a
0ADF 1200C1    1017            lcall ?Set_Cursor_1 ; Select column and row
0AE2 D0E0      1017            pop acc
0AE4 C083      1018            push dph
0AE6 C082      1018            push dpl
0AE8 C0E0      1018            push acc
0AEA 90039C    1018            mov dptr, #MenuMessage1
0AED 1200B4    1018            lcall ?Send_Constant_String
0AF0 D0E0      1018            pop acc
0AF2 D082      1018            pop dpl
0AF4 D083      1018            pop dph
0AF6 C0E0      1019            push acc
0AF8 7401      1019            mov a, #1
0AFA 14        1019            dec a
0AFB 1200BF    1019            lcall ?Set_Cursor_2 ; Select column and row
0AFE D0E0      1019            pop acc
0B00 C083      1020            push dph
0B02 C082      1020            push dpl
0B04 C0E0      1020            push acc
0B06 9003A8    1020            mov dptr, #MenuMessage2
0B09 1200B4    1020            lcall ?Send_Constant_String
0B0C D0E0      1020            pop acc
0B0E D082      1020            pop dpl
0B10 D083      1020            pop dph
0B12           1021     
0B12 C002      1022            push AR2
0B14 7A32      1022            mov R2, #50
0B16 120039    1022            lcall ?Wait_Milli_Seconds
0B19 D002      1022            pop AR2 ;go to set Soak Temperature
0B1B 208406    1023     jb BUTTON_1, Menu_select2_2
0B1E 3084FD    1024     jnb BUTTON_1, $
0B21 020B80    1025     ljmp Jump_to_Set_SoakTemp1
0B24           1026     
0B24           1027   Menu_select2_2:
0B24 C002      1028            push AR2
0B26 7A32      1028            mov R2, #50
0B28 120039    1028            lcall ?Wait_Milli_Seconds
0B2B D002      1028            pop AR2 ;go to set Soak Time
0B2D 208506    1029     jb BUTTON_2, Menu_select2_3
0B30 3085FD    1030     jnb BUTTON_2, $
0B33 020B83    1031     ljmp Jump_to_Set_SoakTime1
0B36           1032     
0B36           1033   Menu_select2_3:
0B36 C002      1034            push AR2
0B38 7A32      1034            mov R2, #50
0B3A 120039    1034            lcall ?Wait_Milli_Seconds
0B3D D002      1034            pop AR2 ;go to second set of menus
0B3F 208606    1035     jb BUTTON_3, Menu_select2_4
0B42 3086FD    1036     jnb BUTTON_3, $
0B45 020B89    1037     ljmp Jump_to_Menu_select3
0B48           1038     
0B48           1039   Menu_select2_4:
0B48 C002      1040            push AR2
0B4A 7A32      1040            mov R2, #50
0B4C 120039    1040            lcall ?Wait_Milli_Seconds
0B4F D002      1040            pop AR2   ; start the reflow process
0B51 208332    1041     jb StartButton, Jump_to_Menu_select2_1
0B54 3083FD    1042     jnb StartButton, $
0B57 020B5A    1043     ljmp Jump_To_FOREVER1
0B5A           1044     
0B5A           1045   Jump_To_FOREVER1:
0B5A 7401      1046            mov a, #0x01
0B5C 120083    1046            lcall ?WriteCommand
0B5F C002      1047            push AR2
0B61 7A32      1047            mov R2, #50
0B63 120039    1047            lcall ?Wait_Milli_Seconds
0B66 D002      1047            pop AR2
0B68 1207ED    1048     lcall TurnOvenOn
0B6B 12048F    1049     lcall Timer2_init
0B6E           1050            
0B6E 755000    1051            mov second, #0
0B71 1212E4    1052    lcall TonePlayer2
0B74 C002      1053            push AR2
0B76 7A32      1053            mov R2, #50
0B78 120039    1053            lcall ?Wait_Milli_Seconds
0B7B D002      1053            pop AR2
0B7D 0205FF    1054            ljmp FOREVER
0B80           1055   
0B80           1056   Jump_to_Set_SoakTemp1:
0B80 020B8C    1057            ljmp Set_SoakTemp1
0B83           1058     
0B83           1059   Jump_to_Set_SoakTime1:
0B83 020C90    1060            ljmp Set_SoakTime1
0B86           1061            
0B86           1062   Jump_to_Menu_select2_1:
0B86 020ADA    1063            ljmp Menu_select2
0B89           1064     
0B89           1065   Jump_to_Menu_select3:
0B89 020D94    1066            ljmp Menu_select3
0B8C           1067   
0B8C           1068   ; Settings - Soak Temperature
0B8C           1069   Set_SoakTemp1:
0B8C 7401      1070            mov a, #0x01
0B8E 120083    1070            lcall ?WriteCommand          ;clear display
0B91 C002      1071            push AR2
0B93 7A32      1071            mov R2, #50
0B95 120039    1071            lcall ?Wait_Milli_Seconds
0B98 D002      1071            pop AR2
0B9A C0E0      1072            push acc
0B9C 7401      1072            mov a, #1
0B9E 14        1072            dec a
0B9F 1200C1    1072            lcall ?Set_Cursor_1 ; Select column and row
0BA2 D0E0      1072            pop acc
0BA4 C083      1073            push dph
0BA6 C082      1073            push dpl
0BA8 C0E0      1073            push acc
0BAA 9003D0    1073            mov dptr, #MenuSoakTemp
0BAD 1200B4    1073            lcall ?Send_Constant_String
0BB0 D0E0      1073            pop acc
0BB2 D082      1073            pop dpl
0BB4 D083      1073            pop dph
0BB6 C0E0      1074            push acc
0BB8 7401      1074            mov a, #1
0BBA 14        1074            dec a
0BBB 1200BF    1074            lcall ?Set_Cursor_2 ; Select column and row
0BBE D0E0      1074            pop acc
0BC0 854430    1075     mov x, soaktemp
0BC3 12011F    1076     lcall hex2bcd
0BC6 C000      1077            push ar0
0BC8 A839      1077            mov r0, bcd+1
0BCA 1200C6    1077            lcall ?Display_BCD
0BCD D000      1077            pop ar0
0BCF C0E0      1078            push acc
0BD1 7403      1078            mov a, #3
0BD3 14        1078            dec a
0BD4 1200BF    1078            lcall ?Set_Cursor_2 ; Select column and row
0BD7 D0E0      1078            pop acc
0BD9 C000      1079            push ar0
0BDB A838      1079            mov r0, bcd+0
0BDD 1200C6    1079            lcall ?Display_BCD
0BE0 D000      1079            pop ar0
0BE2           1080   Set_SoakTemp2:
0BE2 20840F    1081     jb BUTTON_1, Set_SoakTemp2_2
0BE5 C002      1082            push AR2
0BE7 7A32      1082            mov R2, #50
0BE9 120039    1082            lcall ?Wait_Milli_Seconds
0BEC D002      1082            pop AR2
0BEE 208403    1083     jb BUTTON_1, Set_SoakTemp2_2
0BF1 020C1B    1084     ljmp SoakTemp_inc
0BF4           1085   Set_SoakTemp2_2:
0BF4 20850F    1086     jb BUTTON_2, Set_SoakTemp2_3
0BF7 C002      1087            push AR2
0BF9 7A32      1087            mov R2, #50
0BFB 120039    1087            lcall ?Wait_Milli_Seconds
0BFE D002      1087            pop AR2
0C00 208503    1088     jb BUTTON_2, Set_SoakTemp2_3
0C03 020C3F    1089     ljmp SoakTemp_dec
0C06           1090   Set_SoakTemp2_3:
0C06 20860F    1091            jb BUTTON_3, Set_SoakTemp2_4
0C09 C002      1092            push AR2
0C0B 7A32      1092            mov R2, #50
0C0D 120039    1092            lcall ?Wait_Milli_Seconds
0C10 D002      1092            pop AR2
0C12 208603    1093     jb BUTTON_3, Set_SoakTemp2_4
0C15 020ACC    1094     ljmp Menu_select1
0C18           1095   Set_SoakTemp2_4:
0C18 020BE2    1096     ljmp Set_SoakTemp2
0C1B           1097     
0C1B           1098   soaktemp_inc:
0C1B 854430    1099    mov x, soaktemp
0C1E 753100    1100    mov x+1, #0
0C21 753200    1101    mov x+2, #0
0C24 753300    1102    mov x+3, #0
0C27 753401    1103            mov y+0, #low (1 % 0x10000) 
0C2A 753500    1103            mov y+1, #high(1 % 0x10000) 
0C2D 753600    1103            mov y+2, #low (1 / 0x10000) 
0C30 753700    1103            mov y+3, #high(1 / 0x10000) 
0C33 1201E4    1104    lcall add32
0C36 853044    1105    mov soaktemp, x
0C39 120C63    1106    lcall display_soak_temp 
0C3C 020BE2    1107    ljmp Set_SoakTemp2
0C3F           1108    
0C3F           1109   soaktemp_dec: 
0C3F 854430    1110    mov x, soaktemp
0C42 753100    1111    mov x+1, #0
0C45 753200    1112    mov x+2, #0
0C48 753300    1113    mov x+3, #0
0C4B 753401    1114            mov y+0, #low (1 % 0x10000) 
0C4E 753500    1114            mov y+1, #high(1 % 0x10000) 
0C51 753600    1114            mov y+2, #low (1 / 0x10000) 
0C54 753700    1114            mov y+3, #high(1 / 0x10000) 
0C57 120205    1115    lcall sub32
0C5A 853044    1116    mov soaktemp, x
0C5D 120C63    1117    lcall display_soak_temp 
0C60 020BE2    1118    ljmp Set_SoakTemp2
0C63           1119     
0C63           1120   display_soak_temp: 
0C63 854430    1121    mov x, soaktemp
0C66 12011F    1122    lcall hex2bcd
0C69 C0E0      1123            push acc
0C6B 7401      1123            mov a, #1
0C6D 14        1123            dec a
0C6E 1200BF    1123            lcall ?Set_Cursor_2 ; Select column and row
0C71 D0E0      1123            pop acc
0C73 C000      1124            push ar0
0C75 A839      1124            mov r0, bcd+1
0C77 1200C6    1124            lcall ?Display_BCD
0C7A D000      1124            pop ar0
0C7C C0E0      1125            push acc
0C7E 7403      1125            mov a, #3
0C80 14        1125            dec a
0C81 1200BF    1125            lcall ?Set_Cursor_2 ; Select column and row
0C84 D0E0      1125            pop acc
0C86 C000      1126            push ar0
0C88 A838      1126            mov r0, bcd+0
0C8A 1200C6    1126            lcall ?Display_BCD
0C8D D000      1126            pop ar0
0C8F 22        1127   ret   
0C90           1128   
0C90           1129   ; Settings - Soak Time
0C90           1130   Set_SoakTime1:
0C90 7401      1131            mov a, #0x01
0C92 120083    1131            lcall ?WriteCommand          ;clear display
0C95 C002      1132            push AR2
0C97 7A32      1132            mov R2, #50
0C99 120039    1132            lcall ?Wait_Milli_Seconds
0C9C D002      1132            pop AR2
0C9E C0E0      1133            push acc
0CA0 7401      1133            mov a, #1
0CA2 14        1133            dec a
0CA3 1200C1    1133            lcall ?Set_Cursor_1 ; Select column and row
0CA6 D0E0      1133            pop acc
0CA8 C083      1134            push dph
0CAA C082      1134            push dpl
0CAC C0E0      1134            push acc
0CAE 9003DB    1134            mov dptr, #MenuSoakTime
0CB1 1200B4    1134            lcall ?Send_Constant_String
0CB4 D0E0      1134            pop acc
0CB6 D082      1134            pop dpl
0CB8 D083      1134            pop dph
0CBA C0E0      1135            push acc
0CBC 7401      1135            mov a, #1
0CBE 14        1135            dec a
0CBF 1200BF    1135            lcall ?Set_Cursor_2 ; Select column and row
0CC2 D0E0      1135            pop acc
0CC4 854530    1136     mov x, soaktime
0CC7 12011F    1137     lcall hex2bcd
0CCA C000      1138            push ar0
0CCC A839      1138            mov r0, bcd+1
0CCE 1200C6    1138            lcall ?Display_BCD
0CD1 D000      1138            pop ar0
0CD3 C0E0      1139            push acc
0CD5 7403      1139            mov a, #3
0CD7 14        1139            dec a
0CD8 1200BF    1139            lcall ?Set_Cursor_2 ; Select column and row
0CDB D0E0      1139            pop acc
0CDD C000      1140            push ar0
0CDF A838      1140            mov r0, bcd+0
0CE1 1200C6    1140            lcall ?Display_BCD
0CE4 D000      1140            pop ar0
0CE6           1141   Set_SoakTime2:
0CE6 20840F    1142     jb BUTTON_1, Set_SoakTime2_2
0CE9 C002      1143            push AR2
0CEB 7A32      1143            mov R2, #50
0CED 120039    1143            lcall ?Wait_Milli_Seconds
0CF0 D002      1143            pop AR2
0CF2 208403    1144     jb BUTTON_1, Set_SoakTime2_2
0CF5 020D1F    1145     ljmp SoakTime_inc
0CF8           1146   Set_SoakTime2_2:
0CF8 20850F    1147     jb BUTTON_2, Set_SoakTime2_3
0CFB C002      1148            push AR2
0CFD 7A32      1148            mov R2, #50
0CFF 120039    1148            lcall ?Wait_Milli_Seconds
0D02 D002      1148            pop AR2
0D04 208503    1149     jb BUTTON_2, Set_SoakTime2_3
0D07 020D43    1150     ljmp SoakTime_dec
0D0A           1151   Set_SoakTime2_3:
0D0A 20860F    1152            jb BUTTON_3, Set_SoakTime2_4
0D0D C002      1153            push AR2
0D0F 7A32      1153            mov R2, #50
0D11 120039    1153            lcall ?Wait_Milli_Seconds
0D14 D002      1153            pop AR2
0D16 208603    1154     jb BUTTON_3, Set_SoakTime2_4
0D19 020ACC    1155     ljmp Menu_select1
0D1C           1156   Set_SoakTime2_4:
0D1C 020CE6    1157     ljmp Set_SoakTime2
0D1F           1158   
0D1F           1159   soaktime_inc:
0D1F 854530    1160    mov x, soaktime
0D22 753100    1161    mov x+1, #0
0D25 753200    1162    mov x+2, #0
0D28 753300    1163    mov x+3, #0
0D2B 753401    1164            mov y+0, #low (1 % 0x10000) 
0D2E 753500    1164            mov y+1, #high(1 % 0x10000) 
0D31 753600    1164            mov y+2, #low (1 / 0x10000) 
0D34 753700    1164            mov y+3, #high(1 / 0x10000) 
0D37 1201E4    1165    lcall add32
0D3A 853045    1166    mov soaktime, x
0D3D 120D67    1167    lcall display_soak_time
0D40 020CE6    1168    ljmp Set_SoakTime2
0D43           1169    
0D43           1170   soaktime_dec: 
0D43 854530    1171    mov x, soaktime
0D46 753100    1172    mov x+1, #0
0D49 753200    1173    mov x+2, #0
0D4C 753300    1174    mov x+3, #0
0D4F 753401    1175            mov y+0, #low (1 % 0x10000) 
0D52 753500    1175            mov y+1, #high(1 % 0x10000) 
0D55 753600    1175            mov y+2, #low (1 / 0x10000) 
0D58 753700    1175            mov y+3, #high(1 / 0x10000) 
0D5B 120205    1176    lcall sub32
0D5E 853045    1177    mov soaktime, x
0D61 120D67    1178    lcall display_soak_time
0D64 020CE6    1179    ljmp Set_SoakTime2
0D67           1180     
0D67           1181   display_soak_time: 
0D67 854530    1182    mov x, soaktime
0D6A 12011F    1183    lcall hex2bcd
0D6D C0E0      1184            push acc
0D6F 7401      1184            mov a, #1
0D71 14        1184            dec a
0D72 1200BF    1184            lcall ?Set_Cursor_2 ; Select column and row
0D75 D0E0      1184            pop acc
0D77 C000      1185            push ar0
0D79 A839      1185            mov r0, bcd+1
0D7B 1200C6    1185            lcall ?Display_BCD
0D7E D000      1185            pop ar0
0D80 C0E0      1186            push acc
0D82 7403      1186            mov a, #3
0D84 14        1186            dec a
0D85 1200BF    1186            lcall ?Set_Cursor_2 ; Select column and row
0D88 D0E0      1186            pop acc
0D8A C000      1187            push ar0
0D8C A838      1187            mov r0, bcd+0
0D8E 1200C6    1187            lcall ?Display_BCD
0D91 D000      1187            pop ar0
0D93 22        1188   ret   
0D94           1189   
0D94           1190   
0D94           1191   ; Second set of Menu - Set reflow parameters
0D94           1192   Menu_select3:
0D94 7401      1193            mov a, #0x01
0D96 120083    1193            lcall ?WriteCommand
0D99 C002      1194            push AR2
0D9B 7A32      1194            mov R2, #50
0D9D 120039    1194            lcall ?Wait_Milli_Seconds
0DA0 D002      1194            pop AR2
0DA2           1195   Menu_select4:
0DA2 C0E0      1196            push acc
0DA4 7401      1196            mov a, #1
0DA6 14        1196            dec a
0DA7 1200C1    1196            lcall ?Set_Cursor_1 ; Select column and row
0DAA D0E0      1196            pop acc
0DAC C083      1197            push dph
0DAE C082      1197            push dpl
0DB0 C0E0      1197            push acc
0DB2 9003B4    1197            mov dptr, #MenuMessage3
0DB5 1200B4    1197            lcall ?Send_Constant_String
0DB8 D0E0      1197            pop acc
0DBA D082      1197            pop dpl
0DBC D083      1197            pop dph
0DBE C0E0      1198            push acc
0DC0 7401      1198            mov a, #1
0DC2 14        1198            dec a
0DC3 1200BF    1198            lcall ?Set_Cursor_2 ; Select column and row
0DC6 D0E0      1198            pop acc
0DC8 C083      1199            push dph
0DCA C082      1199            push dpl
0DCC C0E0      1199            push acc
0DCE 9003C2    1199            mov dptr, #MenuMessage4
0DD1 1200B4    1199            lcall ?Send_Constant_String
0DD4 D0E0      1199            pop acc
0DD6 D082      1199            pop dpl
0DD8 D083      1199            pop dph
0DDA           1200     
0DDA C002      1201            push AR2
0DDC 7A32      1201            mov R2, #50
0DDE 120039    1201            lcall ?Wait_Milli_Seconds
0DE1 D002      1201            pop AR2 ;go to set Reflow Temperature
0DE3 208406    1202     jb BUTTON_1, Menu_select4_2
0DE6 3084FD    1203     jnb BUTTON_1, $
0DE9 020E25    1204     ljmp Jump_to_Set_ReflowTemp1
0DEC           1205     
0DEC           1206   Menu_select4_2:
0DEC C002      1207            push AR2
0DEE 7A32      1207            mov R2, #50
0DF0 120039    1207            lcall ?Wait_Milli_Seconds
0DF3 D002      1207            pop AR2 ;go to set Reflow Time
0DF5 208506    1208     jb BUTTON_2, Menu_select4_3
0DF8 3085FD    1209     jnb BUTTON_2, $
0DFB 020E28    1210     ljmp Jump_to_Set_ReflowTime1
0DFE           1211     
0DFE           1212   Menu_select4_3:
0DFE C002      1213            push AR2
0E00 7A32      1213            mov R2, #50
0E02 120039    1213            lcall ?Wait_Milli_Seconds
0E05 D002      1213            pop AR2 ;go to first set of menus
0E07 208606    1214     jb BUTTON_3, Menu_select4_4
0E0A 3086FD    1215     jnb BUTTON_3, $
0E0D 020E2E    1216     ljmp Jump_to_Menu_select2
0E10           1217   
0E10           1218   Menu_select4_4:
0E10 C002      1219            push AR2
0E12 7A32      1219            mov R2, #50
0E14 120039    1219            lcall ?Wait_Milli_Seconds
0E17 D002      1219            pop AR2   ; start the reflow process
0E19 20830F    1220     jb StartButton, Jump_to_Menu_select3_1
0E1C 3083FD    1221     jnb StartButton, $
0E1F 020B5A    1222     ljmp Jump_To_FOREVER1
0E22           1223   
0E22           1224   Jump_To_FOREVER2:
0E22 0205FF    1225            ljmp FOREVER
0E25           1226     
0E25           1227   
0E25           1228   Jump_to_Set_ReflowTemp1:
0E25 020E31    1229            ljmp Set_ReflowTemp1
0E28           1230     
0E28           1231   Jump_to_Set_ReflowTime1:
0E28 020F3E    1232            ljmp Set_ReflowTime1
0E2B           1233            
0E2B           1234   Jump_to_Menu_select3_1:
0E2B 020DA2    1235            ljmp Menu_select4
0E2E           1236     
0E2E           1237   Jump_to_Menu_select2:
0E2E 020ACC    1238            ljmp Menu_select1
0E31           1239     
0E31           1240   ; Settings - Reflow Temperature
0E31           1241   Set_ReflowTemp1:
0E31 7401      1242            mov a, #0x01
0E33 120083    1242            lcall ?WriteCommand          ;clear display
0E36 C002      1243            push AR2
0E38 7A32      1243            mov R2, #50
0E3A 120039    1243            lcall ?Wait_Milli_Seconds
0E3D D002      1243            pop AR2
0E3F C0E0      1244            push acc
0E41 7401      1244            mov a, #1
0E43 14        1244            dec a
0E44 1200C1    1244            lcall ?Set_Cursor_1 ; Select column and row
0E47 D0E0      1244            pop acc
0E49 C083      1245            push dph
0E4B C082      1245            push dpl
0E4D C0E0      1245            push acc
0E4F 9003E6    1245            mov dptr, #MenuReflowTemp
0E52 1200B4    1245            lcall ?Send_Constant_String
0E55 D0E0      1245            pop acc
0E57 D082      1245            pop dpl
0E59 D083      1245            pop dph
0E5B C0E0      1246            push acc
0E5D 7401      1246            mov a, #1
0E5F 14        1246            dec a
0E60 1200BF    1246            lcall ?Set_Cursor_2 ; Select column and row
0E63 D0E0      1246            pop acc
0E65 854630    1247     mov x, reflowtemp
0E68 12011F    1248     lcall hex2bcd
0E6B C000      1249            push ar0
0E6D A839      1249            mov r0, bcd+1
0E6F 1200C6    1249            lcall ?Display_BCD
0E72 D000      1249            pop ar0
0E74 C0E0      1250            push acc
0E76 7403      1250            mov a, #3
0E78 14        1250            dec a
0E79 1200BF    1250            lcall ?Set_Cursor_2 ; Select column and row
0E7C D0E0      1250            pop acc
0E7E C000      1251            push ar0
0E80 A838      1251            mov r0, bcd+0
0E82 1200C6    1251            lcall ?Display_BCD
0E85 D000      1251            pop ar0
0E87           1252     
0E87           1253   Set_ReflowTemp2:
0E87 20840F    1254     jb BUTTON_1, Set_ReflowTemp2_2
0E8A C002      1255            push AR2
0E8C 7A32      1255            mov R2, #50
0E8E 120039    1255            lcall ?Wait_Milli_Seconds
0E91 D002      1255            pop AR2
0E93 208403    1256     jb BUTTON_1, Set_ReflowTemp2_2
0E96 020F1A    1257     ljmp ReflowTemp_inc
0E99           1258   Set_ReflowTemp2_2:
0E99 20850F    1259     jb BUTTON_2, Set_ReflowTemp2_3
0E9C C002      1260            push AR2
0E9E 7A32      1260            mov R2, #50
0EA0 120039    1260            lcall ?Wait_Milli_Seconds
0EA3 D002      1260            pop AR2
0EA5 208503    1261     jb BUTTON_2, Set_ReflowTemp2_3
0EA8 020EC0    1262     ljmp ReflowTemp_dec
0EAB           1263   Set_ReflowTemp2_3:
0EAB 20860F    1264            jb BUTTON_3, Set_ReflowTemp2_4
0EAE C002      1265            push AR2
0EB0 7A32      1265            mov R2, #50
0EB2 120039    1265            lcall ?Wait_Milli_Seconds
0EB5 D002      1265            pop AR2
0EB7 208603    1266     jb BUTTON_3, Set_ReflowTemp2_4
0EBA 020D94    1267     ljmp Menu_select3
0EBD           1268   Set_ReflowTemp2_4:
0EBD 020E87    1269     ljmp Set_ReflowTemp2
0EC0           1270    
0EC0           1271    
0EC0           1272    
0EC0           1273     
0EC0           1274   ReflowTemp_dec:
0EC0 854630    1275    mov x, reflowtemp
0EC3 753100    1276    mov x+1, #0
0EC6 753200    1277    mov x+2, #0
0EC9 753300    1278    mov x+3, #0
0ECC 753401    1279            mov y+0, #low (1 % 0x10000) 
0ECF 753500    1279            mov y+1, #high(1 % 0x10000) 
0ED2 753600    1279            mov y+2, #low (1 / 0x10000) 
0ED5 753700    1279            mov y+3, #high(1 / 0x10000) 
0ED8 120205    1280    lcall sub32
0EDB 853046    1281    mov reflowtemp, x
0EDE 120EE4    1282    lcall display_reflow_temp
0EE1 020E87    1283    ljmp Set_reflowtemp2
0EE4           1284     
0EE4           1285   display_reflow_temp: 
0EE4 854630    1286    mov x, reflowtemp
0EE7 753100    1287    mov x+1, #0
0EEA 753200    1288    mov x+2, #0
0EED 753300    1289    mov x+3, #0
0EF0 12011F    1290    lcall hex2bcd
0EF3 C0E0      1291            push acc
0EF5 7401      1291            mov a, #1
0EF7 14        1291            dec a
0EF8 1200BF    1291            lcall ?Set_Cursor_2 ; Select column and row
0EFB D0E0      1291            pop acc
0EFD C000      1292            push ar0
0EFF A839      1292            mov r0, bcd+1
0F01 1200C6    1292            lcall ?Display_BCD
0F04 D000      1292            pop ar0
0F06 C0E0      1293            push acc
0F08 7403      1293            mov a, #3
0F0A 14        1293            dec a
0F0B 1200BF    1293            lcall ?Set_Cursor_2 ; Select column and row
0F0E D0E0      1293            pop acc
0F10 C000      1294            push ar0
0F12 A838      1294            mov r0, bcd+0
0F14 1200C6    1294            lcall ?Display_BCD
0F17 D000      1294            pop ar0
0F19 22        1295   ret   
0F1A           1296    
0F1A           1297     
0F1A           1298   Reflowtemp_inc:
0F1A 854630    1299    mov x, reflowtemp
0F1D 753100    1300    mov x+1, #0
0F20 753200    1301    mov x+2, #0
0F23 753300    1302    mov x+3, #0
0F26 753401    1303            mov y+0, #low (1 % 0x10000) 
0F29 753500    1303            mov y+1, #high(1 % 0x10000) 
0F2C 753600    1303            mov y+2, #low (1 / 0x10000) 
0F2F 753700    1303            mov y+3, #high(1 / 0x10000) 
0F32 1201E4    1304    lcall add32
0F35 853046    1305    mov reflowtemp, x
0F38 120EE4    1306    lcall display_reflow_temp
0F3B 020E87    1307    ljmp Set_Reflowtemp2
0F3E           1308   
0F3E           1309   ; Settings - Reflow Time
0F3E           1310   Set_ReflowTime1:
0F3E 7401      1311            mov a, #0x01
0F40 120083    1311            lcall ?WriteCommand          ;clear display
0F43 C002      1312            push AR2
0F45 7A32      1312            mov R2, #50
0F47 120039    1312            lcall ?Wait_Milli_Seconds
0F4A D002      1312            pop AR2
0F4C C0E0      1313            push acc
0F4E 7401      1313            mov a, #1
0F50 14        1313            dec a
0F51 1200C1    1313            lcall ?Set_Cursor_1 ; Select column and row
0F54 D0E0      1313            pop acc
0F56 C083      1314            push dph
0F58 C082      1314            push dpl
0F5A C0E0      1314            push acc
0F5C 9003F3    1314            mov dptr, #MenuReflowTime
0F5F 1200B4    1314            lcall ?Send_Constant_String
0F62 D0E0      1314            pop acc
0F64 D082      1314            pop dpl
0F66 D083      1314            pop dph
0F68 C0E0      1315            push acc
0F6A 7401      1315            mov a, #1
0F6C 14        1315            dec a
0F6D 1200BF    1315            lcall ?Set_Cursor_2 ; Select column and row
0F70 D0E0      1315            pop acc
0F72 854730    1316     mov x, reflowtime
0F75 12011F    1317     lcall hex2bcd
0F78 C000      1318            push ar0
0F7A A839      1318            mov r0, bcd+1
0F7C 1200C6    1318            lcall ?Display_BCD
0F7F D000      1318            pop ar0
0F81 C0E0      1319            push acc
0F83 7403      1319            mov a, #3
0F85 14        1319            dec a
0F86 1200BF    1319            lcall ?Set_Cursor_2 ; Select column and row
0F89 D0E0      1319            pop acc
0F8B C000      1320            push ar0
0F8D A838      1320            mov r0, bcd+0
0F8F 1200C6    1320            lcall ?Display_BCD
0F92 D000      1320            pop ar0
0F94           1321   Set_ReflowTime2:
0F94 20840F    1322     jb BUTTON_1, Set_ReflowTime2_2
0F97 C002      1323            push AR2
0F99 7A32      1323            mov R2, #50
0F9B 120039    1323            lcall ?Wait_Milli_Seconds
0F9E D002      1323            pop AR2
0FA0 208403    1324     jb BUTTON_1, Set_ReflowTime2_2
0FA3 020FCD    1325     ljmp ReflowTime_inc
0FA6           1326   Set_ReflowTime2_2:
0FA6 20850F    1327     jb BUTTON_2, Set_ReflowTime2_3
0FA9 C002      1328            push AR2
0FAB 7A32      1328            mov R2, #50
0FAD 120039    1328            lcall ?Wait_Milli_Seconds
0FB0 D002      1328            pop AR2
0FB2 208503    1329     jb BUTTON_2, Set_ReflowTime2_3
0FB5 021027    1330     ljmp ReflowTime_dec
0FB8           1331   Set_ReflowTime2_3:
0FB8 20860F    1332            jb BUTTON_3, Set_ReflowTime2_4
0FBB C002      1333            push AR2
0FBD 7A32      1333            mov R2, #50
0FBF 120039    1333            lcall ?Wait_Milli_Seconds
0FC2 D002      1333            pop AR2
0FC4 208603    1334     jb BUTTON_3, Set_ReflowTime2_4
0FC7 020D94    1335     ljmp Menu_select3
0FCA           1336   Set_ReflowTime2_4:
0FCA 020F94    1337     ljmp Set_ReflowTime2
0FCD           1338   
0FCD           1339   ReflowTime_inc:
0FCD 854730    1340    mov x, reflowtime
0FD0 753100    1341    mov x+1, #0
0FD3 753200    1342    mov x+2, #0
0FD6 753300    1343    mov x+3, #0
0FD9 753401    1344            mov y+0, #low (1 % 0x10000) 
0FDC 753500    1344            mov y+1, #high(1 % 0x10000) 
0FDF 753600    1344            mov y+2, #low (1 / 0x10000) 
0FE2 753700    1344            mov y+3, #high(1 / 0x10000) 
0FE5 1201E4    1345    lcall add32
0FE8 853047    1346    mov reflowtime, x
0FEB 120FF1    1347    lcall display_reflow_time 
0FEE 020F94    1348    ljmp Set_reflowTime2
0FF1           1349     
0FF1           1350   display_reflow_time: 
0FF1 854730    1351    mov x, reflowtime
0FF4 753100    1352    mov x+1, #0
0FF7 753200    1353    mov x+2, #0
0FFA 753300    1354    mov x+3, #0
0FFD 12011F    1355    lcall hex2bcd
1000 C0E0      1356            push acc
1002 7401      1356            mov a, #1
1004 14        1356            dec a
1005 1200BF    1356            lcall ?Set_Cursor_2 ; Select column and row
1008 D0E0      1356            pop acc
100A C000      1357            push ar0
100C A839      1357            mov r0, bcd+1
100E 1200C6    1357            lcall ?Display_BCD
1011 D000      1357            pop ar0
1013 C0E0      1358            push acc
1015 7403      1358            mov a, #3
1017 14        1358            dec a
1018 1200BF    1358            lcall ?Set_Cursor_2 ; Select column and row
101B D0E0      1358            pop acc
101D C000      1359            push ar0
101F A838      1359            mov r0, bcd+0
1021 1200C6    1359            lcall ?Display_BCD
1024 D000      1359            pop ar0
1026 22        1360   ret   
1027           1361    
1027           1362     
1027           1363   ReflowTime_dec:
1027 854730    1364    mov x, reflowtime
102A 753100    1365    mov x+1, #0
102D 753200    1366    mov x+2, #0
1030 753300    1367    mov x+3, #0
1033 753401    1368            mov y+0, #low (1 % 0x10000) 
1036 753500    1368            mov y+1, #high(1 % 0x10000) 
1039 753600    1368            mov y+2, #low (1 / 0x10000) 
103C 753700    1368            mov y+3, #high(1 / 0x10000) 
103F 120205    1369    lcall sub32
1042 853047    1370    mov reflowtime, x
1045 120FF1    1371    lcall display_reflow_time
1048 020F94    1372    ljmp Set_Reflowtime2
104B           1373   
104B           1374   
104B           1375   ;--------------------;
104B           1376   ; Bonus - Song stuff ;
104B           1377   ;--------------------;
104B           1378   ;;;These aren't used in this program (for now at least)
104B           1379   Tone1:
104B 7401      1380            mov a, #0x01
104D 120083    1380            lcall ?WriteCommand
1050 C002      1381            push AR2
1052 7A32      1381            mov R2, #50
1054 120039    1381            lcall ?Wait_Milli_Seconds
1057 D002      1381            pop AR2
1059 C0E0      1382            push acc
105B 7401      1382            mov a, #1
105D 14        1382            dec a
105E 1200C1    1382            lcall ?Set_Cursor_1 ; Select column and row
1061 D0E0      1382            pop acc
1063 C083      1383            push dph
1065 C082      1383            push dpl
1067 C0E0      1383            push acc
1069 900444    1383            mov dptr, #Tone_Message1
106C 1200B4    1383            lcall ?Send_Constant_String
106F D0E0      1383            pop acc
1071 D082      1383            pop dpl
1073 D083      1383            pop dph
1075 C0E0      1384            push acc
1077 7401      1384            mov a, #1
1079 14        1384            dec a
107A 1200BF    1384            lcall ?Set_Cursor_2 ; Select column and row
107D D0E0      1384            pop acc
107F C083      1385            push dph
1081 C082      1385            push dpl
1083 C0E0      1385            push acc
1085 900455    1385            mov dptr, #Tone_Message2
1088 1200B4    1385            lcall ?Send_Constant_String
108B D0E0      1385            pop acc
108D D082      1385            pop dpl
108F D083      1385            pop dph
1091           1386   
1091           1387   Tone2:
1091 208406    1388            jb BUTTON_1, Tone2_2
1094 3084FD    1389            jnb BUTTON_1, $
1097 02123B    1390            ljmp TonePlayer1
109A           1391   Tone2_2:
109A 208506    1392            jb BUTTON_2, Tone2_3
109D 3085FD    1393            jnb BUTTON_2, $
10A0 0212E4    1394            ljmp TonePlayer2
10A3           1395   Tone2_3:
10A3 2086EB    1396            jb BUTTON_3, Tone2
10A6 3086FD    1397            jnb BUTTON_3, $
10A9 02134E    1398            ljmp TonePlayer3
10AC           1399            
10AC           1400   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10AC           1401   ToneC4:
10AC C000      1402            push ar0
10AE 785B      1402            mov r0, #high(C4_reload)
10B0 1200FA    1402            lcall ?ToneSetH
10B3 D000      1402            pop ar0
10B5 C000      1403            push ar0
10B7 781E      1403            mov r0, #low(C4_reload)
10B9 1200FF    1403            lcall ?ToneSetL
10BC D000      1403            pop ar0
10BE 22        1404            ret
10BF           1405   
10BF           1406   ToneD4:
10BF C000      1407            push ar0
10C1 786D      1407            mov r0, #high(D4_reload)
10C3 1200FA    1407            lcall ?ToneSetH
10C6 D000      1407            pop ar0
10C8 C000      1408            push ar0
10CA 7810      1408            mov r0, #low(D4_reload)
10CC 1200FF    1408            lcall ?ToneSetL
10CF D000      1408            pop ar0
10D1 22        1409            ret
10D2           1410   
10D2           1411   ToneE4:
10D2 C000      1412            push ar0
10D4 787D      1412            mov r0, #high(E4_reload)
10D6 1200FA    1412            lcall ?ToneSetH
10D9 D000      1412            pop ar0
10DB C000      1413            push ar0
10DD 7818      1413            mov r0, #low(E4_reload)
10DF 1200FF    1413            lcall ?ToneSetL
10E2 D000      1413            pop ar0
10E4 22        1414            ret
10E5           1415   
10E5           1416   ToneF4:
10E5 C000      1417            push ar0
10E7 7884      1417            mov r0, #high(F4_reload)
10E9 1200FA    1417            lcall ?ToneSetH
10EC D000      1417            pop ar0
10EE C000      1418            push ar0
10F0 7838      1418            mov r0, #low(F4_reload)
10F2 1200FF    1418            lcall ?ToneSetL
10F5 D000      1418            pop ar0
10F7 22        1419            ret
10F8           1420   
10F8           1421   ToneG4:
10F8 C000      1422            push ar0
10FA 7891      1422            mov r0, #high(G4_reload)
10FC 1200FA    1422            lcall ?ToneSetH
10FF D000      1422            pop ar0
1101 C000      1423            push ar0
1103 78CC      1423            mov r0, #low(G4_reload)
1105 1200FF    1423            lcall ?ToneSetL
1108 D000      1423            pop ar0
110A 22        1424            ret
110B           1425                    
110B           1426   ToneA4:
110B C000      1427            push ar0
110D 789D      1427            mov r0, #high(A4_reload)
110F 1200FA    1427            lcall ?ToneSetH
1112 D000      1427            pop ar0
1114 C000      1428            push ar0
1116 78D2      1428            mov r0, #low(A4_reload)
1118 1200FF    1428            lcall ?ToneSetL
111B D000      1428            pop ar0
111D 22        1429            ret
111E           1430            
111E           1431   ToneB4:
111E C000      1432            push ar0
1120 78A8      1432            mov r0, #high(B4_reload)
1122 1200FA    1432            lcall ?ToneSetH
1125 D000      1432            pop ar0
1127 C000      1433            push ar0
1129 788D      1433            mov r0, #low(B4_reload)
112B 1200FF    1433            lcall ?ToneSetL
112E D000      1433            pop ar0
1130 22        1434            ret
1131           1435   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1131           1436   ToneC5:
1131 C000      1437            push ar0
1133 78AD      1437            mov r0, #high(C5_reload)
1135 1200FA    1437            lcall ?ToneSetH
1138 D000      1437            pop ar0
113A C000      1438            push ar0
113C 7867      1438            mov r0, #low(C5_reload)
113E 1200FF    1438            lcall ?ToneSetL
1141 D000      1438            pop ar0
1143 22        1439            ret
1144           1440   
1144           1441   ToneD5:
1144 C000      1442            push ar0
1146 78B6      1442            mov r0, #high(D5_reload)
1148 1200FA    1442            lcall ?ToneSetH
114B D000      1442            pop ar0
114D C000      1443            push ar0
114F 7868      1443            mov r0, #low(D5_reload)
1151 1200FF    1443            lcall ?ToneSetL
1154 D000      1443            pop ar0
1156 22        1444            ret
1157           1445            
1157           1446   ToneE5:
1157 C000      1447            push ar0
1159 78BE      1447            mov r0, #high(E5_reload)
115B 1200FA    1447            lcall ?ToneSetH
115E D000      1447            pop ar0
1160 C000      1448            push ar0
1162 7873      1448            mov r0, #low(E5_reload)
1164 1200FF    1448            lcall ?ToneSetL
1167 D000      1448            pop ar0
1169 22        1449            ret
116A           1450            
116A           1451   ToneF5:
116A C000      1452            push ar0
116C 78C2      1452            mov r0, #high(F5_reload)
116E 1200FA    1452            lcall ?ToneSetH
1171 D000      1452            pop ar0
1173 C000      1453            push ar0
1175 781C      1453            mov r0, #low(F5_reload)
1177 1200FF    1453            lcall ?ToneSetL
117A D000      1453            pop ar0
117C 22        1454            ret
117D           1455            
117D           1456   ToneG5:
117D C000      1457            push ar0
117F 78C8      1457            mov r0, #high(G5_reload)
1181 1200FA    1457            lcall ?ToneSetH
1184 D000      1457            pop ar0
1186 C000      1458            push ar0
1188 78E6      1458            mov r0, #low(G5_reload)
118A 1200FF    1458            lcall ?ToneSetL
118D D000      1458            pop ar0
118F 22        1459            ret
1190           1460            
1190           1461   ToneA5:
1190 C000      1462            push ar0
1192 78CE      1462            mov r0, #high(A5_reload)
1194 1200FA    1462            lcall ?ToneSetH
1197 D000      1462            pop ar0
1199 C000      1463            push ar0
119B 78E9      1463            mov r0, #low(A5_reload)
119D 1200FF    1463            lcall ?ToneSetL
11A0 D000      1463            pop ar0
11A2 22        1464            ret
11A3           1465            
11A3           1466   ToneB5:
11A3 C000      1467            push ar0
11A5 78D4      1467            mov r0, #high(B5_reload)
11A7 1200FA    1467            lcall ?ToneSetH
11AA D000      1467            pop ar0
11AC C000      1468            push ar0
11AE 7847      1468            mov r0, #low(B5_reload)
11B0 1200FF    1468            lcall ?ToneSetL
11B3 D000      1468            pop ar0
11B5 22        1469            ret
11B6           1470   
11B6           1471   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11B6           1472   ToneG4F:
11B6 C000      1473            push ar0
11B8 788B      1473            mov r0, #high(G4F_reload)
11BA 1200FA    1473            lcall ?ToneSetH
11BD D000      1473            pop ar0
11BF C000      1474            push ar0
11C1 783F      1474            mov r0, #low(G4F_reload)
11C3 1200FF    1474            lcall ?ToneSetL
11C6 D000      1474            pop ar0
11C8 22        1475            ret
11C9           1476            
11C9           1477   ToneA4F:
11C9 C000      1478            push ar0
11CB 7897      1478            mov r0, #high(A4F_reload)
11CD 1200FA    1478            lcall ?ToneSetH
11D0 D000      1478            pop ar0
11D2 C000      1479            push ar0
11D4 78E8      1479            mov r0, #low(A4F_reload)
11D6 1200FF    1479            lcall ?ToneSetL
11D9 D000      1479            pop ar0
11DB 22        1480            ret
11DC           1481   
11DC           1482   ToneB4F:
11DC C000      1483            push ar0
11DE 78A3      1483            mov r0, #high(B4F_reload)
11E0 1200FA    1483            lcall ?ToneSetH
11E3 D000      1483            pop ar0
11E5 C000      1484            push ar0
11E7 784C      1484            mov r0, #low(B4F_reload)
11E9 1200FF    1484            lcall ?ToneSetL
11EC D000      1484            pop ar0
11EE 22        1485            ret
11EF           1486            
11EF           1487   ToneC5S:
11EF C000      1488            push ar0
11F1 78B2      1488            mov r0, #high(C5S_reload)
11F3 1200FA    1488            lcall ?ToneSetH
11F6 D000      1488            pop ar0
11F8 C000      1489            push ar0
11FA 7806      1489            mov r0, #low(C5S_reload)
11FC 1200FF    1489            lcall ?ToneSetL
11FF D000      1489            pop ar0
1201 22        1490            ret
1202           1491   
1202           1492   ToneD5F:
1202 C000      1493            push ar0
1204 78B2      1493            mov r0, #high(D5F_reload)
1206 1200FA    1493            lcall ?ToneSetH
1209 D000      1493            pop ar0
120B C000      1494            push ar0
120D 7806      1494            mov r0, #low(D5F_reload)
120F 1200FF    1494            lcall ?ToneSetL
1212 D000      1494            pop ar0
1214 22        1495            ret
1215           1496            
1215           1497   ToneE5F:
1215 C000      1498            push ar0
1217 78BA      1498            mov r0, #high(E5F_reload)
1219 1200FA    1498            lcall ?ToneSetH
121C D000      1498            pop ar0
121E C000      1499            push ar0
1220 788C      1499            mov r0, #low(E5F_reload)
1222 1200FF    1499            lcall ?ToneSetL
1225 D000      1499            pop ar0
1227 22        1500            ret
1228           1501   
1228           1502   ToneReset:
1228 C000      1503            push ar0
122A 78EA      1503            mov r0, #high(TIMER0_RELOAD)
122C 1200FA    1503            lcall ?ToneSetH
122F D000      1503            pop ar0
1231 C000      1504            push ar0
1233 78E8      1504            mov r0, #low(TIMER0_RELOAD)
1235 1200FF    1504            lcall ?ToneSetL
1238 D000      1504            pop ar0
123A 22        1505            ret
123B           1506   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
123B           1507   TonePlayer1: ;Never Gonna Give You Up
123B 1211C9    1508            lcall ToneA4F              ;Nev
123E 1213C1    1509            lcall TonePlayEighthSec
1241           1510            
1241 1211DC    1511            lcall ToneB4F               ;er
1244 1213C1    1512            lcall TonePlayEighthSec
1247           1513            
1247 121202    1514            lcall ToneD5F               ;gon
124A 1213C1    1515            lcall TonePlayEighthSec
124D           1516            
124D 1211DC    1517            lcall ToneB4F                 ;na
1250 1213C1    1518            lcall TonePlayEighthSec
1253           1519            
1253 12116A    1520            lcall ToneF5                     ;give
1256 1213EF    1521            lcall TonePlayThreeEighthSec
1259           1522            
1259 12116A    1523            lcall ToneF5                    ;you
125C 1213EF    1524            lcall TonePlayThreeEighthSec
125F           1525            
125F 121215    1526            lcall ToneE5F                   ;up
1262 1213EF    1527            lcall TonePlayThreeEighthSec   
1265           1528            
1265 C002      1529            push AR2
1267 7A50      1529            mov R2, #80
1269 120039    1529            lcall ?Wait_Milli_Seconds
126C D002      1529            pop AR2
126E           1530            
126E 1211C9    1531            lcall ToneA4F                ;Nev
1271 1213C1    1532            lcall TonePlayEighthSec
1274           1533            
1274 1211DC    1534            lcall ToneB4F                 ;er
1277 1213C1    1535            lcall TonePlayEighthSec
127A           1536            
127A 121131    1537            lcall ToneC5                   ;gon
127D 1213C1    1538            lcall TonePlayEighthSec
1280           1539            
1280 1211C9    1540            lcall ToneA4F                  ;na
1283 1213C1    1541            lcall TonePlayEighthSec
1286           1542            
1286 121215    1543            lcall ToneE5F                    ;let
1289 1213EF    1544            lcall TonePlayThreeEighthSec
128C           1545            
128C 121215    1546            lcall ToneE5F                   ;you
128F 1213EF    1547            lcall TonePlayThreeEighthSec
1292           1548            
1292 121202    1549            lcall ToneD5F                  ;down
1295 1213EF    1550            lcall TonePlayThreeEighthSec
1298           1551            
1298 C002      1552            push AR2
129A 7A50      1552            mov R2, #80
129C 120039    1552            lcall ?Wait_Milli_Seconds
129F D002      1552            pop AR2
12A1           1553                    
12A1 1211C9    1554            lcall ToneA4F              ;Nev
12A4 1213C1    1555            lcall TonePlayEighthSec
12A7           1556            
12A7 1211DC    1557            lcall ToneB4F                ;er
12AA 1213C1    1558            lcall TonePlayEighthSec
12AD           1559            
12AD 121202    1560            lcall ToneD5F                   ;gon
12B0 1213C1    1561            lcall TonePlayEighthSec
12B3           1562            
12B3 1211DC    1563            lcall ToneB4F                   ;na
12B6 1213C1    1564            lcall TonePlayEighthSec
12B9           1565   
12B9 121202    1566            lcall ToneD5F                 ;run
12BC 1213D8    1567            lcall TonePlayQuarterSec
12BF           1568            
12BF 121215    1569            lcall ToneE5F                  ;a
12C2 1213EF    1570            lcall TonePlayThreeEighthSec
12C5           1571            
12C5 121131    1572            lcall ToneC5                   ;round
12C8 1213EF    1573            lcall TonePlayThreeEighthSec
12CB           1574            
12CB           1575            ;lcall ToneB4F
12CB           1576            ;lcall TonePlayEighthSec
12CB           1577            
12CB 1211C9    1578            lcall ToneA4F                ;and
12CE 1213D8    1579            lcall TonePlayQuarterSec        
12D1           1580            
12D1 1211C9    1581            lcall ToneA4F                ;de
12D4 1213C1    1582            lcall TonePlayEighthSec
12D7           1583            
12D7 121215    1584            lcall ToneE5F                  ;sert
12DA 1213EF    1585            lcall TonePlayThreeEighthSec
12DD           1586            
12DD 121202    1587            lcall ToneD5F             ;you
12E0 1213EF    1588            lcall TonePlayThreeEighthSec
12E3           1589            
12E3 22        1590            ret
12E4           1591   
12E4           1592   TonePlayer2: ;Mario
12E4 121157    1593            lcall ToneE5
12E7 1213D8    1594            lcall TonePlayQuarterSec
12EA           1595            
12EA 121157    1596            lcall ToneE5
12ED 1213D8    1597            lcall TonePlayQuarterSec
12F0           1598            
12F0 C002      1599            push AR2
12F2 7A50      1599            mov R2, #80
12F4 120039    1599            lcall ?Wait_Milli_Seconds
12F7 D002      1599            pop AR2
12F9           1600                    
12F9 121157    1601            lcall ToneE5
12FC 1213EF    1602            lcall TonePlayThreeEighthSec
12FF           1603   
12FF C002      1604            push AR2
1301 7A50      1604            mov R2, #80
1303 120039    1604            lcall ?Wait_Milli_Seconds
1306 D002      1604            pop AR2
1308           1605                    
1308 121131    1606            lcall ToneC5
130B 1213D8    1607            lcall TonePlayQuarterSec
130E           1608            
130E 121157    1609            lcall ToneE5
1311 1213D8    1610            lcall TonePlayQuarterSec
1314           1611            
1314 C002      1612            push AR2
1316 7A50      1612            mov R2, #80
1318 120039    1612            lcall ?Wait_Milli_Seconds
131B D002      1612            pop AR2
131D           1613            
131D 12117D    1614            lcall ToneG5
1320 1213EF    1615            lcall TonePlayThreeEighthSec
1323           1616            
1323 C002      1617            push AR2
1325 7A50      1617            mov R2, #80
1327 120039    1617            lcall ?Wait_Milli_Seconds
132A D002      1617            pop AR2
132C C002      1618            push AR2
132E 7A50      1618            mov R2, #80
1330 120039    1618            lcall ?Wait_Milli_Seconds
1333 D002      1618            pop AR2
1335 C002      1619            push AR2
1337 7A50      1619            mov R2, #80
1339 120039    1619            lcall ?Wait_Milli_Seconds
133C D002      1619            pop AR2
133E C002      1620            push AR2
1340 7A50      1620            mov R2, #80
1342 120039    1620            lcall ?Wait_Milli_Seconds
1345 D002      1620            pop AR2
1347           1621            
1347 1210F8    1622            lcall ToneG4
134A 121406    1623            lcall TonePlayHalfSec
134D           1624            
134D 22        1625            ret
134E           1626   
134E           1627   TonePlayer3: ;Star Wars
134E 1210AC    1628            lcall ToneC4
1351 121406    1629            lcall TonePlayHalfSec
1354           1630            
1354 1210F8    1631            lcall ToneG4
1357 121406    1632            lcall TonePlayHalfSec
135A           1633            
135A 1210E5    1634            lcall ToneF4
135D 1213D8    1635            lcall TonePlayQuarterSec
1360           1636            
1360 1210D2    1637            lcall ToneE4
1363 1213EF    1638            lcall TonePlayThreeEighthSec
1366           1639            
1366 1210BF    1640            lcall ToneD4
1369 1213EF    1641            lcall TonePlayThreeEighthSec
136C           1642            
136C 121131    1643            lcall ToneC5
136F 121406    1644            lcall TonePlayHalfSec
1372           1645                    
1372 1210F8    1646            lcall ToneG4
1375 1213D8    1647            lcall TonePlayQuarterSec
1378           1648            
1378 C002      1649            push AR2
137A 7A50      1649            mov R2, #80
137C 120039    1649            lcall ?Wait_Milli_Seconds
137F D002      1649            pop AR2
1381           1650                    
1381 1210E5    1651            lcall ToneF4
1384 1213D8    1652            lcall TonePlayQuarterSec
1387           1653            
1387 1210D2    1654            lcall ToneE4
138A 1213D8    1655            lcall TonePlayQuarterSec
138D           1656            
138D 1210BF    1657            lcall ToneD4
1390 1213D8    1658            lcall TonePlayQuarterSec
1393           1659            
1393 121131    1660            lcall ToneC5
1396 121406    1661            lcall TonePlayHalfSec
1399           1662            
1399 1210F8    1663            lcall ToneG4
139C 1213D8    1664            lcall TonePlayQuarterSec
139F           1665            
139F C002      1666            push AR2
13A1 7A50      1666            mov R2, #80
13A3 120039    1666            lcall ?Wait_Milli_Seconds
13A6 D002      1666            pop AR2
13A8           1667                    
13A8 1210E5    1668            lcall ToneF4
13AB 1213D8    1669            lcall TonePlayQuarterSec
13AE           1670            
13AE 1210D2    1671            lcall ToneE4
13B1 1213D8    1672            lcall TonePlayQuarterSec
13B4           1673            
13B4 1210E5    1674            lcall ToneF4
13B7 1213D8    1675            lcall TonePlayQuarterSec
13BA           1676            
13BA 1210BF    1677            lcall ToneD4
13BD 121406    1678            lcall TonePlayHalfSec
13C0           1679            
13C0 22        1680            ret
13C1           1681   
13C1           1682   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13C1           1683   TonePlayEighthSec:
13C1 D28C      1684            setb TR0
13C3 C002      1685            push AR2
13C5 7A01      1685            mov R2, #0x1
13C7 120104    1685            lcall ?Delay_PercentSec
13CA D002      1685            pop AR2   ; 1*(1/8) = 1/8 sec
13CC C28C      1686            clr TR0
13CE C002      1687            push AR2
13D0 7A50      1687            mov R2, #80
13D2 120039    1687            lcall ?Wait_Milli_Seconds
13D5 D002      1687            pop AR2
13D7 22        1688            ret
13D8           1689   
13D8           1690   TonePlayQuarterSec:
13D8 D28C      1691            setb TR0
13DA C002      1692            push AR2
13DC 7A02      1692            mov R2, #0x2
13DE 120104    1692            lcall ?Delay_PercentSec
13E1 D002      1692            pop AR2   ; 2*(1/8) = 1/4 sec
13E3 C28C      1693            clr TR0
13E5 C002      1694            push AR2
13E7 7A50      1694            mov R2, #80
13E9 120039    1694            lcall ?Wait_Milli_Seconds
13EC D002      1694            pop AR2
13EE 22        1695            ret
13EF           1696   
13EF           1697   TonePlayThreeEighthSec:
13EF D28C      1698            setb TR0
13F1 C002      1699            push AR2
13F3 7A03      1699            mov R2, #0x3
13F5 120104    1699            lcall ?Delay_PercentSec
13F8 D002      1699            pop AR2   ; 3*(1/8) = 3/8 sec
13FA C28C      1700            clr TR0
13FC C002      1701            push AR2
13FE 7A50      1701            mov R2, #80
1400 120039    1701            lcall ?Wait_Milli_Seconds
1403 D002      1701            pop AR2
1405 22        1702            ret
1406           1703   
1406           1704   TonePlayHalfSec:
1406 D28C      1705            setb TR0
1408 C002      1706            push AR2
140A 7A04      1706            mov R2, #0x4
140C 120104    1706            lcall ?Delay_PercentSec
140F D002      1706            pop AR2   ; 4*(1/8) = 1/2 sec
1411 C28C      1707            clr TR0
1413 C002      1708            push AR2
1415 7A50      1708            mov R2, #80
1417 120039    1708            lcall ?Wait_Milli_Seconds
141A D002      1708            pop AR2
141C 22        1709            ret
141D           1710   
141D           1711   TonePlayOneSec:
141D D28C      1712            setb TR0
141F C002      1713            push AR2
1421 7A08      1713            mov R2, #0x8
1423 120104    1713            lcall ?Delay_PercentSec
1426 D002      1713            pop AR2   ; 8*(1/8) = 1 sec
1428 C28C      1714            clr TR0
142A C002      1715            push AR2
142C 7A50      1715            mov R2, #80
142E 120039    1715            lcall ?Wait_Milli_Seconds
1431 D002      1715            pop AR2
1433 22        1716            ret
1434           1717   
1434           1718   TonePlayOneandHalfSec:
1434 D28C      1719            setb TR0
1436 C002      1720            push AR2
1438 7A12      1720            mov R2, #0x12
143A 120104    1720            lcall ?Delay_PercentSec
143D D002      1720            pop AR2   ; 12*(1/8) = 1.5 sec
143F C28C      1721            clr TR0
1441 C002      1722            push AR2
1443 7A50      1722            mov R2, #80
1445 120039    1722            lcall ?Wait_Milli_Seconds
1448 D002      1722            pop AR2
144A 22        1723            ret     
144B           1724            
144B           1725   
144B           1726   EN
