                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
<<<<<<< HEAD
0000             67   RH0            DATA 0xf3
0000             68   RTL1           DATA 0xf4
=======
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
<<<<<<< HEAD
0000 0205CE       3      ljmp MainProgram
=======
0000 020585       3      ljmp MainProgram
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096       ;reference at LM4040
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
<<<<<<< HEAD
0003             15   BEEPER EQU P3.7 ; placeholder pin for beeper
=======
0003             15   BEEPER EQU P2.4 ; placeholder pin for beeper
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
0003             16   
0003             17   SEGA equ P2.4
0003             18   SEGB equ P2.5
0003             19   SEGC equ P2.6
0003             20   SEGD equ P2.7
0003             21   SEGE equ P4.5
0003             22   SEGF equ P4.4
0003             23   SEGG equ P0.7
0003             24   CA1  equ P0.1
0003             25   CA2  equ P0.2
0003             26   CA3  equ P0.0
0003             27   
0003             28   TIMER0_RELOAD_L DATA 0xf2
0003             29   TIMER1_RELOAD_L DATA 0xf3
0003             30   TIMER0_RELOAD_H DATA 0xf4
0003             31   TIMER1_RELOAD_H DATA 0xf5
0003             32   
0003             33   TIMER0_RATE   EQU 4096             ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0003             34   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             35   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0003             36   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0003             37   
<<<<<<< HEAD
0003             38   C4                        EQU 262
0003             39   D4                EQU 294
0003             40   E4                        EQU 330
0003             41   F4                        EQU 349
0003             42   G4                        EQU 392
0003             43   A4                        EQU 440
0003             44   B4                EQU 494
0003             45   
0003             46   C5                        EQU 523
0003             47   D5                EQU 587
0003             48   E5                        EQU 659
0003             49   F5                        EQU 698
0003             50   G5                        EQU 784
0003             51   A5                        EQU 880
0003             52   B5                EQU 988
0003             53   
0003             54   G4F                       EQU 370
0003             55   A4F                       EQU 415
0003             56   B4F                       EQU 466
0003             57   C5S                       EQU 554
0003             58   D5F                       EQU 554
0003             59   E5F                       EQU 622
0003             60   
0003             61   C4_reload        EQU ((65536-(CLK/(2*C4))))
0003             62   D4_reload   EQU ((65536-(CLK/(2*D4))))
0003             63   E4_reload        EQU ((65536-(CLK/(2*E4))))
0003             64   F4_reload        EQU ((65536-(CLK/(2*F4))))
0003             65   G4_reload        EQU ((65536-(CLK/(2*G4))))
0003             66   A4_reload        EQU ((65536-(CLK/(2*A4))))
0003             67   B4_reload        EQU ((65536-(CLK/(2*B4))))
0003             68   
0003             69   C5_reload        EQU ((65536-(CLK/(2*C5))))
0003             70   D5_reload   EQU ((65536-(CLK/(2*D5))))
0003             71   E5_reload        EQU ((65536-(CLK/(2*E5))))
0003             72   F5_reload        EQU ((65536-(CLK/(2*F5))))
0003             73   G5_reload        EQU ((65536-(CLK/(2*G5))))
0003             74   A5_reload        EQU ((65536-(CLK/(2*A5))))
0003             75   B5_reload        EQU ((65536-(CLK/(2*B5))))
0003             76   
0003             77   G4F_reload       EQU ((65536-(CLK/(2*G4F))))
0003             78   A4F_reload       EQU ((65536-(CLK/(2*A4F))))
0003             79   B4F_reload       EQU ((65536-(CLK/(2*B4F))))
0003             80   C5S_reload       EQU ((65536-(CLK/(2*C5S))))
0003             81   D5F_reload       EQU ((65536-(CLK/(2*D5F))))
0003             82   E5F_reload       EQU ((65536-(CLK/(2*E5F))))
0003             83   
0003             84   ; buttons
0003             85   BOOT_BUTTON   equ P4.5
0003             86   
0003             87   ; External interrupt 0 vector (not used in this code)
0003             88   org 0x0003
0003 32          89            reti
0004             90   
0004             91   ; Timer/Counter 0 overflow interrupt vector
000B             92   org 0x000B
000B 02048C      93            ljmp Timer0_ISR
000E             94   
000E             95   ; External interrupt 1 vector (not used in this code)
0013             96   org 0x0013
0013 32          97            reti
0014             98   
0014             99   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            100   org 0x001B
001B 32         101            reti
001C            102   
001C            103   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            104   org 0x0023 
0023 32         105            reti
0024            106            
0024            107   ; Timer/Counter 2 overflow interrupt vector
002B            108   org 0x002B
002B 0204A8     109            ljmp Timer2_ISR
002E            110            
0030            111   dseg at 0x30
0030            112   ;future variables
0030            113   x:   ds 4
0034            114   y:   ds 4
0038            115   bcd: ds 5
003D            116   Result: ds 2
003F            117   coldtemp: ds 1
0040            118   hottemp:ds 4
0044            119   soaktemp: ds 1
0045            120   soaktime: ds 1
0046            121   reflowtemp: ds 1
0047            122   reflowtime: ds 1
0048            123   countererror: ds 1
0049            124   temperature:ds 4
004D            125   Count1ms:     ds 2 ; Used to determine when half second has passed 
004F            126   reflowparam: ds 1
0050            127   second: ds 1
0051            128   minute: ds 1
0052            129   temp: ds 1
0053            130   count: ds 1
0054            131   Disp1:  ds 1 
0055            132   Disp2:  ds 1
0056            133   Disp3:  ds 1
0057            134   state:  ds 1
0058            135   
0000            136   BSEG
0000            137   startflag: dbit 1
0001            138   errorflag: dbit 1
0002            139   mf: dbit 1
0003            140   
002E            141   CSEG
002E            142   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E            143   LCD_RS equ P1.1
002E            144   LCD_RW equ P1.2
002E            145   LCD_E  equ P1.3
002E            146   LCD_D4 equ P3.2
002E            147   LCD_D5 equ P3.3
002E            148   LCD_D6 equ P3.4
002E            149   LCD_D7 equ P3.5
002E            150   
002E            151   StartButton equ P0.3
002E            152   BUTTON_1 equ P0.4
002E            153   BUTTON_2 equ P0.5
002E            154   BUTTON_3 equ P0.6
002E            155   OvenButton equ P3.6
002E            156   
002E            157   
                159   $LIST
011F            161   
                546   $LIST
                163   $LIST
038F            165   
038F            166   
038F            167   ; constant strings  
038F 54656D70   168   Test_msg:  db 'Temp:xx.xx*C', 0
     3A78782E
     78782A43
     00
039C 312E536F   169   MenuMessage1: db '1.Soak Temp', 0   ;used when selecting parameter
     616B2054
     656D7000
03A8 322E536F   170   MenuMessage2: db '2.Soak Time', 0
     616B2054
     696D6500
03B4 332E5265   171   MenuMessage3: db '3.Reflow Temp', 0
     666C6F77
     2054656D
     7000
03C2 342E5265   172   MenuMessage4: db '4.Reflow Time', 0
     666C6F77
     2054696D
     6500
03D0 536F616B   173   MenuSoakTemp: db 'Soak Temp:', 0  ;used when changing parameter
     2054656D
     703A00
03DB 536F616B   174   MenuSoakTime: db 'Soak Time:', 0
     2054696D
     653A00
03E6 5265666C   175   MenuReflowTemp: db 'Reflow Temp:', 0
     6F772054
     656D703A
     00
03F3 5265666C   176   MenuReflowTime: db 'Reflow Time:', 0
     6F772054
     696D653A
     00
0400 5265666C   177   ReflowStateMess: db 'Reflow State    ', 0
=======
0003             38   ; buttons
0003             39   BOOT_BUTTON   equ P4.5
0003             40   
0003             41   ; External interrupt 0 vector (not used in this code)
0003             42   org 0x0003
0003 32          43            reti
0004             44   
0004             45   ; Timer/Counter 0 overflow interrupt vector
000B             46   org 0x000B
000B 020445      47            ljmp Timer0_ISR
000E             48   
000E             49   ; External interrupt 1 vector (not used in this code)
0013             50   org 0x0013
0013 32          51            reti
0014             52   
0014             53   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             54   org 0x001B
001B 32          55            reti
001C             56   
001C             57   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             58   org 0x0023 
0023 32          59            reti
0024             60            
0024             61   ; Timer/Counter 2 overflow interrupt vector
002B             62   org 0x002B
002B 02045F      63            ljmp Timer2_ISR
002E             64            
0030             65   dseg at 0x30
0030             66   ;future variables
0030             67   x:   ds 4
0034             68   y:   ds 4
0038             69   bcd: ds 5
003D             70   Result: ds 2
003F             71   coldtemp: ds 1
0040             72   hottemp:ds 4
0044             73   soaktemp: ds 1
0045             74   soaktime: ds 1
0046             75   reflowtemp: ds 1
0047             76   reflowtime: ds 1
0048             77   countererror: ds 1
0049             78   temperature:ds 4
004D             79   Count1ms:     ds 2 ; Used to determine when half second has passed 
004F             80   reflowparam: ds 1
0050             81   second: ds 1
0051             82   minute: ds 1
0052             83   temp: ds 1
0053             84   count: ds 1
0054             85   Disp1:  ds 1 
0055             86   Disp2:  ds 1
0056             87   Disp3:  ds 1
0057             88   state:  ds 1
0058             89   
0000             90   BSEG
0000             91   startflag: dbit 1
0001             92   errorflag: dbit 1
0002             93   mf: dbit 1
0003             94   
002E             95   CSEG
002E             96   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             97   LCD_RS equ P1.1
002E             98   LCD_RW equ P1.2
002E             99   LCD_E  equ P1.3
002E            100   LCD_D4 equ P3.2
002E            101   LCD_D5 equ P3.3
002E            102   LCD_D6 equ P3.4
002E            103   LCD_D7 equ P3.5
002E            104   
002E            105   StartButton equ P0.3
002E            106   BUTTON_1 equ P0.4
002E            107   BUTTON_2 equ P0.5
002E            108   BUTTON_3 equ P0.6
002E            109   OvenButton equ P3.6
002E            110   
002E            111   
                113   $LIST
00FA            115   
                546   $LIST
                117   $LIST
036A            119   
036A            120   
036A            121   ; constant strings  
036A 54656D70   122   Test_msg:  db 'Temp:xx.xx*C', 0
     3A78782E
     78782A43
     00
0377 312E536F   123   MenuMessage1: db '1.Soak Temp', 0   ;used when selecting parameter
     616B2054
     656D7000
0383 322E536F   124   MenuMessage2: db '2.Soak Time', 0
     616B2054
     696D6500
038F 332E5265   125   MenuMessage3: db '3.Reflow Temp', 0
     666C6F77
     2054656D
     7000
039D 342E5265   126   MenuMessage4: db '4.Reflow Time', 0
     666C6F77
     2054696D
     6500
03AB 536F616B   127   MenuSoakTemp: db 'Soak Temp:', 0  ;used when changing parameter
     2054656D
     703A00
03B6 536F616B   128   MenuSoakTime: db 'Soak Time:', 0
     2054696D
     653A00
03C1 5265666C   129   MenuReflowTemp: db 'Reflow Temp:', 0
     6F772054
     656D703A
     00
03CE 5265666C   130   MenuReflowTime: db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03DB 5265666C   131   ReflowStateMess: db 'Reflow State    ', 0
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
     6F772053
     74617465
     20202020
     00
<<<<<<< HEAD
0411 536F616B   178   SoakState: db 'Soak State      ', 0
=======
03EC 536F616B   132   SoakState: db 'Soak State      ', 0
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
     20537461
     74652020
     20202020
     00
<<<<<<< HEAD
0422 54656D70   179   TemperatureRise: db 'Temp. Increase  ',0
=======
03FD 54656D70   133   TemperatureRise: db 'Temp. Increase  ',0
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
     2E20496E
     63726561
     73652020
     00
<<<<<<< HEAD
0433 4F76656E   180   CoolingTemp: db 'Oven is cooling.',0
=======
040E 4F76656E   134   CoolingTemp: db 'Oven is cooling.',0
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
     20697320
     636F6F6C
     696E672E
     00
<<<<<<< HEAD
0444 31537572   181   Tone_Message1:     db '1Surprise 2Mario', 0
     70726973
     6520324D
     6172696F
     00
0455 20202033   182   Tone_Message2:     db '   3Star Wars   ', 0
     53746172
     20576172
     73202020
     00
0466            183   
0466 20202020   184   Blank: db '              ',0
     20202020
     20202020
     202000
0475            185   
0475            186   ;---------------------------------;
0475            187   ; Routine to initialize the ISR   ;
0475            188   ; for timer 0                     ;
0475            189   ;---------------------------------;
0475            190   
0475            191   Timer0_Init:
0475 E589       192            mov a, TMOD
0477 54F0       193            anl a, #0xf0 ; Clear the bits for timer 0
0479 4401       194            orl a, #0x01 ; Configure timer 0 as 16-timer
047B F589       195            mov TMOD, a
047D 758CEA     196            mov TH0, #high(TIMER0_RELOAD)
0480 758AE8     197            mov TL0, #low(TIMER0_RELOAD)
0483            198            ; Set autoreload value
0483 75F4EA     199            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0486 75F2E8     200            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0489            201            ; Enable the timer and interrupts
0489 D2A9       202       setb ET0  ; Enable timer 0 interrupt
048B            203       ;setb TR0  ; Start timer 0
048B 22         204            ret
048C            205   
048C            206   ;---------------------------------;
048C            207   ; ISR for timer 0.  Set to execute;
048C            208   ; every 1/4096Hz to generate a    ;
048C            209   ; 2048 Hz square wave at pin P3.7 ;
048C            210   ;---------------------------------;
048C            211   
048C            212   Timer0_ISR:
048C B2B7       213            cpl BEEPER
048E 32         214            reti
048F            215     
048F            216   ;---------------------------------;
048F            217   ; Routine to initialize the ISR   ;
048F            218   ; for timer 2                     ;
048F            219   ;---------------------------------;
048F            220   Timer2_Init:
048F 75C800     221            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0492 75CDA9     222            mov TH2, #high(TIMER2_RELOAD)
0495 75CC9A     223            mov TL2, #low(TIMER2_RELOAD)
0498            224            ; Set the reload value
0498 75CBA9     225            mov RCAP2H, #high(TIMER2_RELOAD)
049B 75CA9A     226            mov RCAP2L, #low(TIMER2_RELOAD)
049E            227            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
049E E4         228            clr a
049F F54D       229            mov Count1ms+0, a
04A1 F54E       230            mov Count1ms+1, a
04A3            231            ; Enable the timer and interrupts
04A3 D2AD       232       setb ET2  ; Enable timer 2 interrupt
04A5 D2CA       233       setb TR2  ; Enable timer 2
04A7 22         234            ret
04A8            235   
04A8            236   ;---------------------------------;
04A8            237   ; ISR for timer 2                 ;
04A8            238   ;---------------------------------;
04A8            239   Timer2_ISR:
04A8 C2CF       240            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
04AA B2B6       241            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
04AC            242            
04AC            243            ; The two registers used in the ISR must be saved in the stack
04AC C0E0       244            push acc
04AE C0D0       245            push psw
04B0            246            
04B0 D281       247            setb CA1
04B2 D282       248            setb CA2
04B4 D280       249            setb CA3
04B6            250   
04B6 E557       251            mov a, state
04B8            252   state0:
04B8 B4000B     253            cjne a, #0, state1
04BB E554       254            mov a, disp1
04BD 120509     255            lcall load_segments
04C0 C281       256            clr CA1
04C2 0557       257            inc state
04C4 8020       258            sjmp state_done
04C6            259   state1:
04C6 B4010B     260            cjne a, #1, state2
04C9 E555       261            mov a, disp2
04CB 120509     262            lcall load_segments
04CE C282       263            clr CA2
04D0 0557       264            inc state
04D2 8012       265            sjmp state_done
04D4            266   state2:
04D4 B4020C     267            cjne a, #2, state_reset
04D7 E556       268            mov a, disp3
04D9 120509     269            lcall load_segments
04DC C280       270            clr CA3
04DE 755700     271            mov state, #0
04E1 8003       272            sjmp state_done
04E3            273   state_reset:
04E3 755700     274            mov state, #0
04E6            275   state_done:
04E6            276            ; Increment the 16-bit one mili second counter
04E6 054D       277            inc Count1ms+0    ; Increment the low 8-bits first
04E8 E54D       278            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04EA 7002       279            jnz Inc_Done
04EC 054E       280            inc Count1ms+1
04EE            281   
04EE            282     Inc_Done:
04EE            283            ; Check if half second has passed
04EE E54D       284            mov a, Count1ms+0
04F0 B4E811     285            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04F3 E54E       286            mov a, Count1ms+1
04F5 B4030C     287            cjne a, #high(1000), Timer2_ISR_done
04F8            288            
04F8            289       ; cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
04F8            290       ; where is halfsecondflag?                                   
04F8            291                                            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
04F8 E4         292            clr a
04F9 F54D       293            mov Count1ms+0, a
04FB F54E       294            mov Count1ms+1, a
04FD            295     
04FD E550       296            mov a, second   ; Increment the BCD counter
04FF            297   
04FF 2401       298            add a, #0x01 ;THIS IS ADDING SECONDS
0501            299   
0501 D4         300            da a ; Decimal adjust instruction.  Check datasheet for more details!
0502 F550       301            mov second, a
0504            302            
0504            303   Timer2_ISR_done:
0504 D0D0       304            pop psw
0506 D0E0       305            pop acc
0508 32         306            reti
0509            307   
0509            308   load_segments:
0509 A2E0       309            mov c, acc.0
050B 92A4       310            mov SEGA, c
050D A2E1       311            mov c, acc.1
050F 92A5       312            mov SEGB, c
0511 A2E2       313            mov c, acc.2
0513 92A6       314            mov SEGC, c
0515 A2E3       315            mov c, acc.3
0517 92A7       316            mov SEGD, c
0519 A2E4       317            mov c, acc.4
051B 92C5       318            mov SEGE, c
051D A2E5       319            mov c, acc.5
051F 92C4       320            mov SEGF, c
0521 A2E6       321            mov c, acc.6
0523 9287       322            mov SEGG, c
0525 A2E7       323            mov c, acc.7
0527            324            ;mov SEGP, c
0527 22         325            ret  
0528            326   ;---------------------------------;
0528            327   ; initialize the slave                 ;
0528            328   ;---------------------------------;
0528            329   
0528            330   INIT_SPI:
0528 D2A2       331    setb MY_MISO ; Make MISO an input pin
052A C2A3       332    clr MY_SCLK ; For mode (0,0) SCLK is zero
052C 22         333    ret
052D            334   
052D            335   ;---------------------------------;
052D            336   ; receive and send data                          ;
052D            337   ;---------------------------------;
052D            338   
052D            339   DO_SPI_G:
052D C0E0       340             push acc
052F 7900       341             mov R1, #0 ; Received byte stored in R1
0531 7A08       342             mov R2, #8 ; Loop counter (8-bits)
0533            343   DO_SPI_G_LOOP:
0533 E8         344             mov a, R0 ; Byte to write is in R0
0534 33         345             rlc a ; Carry flag has bit to write
0535 F8         346             mov R0, a
0536 92A1       347             mov MY_MOSI, c
0538 D2A3       348             setb MY_SCLK ; Transmit
053A A2A2       349             mov c, MY_MISO ; Read received bit
053C E9         350             mov a, R1 ; Save received bit in R1
053D 33         351             rlc a
053E F9         352             mov R1, a
053F C2A3       353             clr MY_SCLK
0541 DAF0       354             djnz R2, DO_SPI_G_LOOP
0543 D0E0       355             pop acc
0545 22         356             ret
0546            357   
0546            358   ; Send a character using the serial port
0546            359   putchar1:
0546 3099FD     360       jnb TI, putchar1
0549 C299       361       clr TI
054B F599       362       mov SBUF, a
054D 22         363       ret
054E            364   
054E            365   ; Send a constant-zero-terminated string using the serial port
054E            366   SendString:
054E E4         367       clr A
054F 93         368       movc A, @A+DPTR
0550 6006       369       jz SendStringDone
0552 120546     370       lcall putchar1
0555 A3         371       inc DPTR
0556 80F6       372       sjmp SendString
0558            373   SendStringDone:
0558 22         374       ret
0559            375   
0559            376   Display_10_digit_BCD:
0559 C0E0       377            push acc
055B 7406       377            mov a, #6
055D 14         377            dec a
055E 1200C1     377            lcall ?Set_Cursor_1 ; Select column and row
0561 D0E0       377            pop acc
0563 C000       378            push ar0
0565 A83C       378            mov r0, bcd+4
0567 1200C6     378            lcall ?Display_BCD
056A D000       378            pop ar0
056C C000       379            push ar0
056E A83B       379            mov r0, bcd+3
0570 1200C6     379            lcall ?Display_BCD
0573 D000       379            pop ar0
0575 C000       380            push ar0
0577 A83A       380            mov r0, bcd+2
0579 1200C6     380            lcall ?Display_BCD
057C D000       380            pop ar0
057E C000       381            push ar0
0580 A839       381            mov r0, bcd+1
0582 1200C6     381            lcall ?Display_BCD
0585 D000       381            pop ar0
0587 C000       382            push ar0
0589 A838       382            mov r0, bcd+0
058B 1200C6     382            lcall ?Display_BCD
058E D000       382            pop ar0
0590 22         383            ret
0591            384            
0591            385   ;---------------------------------;
0591            386   ; initialize the serial ports     ;
0591            387   ;---------------------------------;
0591            388   InitSerialPort:
0591            389       ; Since the reset button bounces, we need to wait a bit before
0591            390       ; sending messages, otherwise we risk displaying gibberish!
0591 79DE       391       mov R1, #222
0593 78A6       392       mov R0, #166
0595 D8FE       393       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0597 D9FA       394       djnz R1, $-4 ; 22.51519us*222=4.998ms
0599            395       ; Now we can proceed with the configuration
0599 438780     396            orl     PCON,#0x80
059C 759852     397            mov     SCON,#0x52
059F 759B00     398            mov     BDRCON,#0x00
05A2 759AF4     399            mov     BRL,#BRG_VAL
05A5 759B1E     400            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
05A8 22         401       ret
05A9            402    
05A9            403   ; CODE FOR DISPLAYING 7SEG 
05A9            404     display7seg:
05A9            405                    ; ones digit disp 2
05A9 9005C4     406            mov dptr, #HEX_7SEG
05AC E538       407            mov a, bcd+0
05AE 540F       408            anl a, #0x0f
05B0 93         409            movc a, @a+dptr
05B1 F555       410            mov disp2, a
05B3            411            
05B3            412            ;tens digit disp3
05B3 E538       413            mov a, bcd+0
05B5 C4         414            swap a
05B6 540F       415            anl a, #0x0f
05B8 93         416            movc a, @a+dptr
05B9 F556       417            mov disp3, a
05BB            418            
05BB            419            ;hundreds digit disp1
05BB E4         420            clr a
05BC            421            
05BC E539       422            mov a, bcd+1
05BE            423            ;swap a
05BE 540F       424            anl a, #0x0f
05C0 93         425            movc a, @a+dptr
05C1            426            
05C1 F554       427            mov disp1, a
05C3            428            
05C3 22         429            ret
05C4            430    ;---------------------------------;
05C4            431   ; MAIN PROGRAM                                                         ;
05C4            432   ;---------------------------------;  
05C4            433   
05C4 C0F9A4B0   434   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
05CE            435   
05CE            436   MainProgram:
05CE 75817F     437            mov sp, #07FH ; Initialize the stack pointer
05D1            438            ; Configure P0 in bidirectional mode
05D1 75E600     439       mov P0M0, #0
05D4 75E700     440       mov P0M1, #0
05D7 D2AF       441       setb EA 
05D9 120088     442       lcall LCD_4BIT
05DC 754400     443       mov soaktemp, #0
05DF            444       
05DF 754500     445       mov soaktime, #0
05E2            446   
05E2 754600     447       mov reflowtemp, #0
05E5            448      
05E5 754700     449       mov reflowtime, #0
05E8            450   
05E8 755000     451       mov second, #0
05EB            452      ; mov countererror, #0        ; to check if the thermocouple is in the oven
05EB            453                    
05EB            454       ;initial message 
05EB            455      ; Set_Cursor(1, 1)
05EB            456      ; Send_Constant_String(#Test_msg)
05EB            457      ; Set_Cursor(1,11)
05EB            458      ; WriteData(#223) ; print the degree sign   
05EB 755300     459       mov count, #0
05EE            460       
05EE 120591     461       lcall InitSerialPort
05F1 120528     462                    lcall INIT_SPI
05F4 120475     463                    lcall Timer0_Init
05F7            464     ;  lcall Timer2_Init
05F7 1207B3     465      lcall TurnOvenOff
05FA            466     ; lcall TurnOvenOn
05FA 020A02     467      ljmp Menu_select1 ;; selecting and setting profiles
05FD            468       
05FD            469   FOREVER: ;this will be how the oven is being controlled ; jump here once start button is pressed!!!
05FD            470   ;------state 1 -------- ;
05FD 12120E     471            lcall TonePlayer2
0600 C002       472            push AR2
0602 7A32       472            mov R2, #50
0604 120039     472            lcall ?Wait_Milli_Seconds
0607 D002       472            pop AR2
0609 C0E0       473            push acc
060B 7401       473            mov a, #1
060D 14         473            dec a
060E 1200C1     473            lcall ?Set_Cursor_1 ; Select column and row
0611 D0E0       473            pop acc
0613 C083       474            push dph
0615 C082       474            push dpl
0617 C0E0       474            push acc
0619 900422     474            mov dptr, #TemperatureRise
061C 1200B4     474            lcall ?Send_Constant_String
061F D0E0       474            pop acc
0621 D082       474            pop dpl
0623 D083       474            pop dph
0625 1207A4     475     lcall checkstop       ;checks if stop button is pressed. If so, turns off oven and goes back to menu
0628 12082D     476      lcall checkerror      ;if error, terminate program and return
062B 120799     477      lcall Readingtemperatures  ;calculates temperature of oven using thermocouple junctions
062E            478      
062E 1207B9     479      lcall DisplayingLCD
0631 1205A9     480      lcall display7seg
0634            481      
0634 1209AF     482      lcall State_change_BEEPER ; temp = soak temp, so going to soak time state 
0637            483    
0637 C3         484     clr c
0638 E544       485     mov a, soaktemp
063A 953F       486     subb a, coldtemp
063C 50BF       487     jnc FOREVER
063E            488      
063E 1207B3     489     lcall TurnOvenOff
0641            490     
0641 C2CA       491      clr tr2                       ; restarting timer 2 to keep track of the time lasped since we reached soaktemp
0643 7400       492      mov a, #0x0
0645 F550       493      mov second, a
0647 D2CA       494      setb tr2
0649            495      
0649            496     ; after we reached the soak temp stay there for __ seconds
0649            497     ;-----state 2 ------;
0649            498   soaktempchecked:
0649 C0E0       499            push acc
064B 7401       499            mov a, #1
064D 14         499            dec a
064E 1200C1     499            lcall ?Set_Cursor_1 ; Select column and row
0651 D0E0       499            pop acc
0653 C083       500            push dph
0655 C082       500            push dpl
0657 C0E0       500            push acc
0659 900411     500            mov dptr, #SoakState
065C 1200B4     500            lcall ?Send_Constant_String
065F D0E0       500            pop acc
0661 D082       500            pop dpl
0663 D083       500            pop dph  
0665 1207A4     501            lcall checkstop         
0668 120799     502      lcall Readingtemperatures
066B 1207B9     503      lcall DisplayingLCD
066E 1205A9     504      lcall display7seg
0671            505      
0671 120722     506     lcall keepingsoaktempsame ; boundary temp
0674 120732     507     lcall keepingsoaktempsame1
0677            508     
0677 12076D     509     lcall checksoaktime ; if soak time is up go to next state
067A            510    
067A 80CD       511     sjmp soaktempchecked
067C            512     
067C            513   ; ---- state 3 ---- ; increaseing to reflow temp
067C            514   increasereflowtemp: 
067C            515    ; lcall checkstop
067C C0E0       516            push acc
067E 7401       516            mov a, #1
0680 14         516            dec a
0681 1200C1     516            lcall ?Set_Cursor_1 ; Select column and row
0684 D0E0       516            pop acc
0686 C083       517            push dph
0688 C082       517            push dpl
068A C0E0       517            push acc
068C 900422     517            mov dptr, #TemperatureRise
068F 1200B4     517            lcall ?Send_Constant_String
0692 D0E0       517            pop acc
0694 D082       517            pop dpl
0696 D083       517            pop dph 
0698 120799     518     lcall Readingtemperatures
069B 1207B9     519      lcall DisplayingLCD
069E            520      
069E            521   
069E C3         522     clr c
069F E546       523     mov a, reflowtemp
06A1 953F       524     subb a, coldtemp
06A3 50D7       525     jnc increasereflowtemp
06A5            526      
06A5 1207B3     527     lcall TurnOvenOff  
06A8            528      
06A8            529    ; lcall checkingreflowtemp
06A8 1209AF     530     lcall State_change_BEEPER
06AB C2CA       531     clr tr2
06AD 7400       532     mov a, #0
06AF F550       533     mov second, a
06B1 D2CA       534     setb tr2
06B3            535   
06B3            536     ;----state 4 ---;
06B3            537    reflowstate:
06B3 1207A4     538     lcall checkstop
06B6 120799     539     lcall Readingtemperatures
06B9 1207B9     540      lcall DisplayingLCD
06BC 1205A9     541       lcall display7seg
06BF C0E0       542            push acc
06C1 7401       542            mov a, #1
06C3 14         542            dec a
06C4 1200C1     542            lcall ?Set_Cursor_1 ; Select column and row
06C7 D0E0       542            pop acc
06C9 C083       543            push dph
06CB C082       543            push dpl
06CD C0E0       543            push acc
06CF 900400     543            mov dptr, #ReflowStateMess
06D2 1200B4     543            lcall ?Send_Constant_String
06D5 D0E0       543            pop acc
06D7 D082       543            pop dpl
06D9 D083       543            pop dph 
06DB 12074C     544     lcall keepingreflowtempsame
06DE 12075C     545     lcall keepingreflowtempsame1
06E1 120783     546     lcall checkreflowtime
06E4 80CD       547     sjmp reflowstate
06E6            548     
06E6            549    ;------- state5-----;
06E6            550    cooling:
06E6 C0E0       551            push acc
06E8 7401       551            mov a, #1
06EA 14         551            dec a
06EB 1200C1     551            lcall ?Set_Cursor_1 ; Select column and row
06EE D0E0       551            pop acc
06F0 C083       552            push dph
06F2 C082       552            push dpl
06F4 C0E0       552            push acc
06F6 900433     552            mov dptr, #CoolingTemp
06F9 1200B4     552            lcall ?Send_Constant_String
06FC D0E0       552            pop acc
06FE D082       552            pop dpl
0700 D083       552            pop dph 
0702 120799     553      lcall Readingtemperatures
0705 1207B9     554      lcall DisplayingLCD
0708 1205A9     555      lcall display7seg
070B 120717     556      lcall waitforcooling
070E 12120E     557      lcall TonePlayer2   ;Change according to which song you want
0711 1209C9     558      lcall Open_oven_toaster_BEEPER
0714            559    
0714 020714     560    ljmp $
0717            561     
0717            562   ;---------------------------------;
0717            563   ; functions                                                                                  ;
0717            564   ;---------------------------------; 
0717            565   
0717            566   waitforcooling:
0717            567   
0717            568   
0717 C3         569     clr c
0718 743C       570     mov a, #60
071A 953F       571     subb a, coldtemp
071C 5003       572     jnc cooled
071E 0206E6     573     ljmp cooling
0721            574     
0721            575     
0721            576   ;        load_X(coldtemp)
0721            577   ;  load_Y(60)
0721            578   ;  lcall x_gteq_y   ; compare if temp >= 60 
0721            579   ;  jnb mf, cooled
0721            580   ;  ljmp cooling
0721            581     
0721            582    
0721            583   cooled:
0721 22         584            ret
0722            585   
0722            586   ; *********** STATE 2 **********
0722            587   ; After reaching the soak temperature we stay at that temp 
0722            588   ; for 60 to 120 seconds
0722            589   
0722            590   keepingsoaktempsame:
0722 E544       591     mov a, soaktemp
0724 2405       592     add a, #5
0726 F530       593     mov x, a
0728            594      
0728 C3         595     clr c
0729 E530       596     mov a, x
072B 953F       597     subb a, coldtemp
072D 5014       598     jnc soaktempisokay
072F 020744     599     ljmp soaktemptoohigh
0732            600   
0732            601     ;load_Y(coldtemp)
0732            602     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0732            603    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0732            604    
0732            605    keepingsoaktempsame1:
0732            606     ; temp>= soaktemp-10
0732            607    ; load_Y(5)
0732            608    ; load_X(soaktemp)
0732            609    ; lcall sub32   
0732 E544       610     mov a, soaktemp
0734 C3         611     clr c
0735 9405       612     subb a, #5
0737 F530       613     mov x, a
0739            614     
0739 C3         615     clr c
073A E53F       616     mov a, coldtemp
073C 9530       617     subb a, x
073E 5003       618     jnc soaktempisokay
0740 020748     619     ljmp soaktemptoolow
0743            620     
0743            621      
0743            622     
0743            623   soaktempisokay:
0743 22         624            ret
0744            625     
0744            626   soaktemptoohigh: 
0744 1207B3     627     lcall TurnOvenOff
0747 22         628     ret
0748            629     
0748            630   soaktemptoolow:
0748 1207B6     631            lcall TurnOvenOn
074B 22         632     ret
074C            633     
074C            634    keepingreflowtempsame:
074C E546       635     mov a, reflowtemp
074E 2405       636     add a, #5
0750 F530       637     mov x, a
0752            638      
0752 C3         639     clr c
0753 E530       640     mov a, x
0755 953F       641     subb a, coldtemp
0757 50EA       642     jnc soaktempisokay
0759 020744     643     ljmp soaktemptoohigh
075C            644   
075C            645     ;load_Y(coldtemp)
075C            646     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
075C            647    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
075C            648    
075C            649    keepingreflowtempsame1:
075C            650     ; temp>= soaktemp-10
075C            651    ; load_Y(5)
075C            652    ; load_X(soaktemp)
075C            653    ; lcall sub32   
075C E546       654     mov a, reflowtemp
075E C3         655     clr c
075F 9405       656     subb a, #5
0761 F530       657     mov x, a
0763            658     
0763 C3         659     clr c
0764 E53F       660     mov a, coldtemp
0766 9530       661     subb a, x
0768 50D9       662     jnc soaktempisokay
076A 020748     663     ljmp soaktemptoolow
076D            664     
076D            665    ; lower bound for the straight line for the soak temp: soaktemp-10
076D            666   ;  load_Y(coldtemp)
076D            667    ; lcall x_gteq_y   ; compare if temp <= soaktemp - 10 
076D            668    ; jb mf, soaktemptoolow; if mf!=1 then keep checking
076D            669    ; ljmp soaktempisokay
076D            670     
076D            671   
076D            672   checksoaktime:
076D            673   
076D            674    
076D C3         675     clr c
076E E545       676     mov a, soaktime
0770 9550       677     subb a, second
0772 500E       678     jnc soaknotdone
0774 1207B6     679     lcall TurnOvenOn
0777 C2CA       680     clr tr2
0779 7400       681     mov a, #0
077B F550       682     mov second, a
077D D2CA       683     setb tr2
077F 02067C     684     ljmp increasereflowtemp
0782            685   soaknotdone:
0782 22         686            ret 
0783            687     
0783            688   checkreflowtime:
0783            689   
0783 C3         690     clr c
0784 E547       691     mov a, reflowtime
0786 9550       692     subb a, second
0788 500E       693     jnc reflownotdone
078A 1207B3     694     lcall TurnOvenOff
078D C2CA       695     clr tr2
078F 7400       696     mov a, #0
0791 F550       697     mov second, a
0793 D2CA       698     setb tr2
0795 0206E6     699     ljmp cooling
0798            700   reflownotdone:
0798 22         701            ret
0799            702   
0799            703   ; reading the thermocouple junction values 
0799            704   Readingtemperatures:
0799 12084B     705     lcall readingcoldjunction ;answer in x is saved in variable called 'coldtemp'
079C            706    ; lcall readinghotjunction
079C            707     
079C            708   
079C E530       709     mov a, x
079E F53F       710     mov coldtemp, a
07A0 22         711    ret
07A1            712    ; mov a, x
07A1            713    ; mov coldtemp, a ;final temperature is in the temperature variable
07A1            714    ; ret
07A1            715   
07A1            716   ; checking if the temperture at the hot end is equal to soak temp yet
07A1            717   
07A1            718   
07A1            719   ;checkingsoaktemperature: 
07A1            720   ;  clr c
07A1            721    ; mov a, soaktemp
07A1            722    ; subb a, coldtemp
07A1            723    ; jnc Jump_to_FOREVER  
07A1            724    ; lcall TurnOvenOff
07A1            725    ; ret
07A1            726   Jump_to_FOREVER:
07A1 0205FD     727            ljmp FOREVER
07A4            728   
07A4            729   ; checking if the temperture at the hot end is equal to reflow temp yet
07A4            730   
07A4            731   
07A4            732    ;stop the process at any time  
07A4            733   checkstop:                     ; stop the reflow process
07A4 208305     734            jb STARTBUTTON, return
07A7 3083FD     735            jnb STARTBUTTON, $
07AA 8001       736            sjmp stop
07AC            737   return:
07AC 22         738     ret
07AD            739   stop:
07AD 1207B3     740            lcall TurnOvenOff
07B0 020A02     741       ljmp menu_select1
07B3            742   
07B3            743     
07B3            744   ;---------------------------------- ;
07B3            745   ; SSR Box communicating with the           ;
07B3            746   ; Microcontroller                                                                        ;
07B3            747   ;(1) uses OvenButton to communicate ; 
07B3            748     ;with the transistor to turn the       ;
07B3            749     ;oven or off                                                                                   ;
07B3            750   ;(2)                                                                                                                             ;
07B3            751   ;                                                                                                                                                ;
07B3            752   ;                                                                                                                                                ;
07B3            753   ;-----------------------------------;
07B3            754            
07B3            755   TurnOvenOff:
07B3 C2B6       756            clr OvenButton  
07B5 22         757     ret
07B6            758   TurnOvenOn:
07B6 D2B6       759            setb OvenButton
07B8 22         760     ret
07B9            761   
07B9            762   DisplayingLCD:
07B9            763   
07B9 C0E0       764            push acc
07BB 740F       764            mov a, #15
07BD 14         764            dec a
07BE 1200BF     764            lcall ?Set_Cursor_2 ; Select column and row
07C1 D0E0       764            pop acc
07C3 74DF       765            mov a, #0xDF
07C5 12007E     765            lcall ?WriteData
07C8 C0E0       766            push acc
07CA 7410       766            mov a, #16
07CC 14         766            dec a
07CD 1200BF     766            lcall ?Set_Cursor_2 ; Select column and row
07D0 D0E0       766            pop acc
07D2 7443       767            mov a, #'C'
07D4 12007E     767            lcall ?WriteData
07D7            768       
07D7 855038     769            mov bcd, second
07DA C0E0       770            push acc
07DC 7401       770            mov a, #1
07DE 14         770            dec a
07DF 1200BF     770            lcall ?Set_Cursor_2 ; Select column and row
07E2 D0E0       770            pop acc
07E4 C000       771            push ar0
07E6 A839       771            mov r0, bcd+1
07E8 1200C6     771            lcall ?Display_BCD
07EB D000       771            pop ar0
07ED C0E0       772            push acc
07EF 7403       772            mov a, #3
07F1 14         772            dec a
07F2 1200BF     772            lcall ?Set_Cursor_2 ; Select column and row
07F5 D0E0       772            pop acc
07F7 C000       773            push ar0
07F9 A838       773            mov r0, bcd
07FB 1200C6     773            lcall ?Display_BCD
07FE D000       773            pop ar0
0800            774            
0800 C0E0       775            push acc
0802 740C       775            mov a, #12
0804 14         775            dec a
0805 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
0808 D0E0       775            pop acc
080A 853F30     776            mov x, coldtemp         
080D 12011F     777            lcall hex2bcd   
0810 C000       778            push ar0
0812 A838       778            mov r0, bcd
0814 1200C6     778            lcall ?Display_BCD
0817 D000       778            pop ar0
0819            779   
0819 C0E0       780            push acc
081B 740A       780            mov a, #10
081D 14         780            dec a
081E 1200BF     780            lcall ?Set_Cursor_2 ; Select column and row
0821 D0E0       780            pop acc
0823 C000       781            push ar0
0825 A839       781            mov r0, bcd+1
0827 1200C6     781            lcall ?Display_BCD
082A D000       781            pop ar0         
082C            782   
082C            783   
082C            784                    
082C            785   
082C 22         786       ret
082D            787       
082D            788       
082D            789   
082D            790   
082D            791   
082D            792   ;As a safety measure, the reflow process must be aborted if the oven doesn’t reach at least 50oC in the first 60 seconds of operation
082D            793   checkerror: 
082D C0E0       794            push acc
082F C0D0       795     push psw
0831            796     
0831            797     
0831 C3         798     clr c
0832 7460       799     mov a, #0x60
0834 9550       800     subb a, second
0836 500E       801     jnc noerror
0838            802   
0838            803     
0838 7450       804     mov a, #0x50
083A 953F       805     subb a, coldtemp
083C 5002       806     jnc error
083E 8006       807     sjmp noerror
0840            808     error:
0840 1207B3     809     lcall TurnOvenOff
0843 020A02     810     ljmp Menu_Select1
0846            811     
0846            812   
0846            813   noerror:
0846 D0D0       814     pop psw
0848 D0E0       815     pop acc 
084A 22         816     ret
084B            817            
084B            818   ;------------------------------;
084B            819   ; Temperature Reader From Sam     ;
084B            820   ;------------------------------;
084B            821            
084B            822   readingcoldjunction: ;read the cold junction from the adc
084B            823   ;reading the adc
084B C0E0       824            push acc
084D C0D0       825       push psw
084F            826     
084F C2A0       827            clr CE_ADC 
0851 7801       828            mov R0, #00000001B ; Start bit:1 
0853 12052D     829            lcall DO_SPI_G
0856 7880       830            mov R0, #10000000B ; Single ended, read channel 0 
0858 12052D     831            lcall DO_SPI_G 
085B E9         832            mov a, R1          ; R1 contains bits 8 and 9 
085C 5403       833            anl a, #00000011B  ; We need only the two least significant bits 
085E F53E       834            mov Result+1, a    ; Save result high.
0860 7855       835            mov R0, #55H ; It doesn't matter what we transmit... 
0862 12052D     836            lcall DO_SPI_G 
0865 893D       837            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
0867 D2A0       838            setb CE_ADC 
0869            839            ;wait for 1 second 
0869 C002       840            push AR2
086B 7AFA       840            mov R2, #250
086D 120039     840            lcall ?Wait_Milli_Seconds
0870 D002       840            pop AR2
0872 C002       841            push AR2
0874 7AFA       841            mov R2, #250
0876 120039     841            lcall ?Wait_Milli_Seconds
0879 D002       841            pop AR2
087B            842     
087B 120887     843            lcall Calculate_Temp_in_C 
087E E530       844       mov a, x
0880 F53F       845       mov coldtemp, a
0882            846     
0882 D0D0       847              pop psw
0884 D0E0       848              pop acc
0886 22         849              ret   
0887            850               
0887            851   
0887            852   ;Trying to transfer the binary value in ADC into BCD and then into 
0887            853   ;ASCII to show in putty
0887            854   Calculate_Temp_in_C:     
0887 E4         855            clr a 
0888 753000     856            mov x+0, #low (0 % 0x10000) 
088B 753100     856            mov x+1, #high(0 % 0x10000) 
088E 753200     856            mov x+2, #low (0 / 0x10000) 
0891 753300     856            mov x+3, #high(0 / 0x10000)     ; 
0894 753400     857            mov y+0, #low (0 % 0x10000) 
0897 753500     857            mov y+1, #high(0 % 0x10000) 
089A 753600     857            mov y+2, #low (0 / 0x10000) 
089D 753700     857            mov y+3, #high(0 / 0x10000) 
08A0            858            ; load the result into X 
08A0 E53D       859            mov a, Result+0
08A2 F530       860            mov X, a
08A4 E53E       861            mov a, Result+1
08A6 F531       862            mov X+1, a
08A8 75349A     863            mov y+0, #low (410 % 0x10000) 
08AB 753501     863            mov y+1, #high(410 % 0x10000) 
08AE 753600     863            mov y+2, #low (410 / 0x10000) 
08B1 753700     863            mov y+3, #high(410 / 0x10000) 
08B4 120299     864            lcall mul32;
08B7 7534FF     865            mov y+0, #low (1023 % 0x10000) 
08BA 753503     865            mov y+1, #high(1023 % 0x10000) 
08BD 753600     865            mov y+2, #low (1023 / 0x10000) 
08C0 753700     865            mov y+3, #high(1023 / 0x10000) 
08C3 120326     866            lcall div32;  
08C6            867            ;calculte temperature 
08C6 753411     868            mov y+0, #low (273 % 0x10000) 
08C9 753501     868            mov y+1, #high(273 % 0x10000) 
08CC 753600     868            mov y+2, #low (273 / 0x10000) 
08CF 753700     868            mov y+3, #high(273 / 0x10000) 
08D2 853052     869            mov temp, X
08D5 120205     870            lcall sub32
08D8 12011F     871            lcall hex2bcd ; converts binary in x to BCD in BCD
08DB            872            ;Set_Cursor(2, 13)
08DB            873            ;Display_BCD(bcd)
08DB            874   ;        lcall Display_Temp_Putty
08DB 22         875            ret
08DC            876   
08DC            877   readinghotjunction: ;read the hot junction from the adc from oven and thermocouple wires
08DC            878   ;reading the adc
08DC C0E0       879            push acc
08DE C0D0       880     push psw
08E0            881     
08E0 C2A0       882            clr CE_ADC 
08E2 7801       883            mov R0, #00000001B ; Start bit:1 
08E4 12052D     884            lcall DO_SPI_G
08E7 7890       885            mov R0, #10010000B ; Single ended, read channel 1 
08E9 12052D     886            lcall DO_SPI_G 
08EC E9         887            mov a, R1          ; R1 contains bits 8 and 9 
08ED 5403       888            anl a, #00000011B  ; We need only the two least significant bits 
08EF F53E       889            mov Result+1, a    ; Save result high.
08F1 7855       890            mov R0, #55H ; It doesn't matter what we transmit... 
08F3 12052D     891            lcall DO_SPI_G 
08F6 893D       892            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
08F8 D2A0       893            setb CE_ADC 
08FA            894            ;wait for 1 second 
08FA C002       895            push AR2
08FC 7AFA       895            mov R2, #250
08FE 120039     895            lcall ?Wait_Milli_Seconds
0901 D002       895            pop AR2
0903 C002       896            push AR2
0905 7AFA       896            mov R2, #250
0907 120039     896            lcall ?Wait_Milli_Seconds
090A D002       896            pop AR2
090C            897            
090C 753000     898            mov x+0, #low (0 % 0x10000) 
090F 753100     898            mov x+1, #high(0 % 0x10000) 
0912 753200     898            mov x+2, #low (0 / 0x10000) 
0915 753300     898            mov x+3, #high(0 / 0x10000) 
0918            899   
0918 E53D       900            mov a,Result
091A F530       901            mov x,a
091C E53E       902            mov a,Result+1
091E F531       903            mov x+1,a
0920            904            
0920 12011F     905            lcall hex2bcd
0923            906                            
0923            907     
0923 12092F     908            lcall Calculate_hot 
0926 E530       909       mov a, x
0928 F540       910       mov hottemp, a
092A            911     
092A D0D0       912              pop psw
092C D0E0       913              pop acc
092E 22         914              ret   
092F            915   
092F            916   Calculate_hot:
092F C0E0       917   push acc
0931 C0D0       918            push psw
0933            919            ; Vout calculations
0933 853D30     920            mov x, Result
0936 853E31     921            mov x+1, Result+1
0939 753200     922            mov x+2, #0
093C 753300     923            mov x+3, #0
093F            924            
093F 75341D     925            mov y+0, #low (29 % 0x10000) 
0942 753500     925            mov y+1, #high(29 % 0x10000) 
0945 753600     925            mov y+2, #low (29 / 0x10000) 
0948 753700     925            mov y+3, #high(29 / 0x10000) 
094B 120299     926            lcall mul32
094E 753466     927            mov y+0, #low (2150 % 0x10000) 
0951 753508     927            mov y+1, #high(2150 % 0x10000) 
0954 753600     927            mov y+2, #low (2150 / 0x10000) 
0957 753700     927            mov y+3, #high(2150 / 0x10000) 
095A 1201E4     928            lcall add32
095D 753464     929            mov y+0, #low (100 % 0x10000) 
0960 753500     929            mov y+1, #high(100 % 0x10000) 
0963 753600     929            mov y+2, #low (100 / 0x10000) 
0966 753700     929            mov y+3, #high(100 / 0x10000) 
0969 120326     930            lcall div32
096C            931       
096C 12011F     932            lcall hex2bcd
096F E530       933            mov a, x
0971 D0D0       934                    pop psw 
0973 D0E0       935            pop acc
0975 22         936            ret
0976            937                    
0976            938   ; Display Temperature in Putty!
0976            939   Display_Temp_Putty:
0976 C000       940            push ar0
0978 A839       940            mov r0, bcd+1
097A 1200E4     940            lcall ?Send_BCD
097D D000       940            pop ar0
097F C000       941            push ar0
0981 A838       941            mov r0, bcd
0983 1200E4     941            lcall ?Send_BCD
0986 D000       941            pop ar0
0988 740D       942            mov a, #'\r'
098A 120546     943            lcall putchar1
098D 740A       944            mov a, #'\n'
098F 120546     945            lcall putchar1
0992 22         946            ret     
0993            947   ;beeper function to indicate reflow process has started
0993            948   Reflow_start_BEEPER:
0993 121152     949    lcall ToneReset
0996 D28C       950    setb tr0
0998 B28C       951    cpl tr0
099A C002       952            push AR2
099C 7AFA       952            mov R2, #250
099E 120039     952            lcall ?Wait_Milli_Seconds
09A1 D002       952            pop AR2
09A3 C002       953            push AR2
09A5 7AFA       953            mov R2, #250
09A7 120039     953            lcall ?Wait_Milli_Seconds
09AA D002       953            pop AR2
09AC C28C       954    clr tr0
09AE 22         955    ret
09AF            956    
09AF            957   State_change_BEEPER:
09AF 121152     958    lcall ToneReset
09B2 D28C       959    setb tr0
09B4 C002       960            push AR2
09B6 7AFA       960            mov R2, #250
09B8 120039     960            lcall ?Wait_Milli_Seconds
09BB D002       960            pop AR2
09BD C002       961            push AR2
09BF 7AFA       961            mov R2, #250
09C1 120039     961            lcall ?Wait_Milli_Seconds
09C4 D002       961            pop AR2
09C6 C28C       962    clr tr0
09C8 22         963    ret
09C9            964    
09C9            965   Open_oven_toaster_BEEPER:
09C9 121152     966    lcall ToneReset
09CC E4         967    clr a ; c=0
09CD            968   loop6times: 
09CD B40601     969    cjne a, #6, beep
09D0 22         970    ret
09D1            971    beep: 
09D1 D28C       972    setb tr0
09D3 B28C       973    cpl tr0
09D5 C002       974            push AR2
09D7 7A64       974            mov R2, #100
09D9 120039     974            lcall ?Wait_Milli_Seconds
09DC D002       974            pop AR2
09DE C28C       975    clr tr0
09E0 04         976    inc a 
09E1 80EA       977    sjmp loop6times
09E3 22         978    ret
09E4            979   ; Display Temperature in LCD
09E4            980   Display_Temp_LCD:
09E4            981   ; show temp in Celcius 
09E4 C0E0       982            push acc
09E6 7406       982            mov a, #6
09E8 14         982            dec a
09E9 1200C1     982            lcall ?Set_Cursor_1 ; Select column and row
09EC D0E0       982            pop acc;
09EE C000       983            push ar0
09F0 A839       983            mov r0, bcd+1
09F2 1200C6     983            lcall ?Display_BCD
09F5 D000       983            pop ar0
09F7 C0E0       984            push acc
09F9 7409       984            mov a, #9
09FB 14         984            dec a
09FC 1200C1     984            lcall ?Set_Cursor_1 ; Select column and row
09FF D0E0       984            pop acc;  
0A01 22         985            ret
0A02            986            
0A02            987   ; MENU SELECT;   
0A02            988            
0A02            989            
0A02            990   Menu_select1:  
0A02 7401       991            mov a, #0x01
0A04 120083     991            lcall ?WriteCommand
0A07 C002       992            push AR2
0A09 7A32       992            mov R2, #50
0A0B 120039     992            lcall ?Wait_Milli_Seconds
0A0E D002       992            pop AR2
0A10            993   Menu_select2:
0A10 C0E0       994            push acc
0A12 7401       994            mov a, #1
0A14 14         994            dec a
0A15 1200C1     994            lcall ?Set_Cursor_1 ; Select column and row
0A18 D0E0       994            pop acc
0A1A C083       995            push dph
0A1C C082       995            push dpl
0A1E C0E0       995            push acc
0A20 90039C     995            mov dptr, #MenuMessage1
0A23 1200B4     995            lcall ?Send_Constant_String
0A26 D0E0       995            pop acc
0A28 D082       995            pop dpl
0A2A D083       995            pop dph
0A2C C0E0       996            push acc
0A2E 7401       996            mov a, #1
0A30 14         996            dec a
0A31 1200BF     996            lcall ?Set_Cursor_2 ; Select column and row
0A34 D0E0       996            pop acc
0A36 C083       997            push dph
0A38 C082       997            push dpl
0A3A C0E0       997            push acc
0A3C 9003A8     997            mov dptr, #MenuMessage2
0A3F 1200B4     997            lcall ?Send_Constant_String
0A42 D0E0       997            pop acc
0A44 D082       997            pop dpl
0A46 D083       997            pop dph
0A48            998     
0A48 C002       999            push AR2
0A4A 7A32       999            mov R2, #50
0A4C 120039     999            lcall ?Wait_Milli_Seconds
0A4F D002       999            pop AR2 ;go to set Soak Temperature
0A51 208406    1000     jb BUTTON_1, Menu_select2_2
0A54 3084FD    1001     jnb BUTTON_1, $
0A57 020AAA    1002     ljmp Jump_to_Set_SoakTemp1
0A5A           1003     
0A5A           1004   Menu_select2_2:
0A5A C002      1005            push AR2
0A5C 7A32      1005            mov R2, #50
0A5E 120039    1005            lcall ?Wait_Milli_Seconds
0A61 D002      1005            pop AR2 ;go to set Soak Time
0A63 208506    1006     jb BUTTON_2, Menu_select2_3
0A66 3085FD    1007     jnb BUTTON_2, $
0A69 020AAD    1008     ljmp Jump_to_Set_SoakTime1
0A6C           1009     
0A6C           1010   Menu_select2_3:
0A6C C002      1011            push AR2
0A6E 7A32      1011            mov R2, #50
0A70 120039    1011            lcall ?Wait_Milli_Seconds
0A73 D002      1011            pop AR2 ;go to second set of menus
0A75 208606    1012     jb BUTTON_3, Menu_select2_4
0A78 3086FD    1013     jnb BUTTON_3, $
0A7B 020AB3    1014     ljmp Jump_to_Menu_select3
0A7E           1015     
0A7E           1016   Menu_select2_4:
0A7E C002      1017            push AR2
0A80 7A32      1017            mov R2, #50
0A82 120039    1017            lcall ?Wait_Milli_Seconds
0A85 D002      1017            pop AR2   ; start the reflow process
0A87 208326    1018     jb StartButton, Jump_to_Menu_select2_1
0A8A 3083FD    1019     jnb StartButton, $
0A8D 020A90    1020     ljmp Jump_To_FOREVER1
0A90           1021     
0A90           1022   Jump_To_FOREVER1:
0A90 7401      1023            mov a, #0x01
0A92 120083    1023            lcall ?WriteCommand
0A95 C002      1024            push AR2
0A97 7A32      1024            mov R2, #50
0A99 120039    1024            lcall ?Wait_Milli_Seconds
0A9C D002      1024            pop AR2
0A9E 1207B6    1025     lcall TurnOvenOn
0AA1 12048F    1026     lcall Timer2_init
0AA4           1027            
0AA4 755000    1028            mov second, #0
0AA7           1029            
0AA7 0205FD    1030            ljmp FOREVER
0AAA           1031   
0AAA           1032   Jump_to_Set_SoakTemp1:
0AAA 020AB6    1033            ljmp Set_SoakTemp1
0AAD           1034     
0AAD           1035   Jump_to_Set_SoakTime1:
0AAD 020BBA    1036            ljmp Set_SoakTime1
0AB0           1037            
0AB0           1038   Jump_to_Menu_select2_1:
0AB0 020A10    1039            ljmp Menu_select2
0AB3           1040     
0AB3           1041   Jump_to_Menu_select3:
0AB3 020CBE    1042            ljmp Menu_select3
0AB6           1043   
0AB6           1044   ; Settings - Soak Temperature
0AB6           1045   Set_SoakTemp1:
0AB6 7401      1046            mov a, #0x01
0AB8 120083    1046            lcall ?WriteCommand          ;clear display
0ABB C002      1047            push AR2
0ABD 7A32      1047            mov R2, #50
0ABF 120039    1047            lcall ?Wait_Milli_Seconds
0AC2 D002      1047            pop AR2
0AC4 C0E0      1048            push acc
0AC6 7401      1048            mov a, #1
0AC8 14        1048            dec a
0AC9 1200C1    1048            lcall ?Set_Cursor_1 ; Select column and row
0ACC D0E0      1048            pop acc
0ACE C083      1049            push dph
0AD0 C082      1049            push dpl
0AD2 C0E0      1049            push acc
0AD4 9003D0    1049            mov dptr, #MenuSoakTemp
0AD7 1200B4    1049            lcall ?Send_Constant_String
0ADA D0E0      1049            pop acc
0ADC D082      1049            pop dpl
0ADE D083      1049            pop dph
0AE0 C0E0      1050            push acc
0AE2 7401      1050            mov a, #1
0AE4 14        1050            dec a
0AE5 1200BF    1050            lcall ?Set_Cursor_2 ; Select column and row
0AE8 D0E0      1050            pop acc
0AEA 854430    1051     mov x, soaktemp
0AED 12011F    1052     lcall hex2bcd
0AF0 C000      1053            push ar0
0AF2 A839      1053            mov r0, bcd+1
0AF4 1200C6    1053            lcall ?Display_BCD
0AF7 D000      1053            pop ar0
0AF9 C0E0      1054            push acc
0AFB 7403      1054            mov a, #3
0AFD 14        1054            dec a
0AFE 1200BF    1054            lcall ?Set_Cursor_2 ; Select column and row
0B01 D0E0      1054            pop acc
0B03 C000      1055            push ar0
0B05 A838      1055            mov r0, bcd+0
0B07 1200C6    1055            lcall ?Display_BCD
0B0A D000      1055            pop ar0
0B0C           1056   Set_SoakTemp2:
0B0C 20840F    1057     jb BUTTON_1, Set_SoakTemp2_2
0B0F C002      1058            push AR2
0B11 7A32      1058            mov R2, #50
0B13 120039    1058            lcall ?Wait_Milli_Seconds
0B16 D002      1058            pop AR2
0B18 208403    1059     jb BUTTON_1, Set_SoakTemp2_2
0B1B 020B45    1060     ljmp SoakTemp_inc
0B1E           1061   Set_SoakTemp2_2:
0B1E 20850F    1062     jb BUTTON_2, Set_SoakTemp2_3
0B21 C002      1063            push AR2
0B23 7A32      1063            mov R2, #50
0B25 120039    1063            lcall ?Wait_Milli_Seconds
0B28 D002      1063            pop AR2
0B2A 208503    1064     jb BUTTON_2, Set_SoakTemp2_3
0B2D 020B69    1065     ljmp SoakTemp_dec
0B30           1066   Set_SoakTemp2_3:
0B30 20860F    1067            jb BUTTON_3, Set_SoakTemp2_4
0B33 C002      1068            push AR2
0B35 7A32      1068            mov R2, #50
0B37 120039    1068            lcall ?Wait_Milli_Seconds
0B3A D002      1068            pop AR2
0B3C 208603    1069     jb BUTTON_3, Set_SoakTemp2_4
0B3F 020A02    1070     ljmp Menu_select1
0B42           1071   Set_SoakTemp2_4:
0B42 020B0C    1072     ljmp Set_SoakTemp2
0B45           1073     
0B45           1074   soaktemp_inc:
0B45 854430    1075    mov x, soaktemp
0B48 753100    1076    mov x+1, #0
0B4B 753200    1077    mov x+2, #0
0B4E 753300    1078    mov x+3, #0
0B51 753401    1079            mov y+0, #low (1 % 0x10000) 
0B54 753500    1079            mov y+1, #high(1 % 0x10000) 
0B57 753600    1079            mov y+2, #low (1 / 0x10000) 
0B5A 753700    1079            mov y+3, #high(1 / 0x10000) 
0B5D 1201E4    1080    lcall add32
0B60 853044    1081    mov soaktemp, x
0B63 120B8D    1082    lcall display_soak_temp 
0B66 020B0C    1083    ljmp Set_SoakTemp2
0B69           1084    
0B69           1085   soaktemp_dec: 
0B69 854430    1086    mov x, soaktemp
0B6C 753100    1087    mov x+1, #0
0B6F 753200    1088    mov x+2, #0
0B72 753300    1089    mov x+3, #0
0B75 753401    1090            mov y+0, #low (1 % 0x10000) 
0B78 753500    1090            mov y+1, #high(1 % 0x10000) 
0B7B 753600    1090            mov y+2, #low (1 / 0x10000) 
0B7E 753700    1090            mov y+3, #high(1 / 0x10000) 
0B81 120205    1091    lcall sub32
0B84 853044    1092    mov soaktemp, x
0B87 120B8D    1093    lcall display_soak_temp 
0B8A 020B0C    1094    ljmp Set_SoakTemp2
0B8D           1095     
0B8D           1096   display_soak_temp: 
0B8D 854430    1097    mov x, soaktemp
0B90 12011F    1098    lcall hex2bcd
0B93 C0E0      1099            push acc
0B95 7401      1099            mov a, #1
0B97 14        1099            dec a
0B98 1200BF    1099            lcall ?Set_Cursor_2 ; Select column and row
0B9B D0E0      1099            pop acc
0B9D C000      1100            push ar0
0B9F A839      1100            mov r0, bcd+1
0BA1 1200C6    1100            lcall ?Display_BCD
0BA4 D000      1100            pop ar0
0BA6 C0E0      1101            push acc
0BA8 7403      1101            mov a, #3
0BAA 14        1101            dec a
0BAB 1200BF    1101            lcall ?Set_Cursor_2 ; Select column and row
0BAE D0E0      1101            pop acc
0BB0 C000      1102            push ar0
0BB2 A838      1102            mov r0, bcd+0
0BB4 1200C6    1102            lcall ?Display_BCD
0BB7 D000      1102            pop ar0
0BB9 22        1103   ret   
0BBA           1104   
0BBA           1105   ; Settings - Soak Time
0BBA           1106   Set_SoakTime1:
0BBA 7401      1107            mov a, #0x01
0BBC 120083    1107            lcall ?WriteCommand          ;clear display
0BBF C002      1108            push AR2
0BC1 7A32      1108            mov R2, #50
0BC3 120039    1108            lcall ?Wait_Milli_Seconds
0BC6 D002      1108            pop AR2
0BC8 C0E0      1109            push acc
0BCA 7401      1109            mov a, #1
0BCC 14        1109            dec a
0BCD 1200C1    1109            lcall ?Set_Cursor_1 ; Select column and row
0BD0 D0E0      1109            pop acc
0BD2 C083      1110            push dph
0BD4 C082      1110            push dpl
0BD6 C0E0      1110            push acc
0BD8 9003DB    1110            mov dptr, #MenuSoakTime
0BDB 1200B4    1110            lcall ?Send_Constant_String
0BDE D0E0      1110            pop acc
0BE0 D082      1110            pop dpl
0BE2 D083      1110            pop dph
0BE4 C0E0      1111            push acc
0BE6 7401      1111            mov a, #1
0BE8 14        1111            dec a
0BE9 1200BF    1111            lcall ?Set_Cursor_2 ; Select column and row
0BEC D0E0      1111            pop acc
0BEE 854530    1112     mov x, soaktime
0BF1 12011F    1113     lcall hex2bcd
0BF4 C000      1114            push ar0
0BF6 A839      1114            mov r0, bcd+1
0BF8 1200C6    1114            lcall ?Display_BCD
0BFB D000      1114            pop ar0
0BFD C0E0      1115            push acc
0BFF 7403      1115            mov a, #3
0C01 14        1115            dec a
0C02 1200BF    1115            lcall ?Set_Cursor_2 ; Select column and row
0C05 D0E0      1115            pop acc
0C07 C000      1116            push ar0
0C09 A838      1116            mov r0, bcd+0
0C0B 1200C6    1116            lcall ?Display_BCD
0C0E D000      1116            pop ar0
0C10           1117   Set_SoakTime2:
0C10 20840F    1118     jb BUTTON_1, Set_SoakTime2_2
0C13 C002      1119            push AR2
0C15 7A32      1119            mov R2, #50
0C17 120039    1119            lcall ?Wait_Milli_Seconds
0C1A D002      1119            pop AR2
0C1C 208403    1120     jb BUTTON_1, Set_SoakTime2_2
0C1F 020C49    1121     ljmp SoakTime_inc
0C22           1122   Set_SoakTime2_2:
0C22 20850F    1123     jb BUTTON_2, Set_SoakTime2_3
0C25 C002      1124            push AR2
0C27 7A32      1124            mov R2, #50
0C29 120039    1124            lcall ?Wait_Milli_Seconds
0C2C D002      1124            pop AR2
0C2E 208503    1125     jb BUTTON_2, Set_SoakTime2_3
0C31 020C6D    1126     ljmp SoakTime_dec
0C34           1127   Set_SoakTime2_3:
0C34 20860F    1128            jb BUTTON_3, Set_SoakTime2_4
0C37 C002      1129            push AR2
0C39 7A32      1129            mov R2, #50
0C3B 120039    1129            lcall ?Wait_Milli_Seconds
0C3E D002      1129            pop AR2
0C40 208603    1130     jb BUTTON_3, Set_SoakTime2_4
0C43 020A02    1131     ljmp Menu_select1
0C46           1132   Set_SoakTime2_4:
0C46 020C10    1133     ljmp Set_SoakTime2
0C49           1134   
0C49           1135   soaktime_inc:
0C49 854530    1136    mov x, soaktime
0C4C 753100    1137    mov x+1, #0
0C4F 753200    1138    mov x+2, #0
0C52 753300    1139    mov x+3, #0
0C55 753401    1140            mov y+0, #low (1 % 0x10000) 
0C58 753500    1140            mov y+1, #high(1 % 0x10000) 
0C5B 753600    1140            mov y+2, #low (1 / 0x10000) 
0C5E 753700    1140            mov y+3, #high(1 / 0x10000) 
0C61 1201E4    1141    lcall add32
0C64 853045    1142    mov soaktime, x
0C67 120C91    1143    lcall display_soak_time
0C6A 020C10    1144    ljmp Set_SoakTime2
0C6D           1145    
0C6D           1146   soaktime_dec: 
0C6D 854530    1147    mov x, soaktime
0C70 753100    1148    mov x+1, #0
0C73 753200    1149    mov x+2, #0
0C76 753300    1150    mov x+3, #0
0C79 753401    1151            mov y+0, #low (1 % 0x10000) 
0C7C 753500    1151            mov y+1, #high(1 % 0x10000) 
0C7F 753600    1151            mov y+2, #low (1 / 0x10000) 
0C82 753700    1151            mov y+3, #high(1 / 0x10000) 
0C85 120205    1152    lcall sub32
0C88 853045    1153    mov soaktime, x
0C8B 120C91    1154    lcall display_soak_time
0C8E 020C10    1155    ljmp Set_SoakTime2
0C91           1156     
0C91           1157   display_soak_time: 
0C91 854530    1158    mov x, soaktime
0C94 12011F    1159    lcall hex2bcd
0C97 C0E0      1160            push acc
0C99 7401      1160            mov a, #1
0C9B 14        1160            dec a
0C9C 1200BF    1160            lcall ?Set_Cursor_2 ; Select column and row
0C9F D0E0      1160            pop acc
0CA1 C000      1161            push ar0
0CA3 A839      1161            mov r0, bcd+1
0CA5 1200C6    1161            lcall ?Display_BCD
0CA8 D000      1161            pop ar0
0CAA C0E0      1162            push acc
0CAC 7403      1162            mov a, #3
0CAE 14        1162            dec a
0CAF 1200BF    1162            lcall ?Set_Cursor_2 ; Select column and row
0CB2 D0E0      1162            pop acc
0CB4 C000      1163            push ar0
0CB6 A838      1163            mov r0, bcd+0
0CB8 1200C6    1163            lcall ?Display_BCD
0CBB D000      1163            pop ar0
0CBD 22        1164   ret   
0CBE           1165   
0CBE           1166   
0CBE           1167   ; Second set of Menu - Set reflow parameters
0CBE           1168   Menu_select3:
0CBE 7401      1169            mov a, #0x01
0CC0 120083    1169            lcall ?WriteCommand
0CC3 C002      1170            push AR2
0CC5 7A32      1170            mov R2, #50
0CC7 120039    1170            lcall ?Wait_Milli_Seconds
0CCA D002      1170            pop AR2
0CCC           1171   Menu_select4:
0CCC C0E0      1172            push acc
0CCE 7401      1172            mov a, #1
0CD0 14        1172            dec a
0CD1 1200C1    1172            lcall ?Set_Cursor_1 ; Select column and row
0CD4 D0E0      1172            pop acc
0CD6 C083      1173            push dph
0CD8 C082      1173            push dpl
0CDA C0E0      1173            push acc
0CDC 9003B4    1173            mov dptr, #MenuMessage3
0CDF 1200B4    1173            lcall ?Send_Constant_String
0CE2 D0E0      1173            pop acc
0CE4 D082      1173            pop dpl
0CE6 D083      1173            pop dph
0CE8 C0E0      1174            push acc
0CEA 7401      1174            mov a, #1
0CEC 14        1174            dec a
0CED 1200BF    1174            lcall ?Set_Cursor_2 ; Select column and row
0CF0 D0E0      1174            pop acc
0CF2 C083      1175            push dph
0CF4 C082      1175            push dpl
0CF6 C0E0      1175            push acc
0CF8 9003C2    1175            mov dptr, #MenuMessage4
0CFB 1200B4    1175            lcall ?Send_Constant_String
0CFE D0E0      1175            pop acc
0D00 D082      1175            pop dpl
0D02 D083      1175            pop dph
0D04           1176     
0D04 C002      1177            push AR2
0D06 7A32      1177            mov R2, #50
0D08 120039    1177            lcall ?Wait_Milli_Seconds
0D0B D002      1177            pop AR2 ;go to set Reflow Temperature
0D0D 208406    1178     jb BUTTON_1, Menu_select4_2
0D10 3084FD    1179     jnb BUTTON_1, $
0D13 020D4F    1180     ljmp Jump_to_Set_ReflowTemp1
0D16           1181     
0D16           1182   Menu_select4_2:
0D16 C002      1183            push AR2
0D18 7A32      1183            mov R2, #50
0D1A 120039    1183            lcall ?Wait_Milli_Seconds
0D1D D002      1183            pop AR2 ;go to set Reflow Time
0D1F 208506    1184     jb BUTTON_2, Menu_select4_3
0D22 3085FD    1185     jnb BUTTON_2, $
0D25 020D52    1186     ljmp Jump_to_Set_ReflowTime1
0D28           1187     
0D28           1188   Menu_select4_3:
0D28 C002      1189            push AR2
0D2A 7A32      1189            mov R2, #50
0D2C 120039    1189            lcall ?Wait_Milli_Seconds
0D2F D002      1189            pop AR2 ;go to first set of menus
0D31 208606    1190     jb BUTTON_3, Menu_select4_4
0D34 3086FD    1191     jnb BUTTON_3, $
0D37 020D58    1192     ljmp Jump_to_Menu_select2
0D3A           1193   
0D3A           1194   Menu_select4_4:
0D3A C002      1195            push AR2
0D3C 7A32      1195            mov R2, #50
0D3E 120039    1195            lcall ?Wait_Milli_Seconds
0D41 D002      1195            pop AR2   ; start the reflow process
0D43 20830F    1196     jb StartButton, Jump_to_Menu_select3_1
0D46 3083FD    1197     jnb StartButton, $
0D49 020A90    1198     ljmp Jump_To_FOREVER1
0D4C           1199   
0D4C           1200   Jump_To_FOREVER2:
0D4C 0205FD    1201            ljmp FOREVER
0D4F           1202     
0D4F           1203   
0D4F           1204   Jump_to_Set_ReflowTemp1:
0D4F 020D5B    1205            ljmp Set_ReflowTemp1
0D52           1206     
0D52           1207   Jump_to_Set_ReflowTime1:
0D52 020E68    1208            ljmp Set_ReflowTime1
0D55           1209            
0D55           1210   Jump_to_Menu_select3_1:
0D55 020CCC    1211            ljmp Menu_select4
0D58           1212     
0D58           1213   Jump_to_Menu_select2:
0D58 020A02    1214            ljmp Menu_select1
0D5B           1215     
0D5B           1216   ; Settings - Reflow Temperature
0D5B           1217   Set_ReflowTemp1:
0D5B 7401      1218            mov a, #0x01
0D5D 120083    1218            lcall ?WriteCommand          ;clear display
0D60 C002      1219            push AR2
0D62 7A32      1219            mov R2, #50
0D64 120039    1219            lcall ?Wait_Milli_Seconds
0D67 D002      1219            pop AR2
0D69 C0E0      1220            push acc
0D6B 7401      1220            mov a, #1
0D6D 14        1220            dec a
0D6E 1200C1    1220            lcall ?Set_Cursor_1 ; Select column and row
0D71 D0E0      1220            pop acc
0D73 C083      1221            push dph
0D75 C082      1221            push dpl
0D77 C0E0      1221            push acc
0D79 9003E6    1221            mov dptr, #MenuReflowTemp
0D7C 1200B4    1221            lcall ?Send_Constant_String
0D7F D0E0      1221            pop acc
0D81 D082      1221            pop dpl
0D83 D083      1221            pop dph
0D85 C0E0      1222            push acc
0D87 7401      1222            mov a, #1
0D89 14        1222            dec a
0D8A 1200BF    1222            lcall ?Set_Cursor_2 ; Select column and row
0D8D D0E0      1222            pop acc
0D8F 854630    1223     mov x, reflowtemp
0D92 12011F    1224     lcall hex2bcd
0D95 C000      1225            push ar0
0D97 A839      1225            mov r0, bcd+1
0D99 1200C6    1225            lcall ?Display_BCD
0D9C D000      1225            pop ar0
0D9E C0E0      1226            push acc
0DA0 7403      1226            mov a, #3
0DA2 14        1226            dec a
0DA3 1200BF    1226            lcall ?Set_Cursor_2 ; Select column and row
0DA6 D0E0      1226            pop acc
0DA8 C000      1227            push ar0
0DAA A838      1227            mov r0, bcd+0
0DAC 1200C6    1227            lcall ?Display_BCD
0DAF D000      1227            pop ar0
0DB1           1228     
0DB1           1229   Set_ReflowTemp2:
0DB1 20840F    1230     jb BUTTON_1, Set_ReflowTemp2_2
0DB4 C002      1231            push AR2
0DB6 7A32      1231            mov R2, #50
0DB8 120039    1231            lcall ?Wait_Milli_Seconds
0DBB D002      1231            pop AR2
0DBD 208403    1232     jb BUTTON_1, Set_ReflowTemp2_2
0DC0 020E44    1233     ljmp ReflowTemp_inc
0DC3           1234   Set_ReflowTemp2_2:
0DC3 20850F    1235     jb BUTTON_2, Set_ReflowTemp2_3
0DC6 C002      1236            push AR2
0DC8 7A32      1236            mov R2, #50
0DCA 120039    1236            lcall ?Wait_Milli_Seconds
0DCD D002      1236            pop AR2
0DCF 208503    1237     jb BUTTON_2, Set_ReflowTemp2_3
0DD2 020DEA    1238     ljmp ReflowTemp_dec
0DD5           1239   Set_ReflowTemp2_3:
0DD5 20860F    1240            jb BUTTON_3, Set_ReflowTemp2_4
0DD8 C002      1241            push AR2
0DDA 7A32      1241            mov R2, #50
0DDC 120039    1241            lcall ?Wait_Milli_Seconds
0DDF D002      1241            pop AR2
0DE1 208603    1242     jb BUTTON_3, Set_ReflowTemp2_4
0DE4 020CBE    1243     ljmp Menu_select3
0DE7           1244   Set_ReflowTemp2_4:
0DE7 020DB1    1245     ljmp Set_ReflowTemp2
0DEA           1246    
0DEA           1247    
0DEA           1248    
0DEA           1249     
0DEA           1250   ReflowTemp_dec:
0DEA 854630    1251    mov x, reflowtemp
0DED 753100    1252    mov x+1, #0
0DF0 753200    1253    mov x+2, #0
0DF3 753300    1254    mov x+3, #0
0DF6 753401    1255            mov y+0, #low (1 % 0x10000) 
0DF9 753500    1255            mov y+1, #high(1 % 0x10000) 
0DFC 753600    1255            mov y+2, #low (1 / 0x10000) 
0DFF 753700    1255            mov y+3, #high(1 / 0x10000) 
0E02 120205    1256    lcall sub32
0E05 853046    1257    mov reflowtemp, x
0E08 120E0E    1258    lcall display_reflow_temp
0E0B 020DB1    1259    ljmp Set_reflowtemp2
0E0E           1260     
0E0E           1261   display_reflow_temp: 
0E0E 854630    1262    mov x, reflowtemp
0E11 753100    1263    mov x+1, #0
0E14 753200    1264    mov x+2, #0
0E17 753300    1265    mov x+3, #0
0E1A 12011F    1266    lcall hex2bcd
0E1D C0E0      1267            push acc
0E1F 7401      1267            mov a, #1
0E21 14        1267            dec a
0E22 1200BF    1267            lcall ?Set_Cursor_2 ; Select column and row
0E25 D0E0      1267            pop acc
0E27 C000      1268            push ar0
0E29 A839      1268            mov r0, bcd+1
0E2B 1200C6    1268            lcall ?Display_BCD
0E2E D000      1268            pop ar0
0E30 C0E0      1269            push acc
0E32 7403      1269            mov a, #3
0E34 14        1269            dec a
0E35 1200BF    1269            lcall ?Set_Cursor_2 ; Select column and row
0E38 D0E0      1269            pop acc
0E3A C000      1270            push ar0
0E3C A838      1270            mov r0, bcd+0
0E3E 1200C6    1270            lcall ?Display_BCD
0E41 D000      1270            pop ar0
0E43 22        1271   ret   
0E44           1272    
0E44           1273     
0E44           1274   Reflowtemp_inc:
0E44 854630    1275    mov x, reflowtemp
0E47 753100    1276    mov x+1, #0
0E4A 753200    1277    mov x+2, #0
0E4D 753300    1278    mov x+3, #0
0E50 753401    1279            mov y+0, #low (1 % 0x10000) 
0E53 753500    1279            mov y+1, #high(1 % 0x10000) 
0E56 753600    1279            mov y+2, #low (1 / 0x10000) 
0E59 753700    1279            mov y+3, #high(1 / 0x10000) 
0E5C 1201E4    1280    lcall add32
0E5F 853046    1281    mov reflowtemp, x
0E62 120E0E    1282    lcall display_reflow_temp
0E65 020DB1    1283    ljmp Set_Reflowtemp2
0E68           1284   
0E68           1285   ; Settings - Reflow Time
0E68           1286   Set_ReflowTime1:
0E68 7401      1287            mov a, #0x01
0E6A 120083    1287            lcall ?WriteCommand          ;clear display
0E6D C002      1288            push AR2
0E6F 7A32      1288            mov R2, #50
0E71 120039    1288            lcall ?Wait_Milli_Seconds
0E74 D002      1288            pop AR2
0E76 C0E0      1289            push acc
0E78 7401      1289            mov a, #1
0E7A 14        1289            dec a
0E7B 1200C1    1289            lcall ?Set_Cursor_1 ; Select column and row
0E7E D0E0      1289            pop acc
0E80 C083      1290            push dph
0E82 C082      1290            push dpl
0E84 C0E0      1290            push acc
0E86 9003F3    1290            mov dptr, #MenuReflowTime
0E89 1200B4    1290            lcall ?Send_Constant_String
0E8C D0E0      1290            pop acc
0E8E D082      1290            pop dpl
0E90 D083      1290            pop dph
0E92 C0E0      1291            push acc
0E94 7401      1291            mov a, #1
0E96 14        1291            dec a
0E97 1200BF    1291            lcall ?Set_Cursor_2 ; Select column and row
0E9A D0E0      1291            pop acc
0E9C 854730    1292     mov x, reflowtime
0E9F 12011F    1293     lcall hex2bcd
0EA2 C000      1294            push ar0
0EA4 A839      1294            mov r0, bcd+1
0EA6 1200C6    1294            lcall ?Display_BCD
0EA9 D000      1294            pop ar0
0EAB C0E0      1295            push acc
0EAD 7403      1295            mov a, #3
0EAF 14        1295            dec a
0EB0 1200BF    1295            lcall ?Set_Cursor_2 ; Select column and row
0EB3 D0E0      1295            pop acc
0EB5 C000      1296            push ar0
0EB7 A838      1296            mov r0, bcd+0
0EB9 1200C6    1296            lcall ?Display_BCD
0EBC D000      1296            pop ar0
0EBE           1297   Set_ReflowTime2:
0EBE 20840F    1298     jb BUTTON_1, Set_ReflowTime2_2
0EC1 C002      1299            push AR2
0EC3 7A32      1299            mov R2, #50
0EC5 120039    1299            lcall ?Wait_Milli_Seconds
0EC8 D002      1299            pop AR2
0ECA 208403    1300     jb BUTTON_1, Set_ReflowTime2_2
0ECD 020EF7    1301     ljmp ReflowTime_inc
0ED0           1302   Set_ReflowTime2_2:
0ED0 20850F    1303     jb BUTTON_2, Set_ReflowTime2_3
0ED3 C002      1304            push AR2
0ED5 7A32      1304            mov R2, #50
0ED7 120039    1304            lcall ?Wait_Milli_Seconds
0EDA D002      1304            pop AR2
0EDC 208503    1305     jb BUTTON_2, Set_ReflowTime2_3
0EDF 020F51    1306     ljmp ReflowTime_dec
0EE2           1307   Set_ReflowTime2_3:
0EE2 20860F    1308            jb BUTTON_3, Set_ReflowTime2_4
0EE5 C002      1309            push AR2
0EE7 7A32      1309            mov R2, #50
0EE9 120039    1309            lcall ?Wait_Milli_Seconds
0EEC D002      1309            pop AR2
0EEE 208603    1310     jb BUTTON_3, Set_ReflowTime2_4
0EF1 020CBE    1311     ljmp Menu_select3
0EF4           1312   Set_ReflowTime2_4:
0EF4 020EBE    1313     ljmp Set_ReflowTime2
0EF7           1314   
0EF7           1315   ReflowTime_inc:
0EF7 854730    1316    mov x, reflowtime
0EFA 753100    1317    mov x+1, #0
0EFD 753200    1318    mov x+2, #0
0F00 753300    1319    mov x+3, #0
0F03 753401    1320            mov y+0, #low (1 % 0x10000) 
0F06 753500    1320            mov y+1, #high(1 % 0x10000) 
0F09 753600    1320            mov y+2, #low (1 / 0x10000) 
0F0C 753700    1320            mov y+3, #high(1 / 0x10000) 
0F0F 1201E4    1321    lcall add32
0F12 853047    1322    mov reflowtime, x
0F15 120F1B    1323    lcall display_reflow_time 
0F18 020EBE    1324    ljmp Set_reflowTime2
0F1B           1325     
0F1B           1326   display_reflow_time: 
0F1B 854730    1327    mov x, reflowtime
0F1E 753100    1328    mov x+1, #0
0F21 753200    1329    mov x+2, #0
0F24 753300    1330    mov x+3, #0
0F27 12011F    1331    lcall hex2bcd
0F2A C0E0      1332            push acc
0F2C 7401      1332            mov a, #1
0F2E 14        1332            dec a
0F2F 1200BF    1332            lcall ?Set_Cursor_2 ; Select column and row
0F32 D0E0      1332            pop acc
0F34 C000      1333            push ar0
0F36 A839      1333            mov r0, bcd+1
0F38 1200C6    1333            lcall ?Display_BCD
0F3B D000      1333            pop ar0
0F3D C0E0      1334            push acc
0F3F 7403      1334            mov a, #3
0F41 14        1334            dec a
0F42 1200BF    1334            lcall ?Set_Cursor_2 ; Select column and row
0F45 D0E0      1334            pop acc
0F47 C000      1335            push ar0
0F49 A838      1335            mov r0, bcd+0
0F4B 1200C6    1335            lcall ?Display_BCD
0F4E D000      1335            pop ar0
0F50 22        1336   ret   
0F51           1337    
0F51           1338     
0F51           1339   ReflowTime_dec:
0F51 854730    1340    mov x, reflowtime
0F54 753100    1341    mov x+1, #0
0F57 753200    1342    mov x+2, #0
0F5A 753300    1343    mov x+3, #0
0F5D 753401    1344            mov y+0, #low (1 % 0x10000) 
0F60 753500    1344            mov y+1, #high(1 % 0x10000) 
0F63 753600    1344            mov y+2, #low (1 / 0x10000) 
0F66 753700    1344            mov y+3, #high(1 / 0x10000) 
0F69 120205    1345    lcall sub32
0F6C 853047    1346    mov reflowtime, x
0F6F 120F1B    1347    lcall display_reflow_time
0F72 020EBE    1348    ljmp Set_Reflowtime2
0F75           1349   
0F75           1350   
0F75           1351   ;--------------------;
0F75           1352   ; Bonus - Song stuff ;
0F75           1353   ;--------------------;
0F75           1354   ;;;These aren't used in this program (for now at least)
0F75           1355   Tone1:
0F75 7401      1356            mov a, #0x01
0F77 120083    1356            lcall ?WriteCommand
0F7A C002      1357            push AR2
0F7C 7A32      1357            mov R2, #50
0F7E 120039    1357            lcall ?Wait_Milli_Seconds
0F81 D002      1357            pop AR2
0F83 C0E0      1358            push acc
0F85 7401      1358            mov a, #1
0F87 14        1358            dec a
0F88 1200C1    1358            lcall ?Set_Cursor_1 ; Select column and row
0F8B D0E0      1358            pop acc
0F8D C083      1359            push dph
0F8F C082      1359            push dpl
0F91 C0E0      1359            push acc
0F93 900444    1359            mov dptr, #Tone_Message1
0F96 1200B4    1359            lcall ?Send_Constant_String
0F99 D0E0      1359            pop acc
0F9B D082      1359            pop dpl
0F9D D083      1359            pop dph
0F9F C0E0      1360            push acc
0FA1 7401      1360            mov a, #1
0FA3 14        1360            dec a
0FA4 1200BF    1360            lcall ?Set_Cursor_2 ; Select column and row
0FA7 D0E0      1360            pop acc
0FA9 C083      1361            push dph
0FAB C082      1361            push dpl
0FAD C0E0      1361            push acc
0FAF 900455    1361            mov dptr, #Tone_Message2
0FB2 1200B4    1361            lcall ?Send_Constant_String
0FB5 D0E0      1361            pop acc
0FB7 D082      1361            pop dpl
0FB9 D083      1361            pop dph
0FBB           1362   
0FBB           1363   Tone2:
0FBB 208406    1364            jb BUTTON_1, Tone2_2
0FBE 3084FD    1365            jnb BUTTON_1, $
0FC1 021165    1366            ljmp TonePlayer1
0FC4           1367   Tone2_2:
0FC4 208506    1368            jb BUTTON_2, Tone2_3
0FC7 3085FD    1369            jnb BUTTON_2, $
0FCA 02120E    1370            ljmp TonePlayer2
0FCD           1371   Tone2_3:
0FCD 2086EB    1372            jb BUTTON_3, Tone2
0FD0 3086FD    1373            jnb BUTTON_3, $
0FD3 021278    1374            ljmp TonePlayer3
0FD6           1375            
0FD6           1376   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0FD6           1377   ToneC4:
0FD6 C000      1378            push ar0
0FD8 785B      1378            mov r0, #high(C4_reload)
0FDA 1200FA    1378            lcall ?ToneSetH
0FDD D000      1378            pop ar0
0FDF C000      1379            push ar0
0FE1 781E      1379            mov r0, #low(C4_reload)
0FE3 1200FF    1379            lcall ?ToneSetL
0FE6 D000      1379            pop ar0
0FE8 22        1380            ret
0FE9           1381   
0FE9           1382   ToneD4:
0FE9 C000      1383            push ar0
0FEB 786D      1383            mov r0, #high(D4_reload)
0FED 1200FA    1383            lcall ?ToneSetH
0FF0 D000      1383            pop ar0
0FF2 C000      1384            push ar0
0FF4 7810      1384            mov r0, #low(D4_reload)
0FF6 1200FF    1384            lcall ?ToneSetL
0FF9 D000      1384            pop ar0
0FFB 22        1385            ret
0FFC           1386   
0FFC           1387   ToneE4:
0FFC C000      1388            push ar0
0FFE 787D      1388            mov r0, #high(E4_reload)
1000 1200FA    1388            lcall ?ToneSetH
1003 D000      1388            pop ar0
1005 C000      1389            push ar0
1007 7818      1389            mov r0, #low(E4_reload)
1009 1200FF    1389            lcall ?ToneSetL
100C D000      1389            pop ar0
100E 22        1390            ret
100F           1391   
100F           1392   ToneF4:
100F C000      1393            push ar0
1011 7884      1393            mov r0, #high(F4_reload)
1013 1200FA    1393            lcall ?ToneSetH
1016 D000      1393            pop ar0
1018 C000      1394            push ar0
101A 7838      1394            mov r0, #low(F4_reload)
101C 1200FF    1394            lcall ?ToneSetL
101F D000      1394            pop ar0
1021 22        1395            ret
1022           1396   
1022           1397   ToneG4:
1022 C000      1398            push ar0
1024 7891      1398            mov r0, #high(G4_reload)
1026 1200FA    1398            lcall ?ToneSetH
1029 D000      1398            pop ar0
102B C000      1399            push ar0
102D 78CC      1399            mov r0, #low(G4_reload)
102F 1200FF    1399            lcall ?ToneSetL
1032 D000      1399            pop ar0
1034 22        1400            ret
1035           1401                    
1035           1402   ToneA4:
1035 C000      1403            push ar0
1037 789D      1403            mov r0, #high(A4_reload)
1039 1200FA    1403            lcall ?ToneSetH
103C D000      1403            pop ar0
103E C000      1404            push ar0
1040 78D2      1404            mov r0, #low(A4_reload)
1042 1200FF    1404            lcall ?ToneSetL
1045 D000      1404            pop ar0
1047 22        1405            ret
1048           1406            
1048           1407   ToneB4:
1048 C000      1408            push ar0
104A 78A8      1408            mov r0, #high(B4_reload)
104C 1200FA    1408            lcall ?ToneSetH
104F D000      1408            pop ar0
1051 C000      1409            push ar0
1053 788D      1409            mov r0, #low(B4_reload)
1055 1200FF    1409            lcall ?ToneSetL
1058 D000      1409            pop ar0
105A 22        1410            ret
105B           1411   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
105B           1412   ToneC5:
105B C000      1413            push ar0
105D 78AD      1413            mov r0, #high(C5_reload)
105F 1200FA    1413            lcall ?ToneSetH
1062 D000      1413            pop ar0
1064 C000      1414            push ar0
1066 7867      1414            mov r0, #low(C5_reload)
1068 1200FF    1414            lcall ?ToneSetL
106B D000      1414            pop ar0
106D 22        1415            ret
106E           1416   
106E           1417   ToneD5:
106E C000      1418            push ar0
1070 78B6      1418            mov r0, #high(D5_reload)
1072 1200FA    1418            lcall ?ToneSetH
1075 D000      1418            pop ar0
1077 C000      1419            push ar0
1079 7868      1419            mov r0, #low(D5_reload)
107B 1200FF    1419            lcall ?ToneSetL
107E D000      1419            pop ar0
1080 22        1420            ret
1081           1421            
1081           1422   ToneE5:
1081 C000      1423            push ar0
1083 78BE      1423            mov r0, #high(E5_reload)
1085 1200FA    1423            lcall ?ToneSetH
1088 D000      1423            pop ar0
108A C000      1424            push ar0
108C 7873      1424            mov r0, #low(E5_reload)
108E 1200FF    1424            lcall ?ToneSetL
1091 D000      1424            pop ar0
1093 22        1425            ret
1094           1426            
1094           1427   ToneF5:
1094 C000      1428            push ar0
1096 78C2      1428            mov r0, #high(F5_reload)
1098 1200FA    1428            lcall ?ToneSetH
109B D000      1428            pop ar0
109D C000      1429            push ar0
109F 781C      1429            mov r0, #low(F5_reload)
10A1 1200FF    1429            lcall ?ToneSetL
10A4 D000      1429            pop ar0
10A6 22        1430            ret
10A7           1431            
10A7           1432   ToneG5:
10A7 C000      1433            push ar0
10A9 78C8      1433            mov r0, #high(G5_reload)
10AB 1200FA    1433            lcall ?ToneSetH
10AE D000      1433            pop ar0
10B0 C000      1434            push ar0
10B2 78E6      1434            mov r0, #low(G5_reload)
10B4 1200FF    1434            lcall ?ToneSetL
10B7 D000      1434            pop ar0
10B9 22        1435            ret
10BA           1436            
10BA           1437   ToneA5:
10BA C000      1438            push ar0
10BC 78CE      1438            mov r0, #high(A5_reload)
10BE 1200FA    1438            lcall ?ToneSetH
10C1 D000      1438            pop ar0
10C3 C000      1439            push ar0
10C5 78E9      1439            mov r0, #low(A5_reload)
10C7 1200FF    1439            lcall ?ToneSetL
10CA D000      1439            pop ar0
10CC 22        1440            ret
10CD           1441            
10CD           1442   ToneB5:
10CD C000      1443            push ar0
10CF 78D4      1443            mov r0, #high(B5_reload)
10D1 1200FA    1443            lcall ?ToneSetH
10D4 D000      1443            pop ar0
10D6 C000      1444            push ar0
10D8 7847      1444            mov r0, #low(B5_reload)
10DA 1200FF    1444            lcall ?ToneSetL
10DD D000      1444            pop ar0
10DF 22        1445            ret
10E0           1446   
10E0           1447   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10E0           1448   ToneG4F:
10E0 C000      1449            push ar0
10E2 788B      1449            mov r0, #high(G4F_reload)
10E4 1200FA    1449            lcall ?ToneSetH
10E7 D000      1449            pop ar0
10E9 C000      1450            push ar0
10EB 783F      1450            mov r0, #low(G4F_reload)
10ED 1200FF    1450            lcall ?ToneSetL
10F0 D000      1450            pop ar0
10F2 22        1451            ret
10F3           1452            
10F3           1453   ToneA4F:
10F3 C000      1454            push ar0
10F5 7897      1454            mov r0, #high(A4F_reload)
10F7 1200FA    1454            lcall ?ToneSetH
10FA D000      1454            pop ar0
10FC C000      1455            push ar0
10FE 78E8      1455            mov r0, #low(A4F_reload)
1100 1200FF    1455            lcall ?ToneSetL
1103 D000      1455            pop ar0
1105 22        1456            ret
1106           1457   
1106           1458   ToneB4F:
1106 C000      1459            push ar0
1108 78A3      1459            mov r0, #high(B4F_reload)
110A 1200FA    1459            lcall ?ToneSetH
110D D000      1459            pop ar0
110F C000      1460            push ar0
1111 784C      1460            mov r0, #low(B4F_reload)
1113 1200FF    1460            lcall ?ToneSetL
1116 D000      1460            pop ar0
1118 22        1461            ret
1119           1462            
1119           1463   ToneC5S:
1119 C000      1464            push ar0
111B 78B2      1464            mov r0, #high(C5S_reload)
111D 1200FA    1464            lcall ?ToneSetH
1120 D000      1464            pop ar0
1122 C000      1465            push ar0
1124 7806      1465            mov r0, #low(C5S_reload)
1126 1200FF    1465            lcall ?ToneSetL
1129 D000      1465            pop ar0
112B 22        1466            ret
112C           1467   
112C           1468   ToneD5F:
112C C000      1469            push ar0
112E 78B2      1469            mov r0, #high(D5F_reload)
1130 1200FA    1469            lcall ?ToneSetH
1133 D000      1469            pop ar0
1135 C000      1470            push ar0
1137 7806      1470            mov r0, #low(D5F_reload)
1139 1200FF    1470            lcall ?ToneSetL
113C D000      1470            pop ar0
113E 22        1471            ret
113F           1472            
113F           1473   ToneE5F:
113F C000      1474            push ar0
1141 78BA      1474            mov r0, #high(E5F_reload)
1143 1200FA    1474            lcall ?ToneSetH
1146 D000      1474            pop ar0
1148 C000      1475            push ar0
114A 788C      1475            mov r0, #low(E5F_reload)
114C 1200FF    1475            lcall ?ToneSetL
114F D000      1475            pop ar0
1151 22        1476            ret
1152           1477   
1152           1478   ToneReset:
1152 C000      1479            push ar0
1154 78EA      1479            mov r0, #high(TIMER0_RELOAD)
1156 1200FA    1479            lcall ?ToneSetH
1159 D000      1479            pop ar0
115B C000      1480            push ar0
115D 78E8      1480            mov r0, #low(TIMER0_RELOAD)
115F 1200FF    1480            lcall ?ToneSetL
1162 D000      1480            pop ar0
1164 22        1481            ret
1165           1482   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1165           1483   TonePlayer1: ;Never Gonna Give You Up
1165 1210F3    1484            lcall ToneA4F              ;Nev
1168 1212EB    1485            lcall TonePlayEighthSec
116B           1486            
116B 121106    1487            lcall ToneB4F               ;er
116E 1212EB    1488            lcall TonePlayEighthSec
1171           1489            
1171 12112C    1490            lcall ToneD5F               ;gon
1174 1212EB    1491            lcall TonePlayEighthSec
1177           1492            
1177 121106    1493            lcall ToneB4F                 ;na
117A 1212EB    1494            lcall TonePlayEighthSec
117D           1495            
117D 121094    1496            lcall ToneF5                     ;give
1180 121319    1497            lcall TonePlayThreeEighthSec
1183           1498            
1183 121094    1499            lcall ToneF5                    ;you
1186 121319    1500            lcall TonePlayThreeEighthSec
1189           1501            
1189 12113F    1502            lcall ToneE5F                   ;up
118C 121319    1503            lcall TonePlayThreeEighthSec   
118F           1504            
118F C002      1505            push AR2
1191 7A50      1505            mov R2, #80
1193 120039    1505            lcall ?Wait_Milli_Seconds
1196 D002      1505            pop AR2
1198           1506            
1198 1210F3    1507            lcall ToneA4F                ;Nev
119B 1212EB    1508            lcall TonePlayEighthSec
119E           1509            
119E 121106    1510            lcall ToneB4F                 ;er
11A1 1212EB    1511            lcall TonePlayEighthSec
11A4           1512            
11A4 12105B    1513            lcall ToneC5                   ;gon
11A7 1212EB    1514            lcall TonePlayEighthSec
11AA           1515            
11AA 1210F3    1516            lcall ToneA4F                  ;na
11AD 1212EB    1517            lcall TonePlayEighthSec
11B0           1518            
11B0 12113F    1519            lcall ToneE5F                    ;let
11B3 121319    1520            lcall TonePlayThreeEighthSec
11B6           1521            
11B6 12113F    1522            lcall ToneE5F                   ;you
11B9 121319    1523            lcall TonePlayThreeEighthSec
11BC           1524            
11BC 12112C    1525            lcall ToneD5F                  ;down
11BF 121319    1526            lcall TonePlayThreeEighthSec
11C2           1527            
11C2 C002      1528            push AR2
11C4 7A50      1528            mov R2, #80
11C6 120039    1528            lcall ?Wait_Milli_Seconds
11C9 D002      1528            pop AR2
11CB           1529                    
11CB 1210F3    1530            lcall ToneA4F              ;Nev
11CE 1212EB    1531            lcall TonePlayEighthSec
11D1           1532            
11D1 121106    1533            lcall ToneB4F                ;er
11D4 1212EB    1534            lcall TonePlayEighthSec
11D7           1535            
11D7 12112C    1536            lcall ToneD5F                   ;gon
11DA 1212EB    1537            lcall TonePlayEighthSec
11DD           1538            
11DD 121106    1539            lcall ToneB4F                   ;na
11E0 1212EB    1540            lcall TonePlayEighthSec
11E3           1541   
11E3 12112C    1542            lcall ToneD5F                 ;run
11E6 121302    1543            lcall TonePlayQuarterSec
11E9           1544            
11E9 12113F    1545            lcall ToneE5F                  ;a
11EC 121319    1546            lcall TonePlayThreeEighthSec
11EF           1547            
11EF 12105B    1548            lcall ToneC5                   ;round
11F2 121319    1549            lcall TonePlayThreeEighthSec
11F5           1550            
11F5           1551            ;lcall ToneB4F
11F5           1552            ;lcall TonePlayEighthSec
11F5           1553            
11F5 1210F3    1554            lcall ToneA4F                ;and
11F8 121302    1555            lcall TonePlayQuarterSec        
11FB           1556            
11FB 1210F3    1557            lcall ToneA4F                ;de
11FE 1212EB    1558            lcall TonePlayEighthSec
1201           1559            
1201 12113F    1560            lcall ToneE5F                  ;sert
1204 121319    1561            lcall TonePlayThreeEighthSec
1207           1562            
1207 12112C    1563            lcall ToneD5F             ;you
120A 121319    1564            lcall TonePlayThreeEighthSec
120D           1565            
120D 22        1566            ret
120E           1567   
120E           1568   TonePlayer2: ;Mario
120E 121081    1569            lcall ToneE5
1211 121302    1570            lcall TonePlayQuarterSec
1214           1571            
1214 121081    1572            lcall ToneE5
1217 121302    1573            lcall TonePlayQuarterSec
121A           1574            
121A C002      1575            push AR2
121C 7A50      1575            mov R2, #80
121E 120039    1575            lcall ?Wait_Milli_Seconds
1221 D002      1575            pop AR2
1223           1576                    
1223 121081    1577            lcall ToneE5
1226 121319    1578            lcall TonePlayThreeEighthSec
1229           1579   
1229 C002      1580            push AR2
122B 7A50      1580            mov R2, #80
122D 120039    1580            lcall ?Wait_Milli_Seconds
1230 D002      1580            pop AR2
1232           1581                    
1232 12105B    1582            lcall ToneC5
1235 121302    1583            lcall TonePlayQuarterSec
1238           1584            
1238 121081    1585            lcall ToneE5
123B 121302    1586            lcall TonePlayQuarterSec
123E           1587            
123E C002      1588            push AR2
1240 7A50      1588            mov R2, #80
1242 120039    1588            lcall ?Wait_Milli_Seconds
1245 D002      1588            pop AR2
1247           1589            
1247 1210A7    1590            lcall ToneG5
124A 121319    1591            lcall TonePlayThreeEighthSec
124D           1592            
124D C002      1593            push AR2
124F 7A50      1593            mov R2, #80
1251 120039    1593            lcall ?Wait_Milli_Seconds
1254 D002      1593            pop AR2
1256 C002      1594            push AR2
1258 7A50      1594            mov R2, #80
125A 120039    1594            lcall ?Wait_Milli_Seconds
125D D002      1594            pop AR2
125F C002      1595            push AR2
1261 7A50      1595            mov R2, #80
1263 120039    1595            lcall ?Wait_Milli_Seconds
1266 D002      1595            pop AR2
1268 C002      1596            push AR2
126A 7A50      1596            mov R2, #80
126C 120039    1596            lcall ?Wait_Milli_Seconds
126F D002      1596            pop AR2
1271           1597            
1271 121022    1598            lcall ToneG4
1274 121330    1599            lcall TonePlayHalfSec
1277           1600            
1277 22        1601            ret
1278           1602   
1278           1603   TonePlayer3: ;Star Wars
1278 120FD6    1604            lcall ToneC4
127B 121330    1605            lcall TonePlayHalfSec
127E           1606            
127E 121022    1607            lcall ToneG4
1281 121330    1608            lcall TonePlayHalfSec
1284           1609            
1284 12100F    1610            lcall ToneF4
1287 121302    1611            lcall TonePlayQuarterSec
128A           1612            
128A 120FFC    1613            lcall ToneE4
128D 121319    1614            lcall TonePlayThreeEighthSec
1290           1615            
1290 120FE9    1616            lcall ToneD4
1293 121319    1617            lcall TonePlayThreeEighthSec
1296           1618            
1296 12105B    1619            lcall ToneC5
1299 121330    1620            lcall TonePlayHalfSec
129C           1621                    
129C 121022    1622            lcall ToneG4
129F 121302    1623            lcall TonePlayQuarterSec
12A2           1624            
12A2 C002      1625            push AR2
12A4 7A50      1625            mov R2, #80
12A6 120039    1625            lcall ?Wait_Milli_Seconds
12A9 D002      1625            pop AR2
12AB           1626                    
12AB 12100F    1627            lcall ToneF4
12AE 121302    1628            lcall TonePlayQuarterSec
12B1           1629            
12B1 120FFC    1630            lcall ToneE4
12B4 121302    1631            lcall TonePlayQuarterSec
12B7           1632            
12B7 120FE9    1633            lcall ToneD4
12BA 121302    1634            lcall TonePlayQuarterSec
12BD           1635            
12BD 12105B    1636            lcall ToneC5
12C0 121330    1637            lcall TonePlayHalfSec
12C3           1638            
12C3 121022    1639            lcall ToneG4
12C6 121302    1640            lcall TonePlayQuarterSec
12C9           1641            
12C9 C002      1642            push AR2
12CB 7A50      1642            mov R2, #80
12CD 120039    1642            lcall ?Wait_Milli_Seconds
12D0 D002      1642            pop AR2
12D2           1643                    
12D2 12100F    1644            lcall ToneF4
12D5 121302    1645            lcall TonePlayQuarterSec
12D8           1646            
12D8 120FFC    1647            lcall ToneE4
12DB 121302    1648            lcall TonePlayQuarterSec
12DE           1649            
12DE 12100F    1650            lcall ToneF4
12E1 121302    1651            lcall TonePlayQuarterSec
12E4           1652            
12E4 120FE9    1653            lcall ToneD4
12E7 121330    1654            lcall TonePlayHalfSec
12EA           1655            
12EA 22        1656            ret
12EB           1657   
12EB           1658   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12EB           1659   TonePlayEighthSec:
12EB D28C      1660            setb TR0
12ED C002      1661            push AR2
12EF 7A01      1661            mov R2, #0x1
12F1 120104    1661            lcall ?Delay_PercentSec
12F4 D002      1661            pop AR2   ; 1*(1/8) = 1/8 sec
12F6 C28C      1662            clr TR0
12F8 C002      1663            push AR2
12FA 7A50      1663            mov R2, #80
12FC 120039    1663            lcall ?Wait_Milli_Seconds
12FF D002      1663            pop AR2
1301 22        1664            ret
1302           1665   
1302           1666   TonePlayQuarterSec:
1302 D28C      1667            setb TR0
1304 C002      1668            push AR2
1306 7A02      1668            mov R2, #0x2
1308 120104    1668            lcall ?Delay_PercentSec
130B D002      1668            pop AR2   ; 2*(1/8) = 1/4 sec
130D C28C      1669            clr TR0
130F C002      1670            push AR2
1311 7A50      1670            mov R2, #80
1313 120039    1670            lcall ?Wait_Milli_Seconds
1316 D002      1670            pop AR2
1318 22        1671            ret
1319           1672   
1319           1673   TonePlayThreeEighthSec:
1319 D28C      1674            setb TR0
131B C002      1675            push AR2
131D 7A03      1675            mov R2, #0x3
131F 120104    1675            lcall ?Delay_PercentSec
1322 D002      1675            pop AR2   ; 3*(1/8) = 3/8 sec
1324 C28C      1676            clr TR0
1326 C002      1677            push AR2
1328 7A50      1677            mov R2, #80
132A 120039    1677            lcall ?Wait_Milli_Seconds
132D D002      1677            pop AR2
132F 22        1678            ret
1330           1679   
1330           1680   TonePlayHalfSec:
1330 D28C      1681            setb TR0
1332 C002      1682            push AR2
1334 7A04      1682            mov R2, #0x4
1336 120104    1682            lcall ?Delay_PercentSec
1339 D002      1682            pop AR2   ; 4*(1/8) = 1/2 sec
133B C28C      1683            clr TR0
133D C002      1684            push AR2
133F 7A50      1684            mov R2, #80
1341 120039    1684            lcall ?Wait_Milli_Seconds
1344 D002      1684            pop AR2
1346 22        1685            ret
1347           1686   
1347           1687   TonePlayOneSec:
1347 D28C      1688            setb TR0
1349 C002      1689            push AR2
134B 7A08      1689            mov R2, #0x8
134D 120104    1689            lcall ?Delay_PercentSec
1350 D002      1689            pop AR2   ; 8*(1/8) = 1 sec
1352 C28C      1690            clr TR0
1354 C002      1691            push AR2
1356 7A50      1691            mov R2, #80
1358 120039    1691            lcall ?Wait_Milli_Seconds
135B D002      1691            pop AR2
135D 22        1692            ret
135E           1693   
135E           1694   TonePlayOneandHalfSec:
135E D28C      1695            setb TR0
1360 C002      1696            push AR2
1362 7A12      1696            mov R2, #0x12
1364 120104    1696            lcall ?Delay_PercentSec
1367 D002      1696            pop AR2   ; 12*(1/8) = 1.5 sec
1369 C28C      1697            clr TR0
136B C002      1698            push AR2
136D 7A50      1698            mov R2, #80
136F 120039    1698            lcall ?Wait_Milli_Seconds
1372 D002      1698            pop AR2
1374 22        1699            ret     
1375           1700            
1375           1701   
1375           1702   EN
=======
041F            135   
041F 20202020   136   Blank: db '              ',0
     20202020
     20202020
     202000
042E            137   
042E            138   ;---------------------------------;
042E            139   ; Routine to initialize the ISR   ;
042E            140   ; for timer 0                     ;
042E            141   ;---------------------------------;
042E            142   
042E            143   Timer0_Init:
042E E589       144            mov a, TMOD
0430 54F0       145            anl a, #0xf0 ; Clear the bits for timer 0
0432 4401       146            orl a, #0x01 ; Configure timer 0 as 16-timer
0434 F589       147            mov TMOD, a
0436 758CEA     148            mov TH0, #high(TIMER0_RELOAD)
0439 758AE8     149            mov TL0, #low(TIMER0_RELOAD)
043C            150            ; Set autoreload value
043C 75F4EA     151            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
043F 75F2E8     152            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0442            153            ; Enable the timer and interrupts
0442 D2A9       154       setb ET0  ; Enable timer 0 interrupt
0444            155       ;setb TR0  ; Start timer 0
0444 22         156            ret
0445            157   
0445            158   ;---------------------------------;
0445            159   ; ISR for timer 0.  Set to execute;
0445            160   ; every 1/4096Hz to generate a    ;
0445            161   ; 2048 Hz square wave at pin P3.7 ;
0445            162   ;---------------------------------;
0445            163   
0445            164   Timer0_ISR:
0445            165   ;        cpl SOUND_OUT; Connect speaker to P3.7!
0445 32         166            reti
0446            167     
0446            168   ;---------------------------------;
0446            169   ; Routine to initialize the ISR   ;
0446            170   ; for timer 2                     ;
0446            171   ;---------------------------------;
0446            172   Timer2_Init:
0446 75C800     173            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0449 75CDA9     174            mov TH2, #high(TIMER2_RELOAD)
044C 75CC9A     175            mov TL2, #low(TIMER2_RELOAD)
044F            176            ; Set the reload value
044F 75CBA9     177            mov RCAP2H, #high(TIMER2_RELOAD)
0452 75CA9A     178            mov RCAP2L, #low(TIMER2_RELOAD)
0455            179            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0455 E4         180            clr a
0456 F54D       181            mov Count1ms+0, a
0458 F54E       182            mov Count1ms+1, a
045A            183            ; Enable the timer and interrupts
045A D2AD       184       setb ET2  ; Enable timer 2 interrupt
045C D2CA       185       setb TR2  ; Enable timer 2
045E 22         186            ret
045F            187   
045F            188   ;---------------------------------;
045F            189   ; ISR for timer 2                 ;
045F            190   ;---------------------------------;
045F            191   Timer2_ISR:
045F C2CF       192            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0461 B2B6       193            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0463            194            
0463            195            ; The two registers used in the ISR must be saved in the stack
0463 C0E0       196            push acc
0465 C0D0       197            push psw
0467            198            
0467 D281       199            setb CA1
0469 D282       200            setb CA2
046B D280       201            setb CA3
046D            202   
046D E557       203            mov a, state
046F            204   state0:
046F B4000B     205            cjne a, #0, state1
0472 E554       206            mov a, disp1
0474 1204C0     207            lcall load_segments
0477 C281       208            clr CA1
0479 0557       209            inc state
047B 8020       210            sjmp state_done
047D            211   state1:
047D B4010B     212            cjne a, #1, state2
0480 E555       213            mov a, disp2
0482 1204C0     214            lcall load_segments
0485 C282       215            clr CA2
0487 0557       216            inc state
0489 8012       217            sjmp state_done
048B            218   state2:
048B B4020C     219            cjne a, #2, state_reset
048E E556       220            mov a, disp3
0490 1204C0     221            lcall load_segments
0493 C280       222            clr CA3
0495 755700     223            mov state, #0
0498 8003       224            sjmp state_done
049A            225   state_reset:
049A 755700     226            mov state, #0
049D            227   state_done:
049D            228            ; Increment the 16-bit one mili second counter
049D 054D       229            inc Count1ms+0    ; Increment the low 8-bits first
049F E54D       230            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04A1 7002       231            jnz Inc_Done
04A3 054E       232            inc Count1ms+1
04A5            233   
04A5            234     Inc_Done:
04A5            235            ; Check if half second has passed
04A5 E54D       236            mov a, Count1ms+0
04A7 B4E811     237            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04AA E54E       238            mov a, Count1ms+1
04AC B4030C     239            cjne a, #high(1000), Timer2_ISR_done
04AF            240            
04AF            241       ; cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
04AF            242       ; where is halfsecondflag?                                   
04AF            243                                            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
04AF E4         244            clr a
04B0 F54D       245            mov Count1ms+0, a
04B2 F54E       246            mov Count1ms+1, a
04B4            247     
04B4 E550       248            mov a, second   ; Increment the BCD counter
04B6            249   
04B6 2401       250            add a, #0x01 ;THIS IS ADDING SECONDS
04B8            251   
04B8 D4         252            da a ; Decimal adjust instruction.  Check datasheet for more details!
04B9 F550       253            mov second, a
04BB            254            
04BB            255   Timer2_ISR_done:
04BB D0D0       256            pop psw
04BD D0E0       257            pop acc
04BF 32         258            reti
04C0            259   
04C0            260   load_segments:
04C0 A2E0       261            mov c, acc.0
04C2 92A4       262            mov SEGA, c
04C4 A2E1       263            mov c, acc.1
04C6 92A5       264            mov SEGB, c
04C8 A2E2       265            mov c, acc.2
04CA 92A6       266            mov SEGC, c
04CC A2E3       267            mov c, acc.3
04CE 92A7       268            mov SEGD, c
04D0 A2E4       269            mov c, acc.4
04D2 92C5       270            mov SEGE, c
04D4 A2E5       271            mov c, acc.5
04D6 92C4       272            mov SEGF, c
04D8 A2E6       273            mov c, acc.6
04DA 9287       274            mov SEGG, c
04DC A2E7       275            mov c, acc.7
04DE            276            ;mov SEGP, c
04DE 22         277            ret  
04DF            278   ;---------------------------------;
04DF            279   ; initialize the slave                 ;
04DF            280   ;---------------------------------;
04DF            281   
04DF            282   INIT_SPI:
04DF D2A2       283    setb MY_MISO ; Make MISO an input pin
04E1 C2A3       284    clr MY_SCLK ; For mode (0,0) SCLK is zero
04E3 22         285    ret
04E4            286   
04E4            287   ;---------------------------------;
04E4            288   ; receive and send data                          ;
04E4            289   ;---------------------------------;
04E4            290   
04E4            291   DO_SPI_G:
04E4 C0E0       292             push acc
04E6 7900       293             mov R1, #0 ; Received byte stored in R1
04E8 7A08       294             mov R2, #8 ; Loop counter (8-bits)
04EA            295   DO_SPI_G_LOOP:
04EA E8         296             mov a, R0 ; Byte to write is in R0
04EB 33         297             rlc a ; Carry flag has bit to write
04EC F8         298             mov R0, a
04ED 92A1       299             mov MY_MOSI, c
04EF D2A3       300             setb MY_SCLK ; Transmit
04F1 A2A2       301             mov c, MY_MISO ; Read received bit
04F3 E9         302             mov a, R1 ; Save received bit in R1
04F4 33         303             rlc a
04F5 F9         304             mov R1, a
04F6 C2A3       305             clr MY_SCLK
04F8 DAF0       306             djnz R2, DO_SPI_G_LOOP
04FA D0E0       307             pop acc
04FC 22         308             ret
04FD            309   
04FD            310   ; Send a character using the serial port
04FD            311   putchar1:
04FD 3099FD     312       jnb TI, putchar1
0500 C299       313       clr TI
0502 F599       314       mov SBUF, a
0504 22         315       ret
0505            316   
0505            317   ; Send a constant-zero-terminated string using the serial port
0505            318   SendString:
0505 E4         319       clr A
0506 93         320       movc A, @A+DPTR
0507 6006       321       jz SendStringDone
0509 1204FD     322       lcall putchar1
050C A3         323       inc DPTR
050D 80F6       324       sjmp SendString
050F            325   SendStringDone:
050F 22         326       ret
0510            327   
0510            328   Display_10_digit_BCD:
0510 C0E0       329            push acc
0512 7406       329            mov a, #6
0514 14         329            dec a
0515 1200C1     329            lcall ?Set_Cursor_1 ; Select column and row
0518 D0E0       329            pop acc
051A C000       330            push ar0
051C A83C       330            mov r0, bcd+4
051E 1200C6     330            lcall ?Display_BCD
0521 D000       330            pop ar0
0523 C000       331            push ar0
0525 A83B       331            mov r0, bcd+3
0527 1200C6     331            lcall ?Display_BCD
052A D000       331            pop ar0
052C C000       332            push ar0
052E A83A       332            mov r0, bcd+2
0530 1200C6     332            lcall ?Display_BCD
0533 D000       332            pop ar0
0535 C000       333            push ar0
0537 A839       333            mov r0, bcd+1
0539 1200C6     333            lcall ?Display_BCD
053C D000       333            pop ar0
053E C000       334            push ar0
0540 A838       334            mov r0, bcd+0
0542 1200C6     334            lcall ?Display_BCD
0545 D000       334            pop ar0
0547 22         335            ret
0548            336            
0548            337   ;---------------------------------;
0548            338   ; initialize the serial ports     ;
0548            339   ;---------------------------------;
0548            340   InitSerialPort:
0548            341       ; Since the reset button bounces, we need to wait a bit before
0548            342       ; sending messages, otherwise we risk displaying gibberish!
0548 79DE       343       mov R1, #222
054A 78A6       344       mov R0, #166
054C D8FE       345       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
054E D9FA       346       djnz R1, $-4 ; 22.51519us*222=4.998ms
0550            347       ; Now we can proceed with the configuration
0550 438780     348            orl     PCON,#0x80
0553 759852     349            mov     SCON,#0x52
0556 759B00     350            mov     BDRCON,#0x00
0559 759AF4     351            mov     BRL,#BRG_VAL
055C 759B1E     352            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
055F 22         353       ret
0560            354    
0560            355   ; CODE FOR DISPLAYING 7SEG 
0560            356     display7seg:
0560            357                    ; ones digit disp 2
0560 90057B     358            mov dptr, #HEX_7SEG
0563 E538       359            mov a, bcd+0
0565 540F       360            anl a, #0x0f
0567 93         361            movc a, @a+dptr
0568 F555       362            mov disp2, a
056A            363            
056A            364            ;tens digit disp3
056A E538       365            mov a, bcd+0
056C C4         366            swap a
056D 540F       367            anl a, #0x0f
056F 93         368            movc a, @a+dptr
0570 F556       369            mov disp3, a
0572            370            
0572            371            ;hundreds digit disp1
0572 E4         372            clr a
0573            373            
0573 E539       374            mov a, bcd+1
0575            375            ;swap a
0575 540F       376            anl a, #0x0f
0577 93         377            movc a, @a+dptr
0578            378            
0578 F554       379            mov disp1, a
057A            380            
057A 22         381            ret
057B            382    ;---------------------------------;
057B            383   ; MAIN PROGRAM                                                         ;
057B            384   ;---------------------------------;  
057B            385   
057B C0F9A4B0   386   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
0585            387   
0585            388   MainProgram:
0585 75817F     389            mov sp, #07FH ; Initialize the stack pointer
0588            390            ; Configure P0 in bidirectional mode
0588 75E600     391       mov P0M0, #0
058B 75E700     392       mov P0M1, #0
058E D2AF       393       setb EA 
0590 120088     394       lcall LCD_4BIT
0593 754400     395       mov soaktemp, #0
0596            396       
0596 754500     397       mov soaktime, #0
0599            398   
0599 754600     399       mov reflowtemp, #0
059C            400      
059C 754700     401       mov reflowtime, #0
059F            402   
059F 755000     403       mov second, #0
05A2            404      ; mov countererror, #0        ; to check if the thermocouple is in the oven
05A2            405                    
05A2            406       ;initial message 
05A2            407      ; Set_Cursor(1, 1)
05A2            408      ; Send_Constant_String(#Test_msg)
05A2            409      ; Set_Cursor(1,11)
05A2            410      ; WriteData(#223) ; print the degree sign   
05A2 755300     411       mov count, #0
05A5            412       
05A5 120548     413       lcall InitSerialPort
05A8 1204DF     414                    lcall INIT_SPI
05AB 12042E     415                    lcall Timer0_Init
05AE            416     ;  lcall Timer2_Init
05AE 120758     417      lcall TurnOvenOff
05B1            418     ; lcall TurnOvenOn
05B1 0209A0     419      ljmp Menu_select1 ;; selecting and setting profiles
05B4            420       
05B4            421   FOREVER: ;this will be how the oven is being controlled ; jump here once start button is pressed!!!
05B4            422   ;------state 1 -------- ;        
05B4 C0E0       423            push acc
05B6 7401       423            mov a, #1
05B8 14         423            dec a
05B9 1200C1     423            lcall ?Set_Cursor_1 ; Select column and row
05BC D0E0       423            pop acc
05BE C083       424            push dph
05C0 C082       424            push dpl
05C2 C0E0       424            push acc
05C4 9003FD     424            mov dptr, #TemperatureRise
05C7 1200B4     424            lcall ?Send_Constant_String
05CA D0E0       424            pop acc
05CC D082       424            pop dpl
05CE D083       424            pop dph
05D0 120749     425     lcall checkstop       ;checks if stop button is pressed. If so, turns off oven and goes back to menu
05D3 1207D2     426      lcall checkerror      ;if error, terminate program and return
05D6 12073E     427      lcall Readingtemperatures  ;calculates temperature of oven using thermocouple junctions
05D9            428      
05D9 12075E     429      lcall DisplayingLCD
05DC 120560     430      lcall display7seg
05DF            431      
05DF 120951     432      lcall State_change_BEEPER ; temp = soak temp, so going to soak time state 
05E2            433    
05E2 C3         434     clr c
05E3 E544       435     mov a, soaktemp
05E5 953F       436     subb a, coldtemp
05E7 50CB       437     jnc FOREVER
05E9            438      
05E9 120758     439     lcall TurnOvenOff
05EC            440     
05EC C2CA       441      clr tr2                       ; restarting timer 2 to keep track of the time lasped since we reached soaktemp
05EE 7400       442      mov a, #0x0
05F0 F550       443      mov second, a
05F2 D2CA       444      setb tr2
05F4            445      
05F4            446     ; after we reached the soak temp stay there for __ seconds
05F4            447     ;-----state 2 ------;
05F4            448   soaktempchecked:
05F4 C0E0       449            push acc
05F6 7401       449            mov a, #1
05F8 14         449            dec a
05F9 1200C1     449            lcall ?Set_Cursor_1 ; Select column and row
05FC D0E0       449            pop acc
05FE C083       450            push dph
0600 C082       450            push dpl
0602 C0E0       450            push acc
0604 9003EC     450            mov dptr, #SoakState
0607 1200B4     450            lcall ?Send_Constant_String
060A D0E0       450            pop acc
060C D082       450            pop dpl
060E D083       450            pop dph  
0610 120749     451            lcall checkstop         
0613 12073E     452      lcall Readingtemperatures
0616 12075E     453      lcall DisplayingLCD
0619 120560     454      lcall display7seg
061C            455      
061C 1206C7     456     lcall keepingsoaktempsame ; boundary temp
061F 1206D7     457     lcall keepingsoaktempsame1
0622            458     
0622 120712     459     lcall checksoaktime ; if soak time is up go to next state
0625            460    
0625 80CD       461     sjmp soaktempchecked
0627            462     
0627            463   ; ---- state 3 ---- ; increaseing to reflow temp
0627            464   increasereflowtemp: 
0627            465    ; lcall checkstop
0627 C0E0       466            push acc
0629 7401       466            mov a, #1
062B 14         466            dec a
062C 1200C1     466            lcall ?Set_Cursor_1 ; Select column and row
062F D0E0       466            pop acc
0631 C083       467            push dph
0633 C082       467            push dpl
0635 C0E0       467            push acc
0637 9003FD     467            mov dptr, #TemperatureRise
063A 1200B4     467            lcall ?Send_Constant_String
063D D0E0       467            pop acc
063F D082       467            pop dpl
0641 D083       467            pop dph 
0643 12073E     468     lcall Readingtemperatures
0646 12075E     469      lcall DisplayingLCD
0649            470      
0649            471   
0649 C3         472     clr c
064A E546       473     mov a, reflowtemp
064C 953F       474     subb a, coldtemp
064E 50D7       475     jnc increasereflowtemp
0650            476      
0650 120758     477     lcall TurnOvenOff  
0653            478      
0653            479    ; lcall checkingreflowtemp
0653 120951     480     lcall State_change_BEEPER
0656 C2CA       481     clr tr2
0658 7400       482     mov a, #0
065A F550       483     mov second, a
065C D2CA       484     setb tr2
065E            485   
065E            486     ;----state 4 ---;
065E            487    reflowstate:
065E 120749     488     lcall checkstop
0661 12073E     489     lcall Readingtemperatures
0664 12075E     490      lcall DisplayingLCD
0667 120560     491       lcall display7seg
066A C0E0       492            push acc
066C 7401       492            mov a, #1
066E 14         492            dec a
066F 1200C1     492            lcall ?Set_Cursor_1 ; Select column and row
0672 D0E0       492            pop acc
0674 C083       493            push dph
0676 C082       493            push dpl
0678 C0E0       493            push acc
067A 9003DB     493            mov dptr, #ReflowStateMess
067D 1200B4     493            lcall ?Send_Constant_String
0680 D0E0       493            pop acc
0682 D082       493            pop dpl
0684 D083       493            pop dph 
0686 1206F1     494     lcall keepingreflowtempsame
0689 120701     495     lcall keepingreflowtempsame1
068C 120728     496     lcall checkreflowtime
068F 80CD       497     sjmp reflowstate
0691            498     
0691            499    ;------- state5-----;
0691            500    cooling:
0691 C0E0       501            push acc
0693 7401       501            mov a, #1
0695 14         501            dec a
0696 1200C1     501            lcall ?Set_Cursor_1 ; Select column and row
0699 D0E0       501            pop acc
069B C083       502            push dph
069D C082       502            push dpl
069F C0E0       502            push acc
06A1 90040E     502            mov dptr, #CoolingTemp
06A4 1200B4     502            lcall ?Send_Constant_String
06A7 D0E0       502            pop acc
06A9 D082       502            pop dpl
06AB D083       502            pop dph 
06AD 12073E     503    lcall Readingtemperatures
06B0 12075E     504     lcall DisplayingLCD
06B3 120560     505      lcall display7seg
06B6 1206BC     506    lcall waitforcooling
06B9            507   ; lcall Open_oven_toaster_BEEPER
06B9            508    
06B9 0206B9     509    ljmp $
06BC            510     
06BC            511   ;---------------------------------;
06BC            512   ; functions                                                                                  ;
06BC            513   ;---------------------------------; 
06BC            514   
06BC            515   waitforcooling:
06BC            516   
06BC            517   
06BC C3         518     clr c
06BD 743C       519     mov a, #60
06BF 953F       520     subb a, coldtemp
06C1 5003       521     jnc cooled
06C3 020691     522     ljmp cooling
06C6            523     
06C6            524     
06C6            525   ;        load_X(coldtemp)
06C6            526   ;  load_Y(60)
06C6            527   ;  lcall x_gteq_y   ; compare if temp >= 60 
06C6            528   ;  jnb mf, cooled
06C6            529   ;  ljmp cooling
06C6            530     
06C6            531    
06C6            532   cooled:
06C6 22         533            ret
06C7            534   
06C7            535   ; *********** STATE 2 **********
06C7            536   ; After reaching the soak temperature we stay at that temp 
06C7            537   ; for 60 to 120 seconds
06C7            538   
06C7            539   keepingsoaktempsame:
06C7 E544       540     mov a, soaktemp
06C9 2405       541     add a, #5
06CB F530       542     mov x, a
06CD            543      
06CD C3         544     clr c
06CE E530       545     mov a, x
06D0 953F       546     subb a, coldtemp
06D2 5014       547     jnc soaktempisokay
06D4 0206E9     548     ljmp soaktemptoohigh
06D7            549   
06D7            550     ;load_Y(coldtemp)
06D7            551     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
06D7            552    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
06D7            553    
06D7            554    keepingsoaktempsame1:
06D7            555     ; temp>= soaktemp-10
06D7            556    ; load_Y(5)
06D7            557    ; load_X(soaktemp)
06D7            558    ; lcall sub32   
06D7 E544       559     mov a, soaktemp
06D9 C3         560     clr c
06DA 9405       561     subb a, #5
06DC F530       562     mov x, a
06DE            563     
06DE C3         564     clr c
06DF E53F       565     mov a, coldtemp
06E1 9530       566     subb a, x
06E3 5003       567     jnc soaktempisokay
06E5 0206ED     568     ljmp soaktemptoolow
06E8            569     
06E8            570      
06E8            571     
06E8            572   soaktempisokay:
06E8 22         573            ret
06E9            574     
06E9            575   soaktemptoohigh: 
06E9 120758     576     lcall TurnOvenOff
06EC 22         577     ret
06ED            578     
06ED            579   soaktemptoolow:
06ED 12075B     580            lcall TurnOvenOn
06F0 22         581     ret
06F1            582     
06F1            583    keepingreflowtempsame:
06F1 E546       584     mov a, reflowtemp
06F3 2405       585     add a, #5
06F5 F530       586     mov x, a
06F7            587      
06F7 C3         588     clr c
06F8 E530       589     mov a, x
06FA 953F       590     subb a, coldtemp
06FC 50EA       591     jnc soaktempisokay
06FE 0206E9     592     ljmp soaktemptoohigh
0701            593   
0701            594     ;load_Y(coldtemp)
0701            595     ;lcall x_gteq_y   ; compare if temp <= soaktemp + 10
0701            596    ; jnb mf, soaktemptoohigh; if mf!=1 then keep checking
0701            597    
0701            598    keepingreflowtempsame1:
0701            599     ; temp>= soaktemp-10
0701            600    ; load_Y(5)
0701            601    ; load_X(soaktemp)
0701            602    ; lcall sub32   
0701 E546       603     mov a, reflowtemp
0703 C3         604     clr c
0704 9405       605     subb a, #5
0706 F530       606     mov x, a
0708            607     
0708 C3         608     clr c
0709 E53F       609     mov a, coldtemp
070B 9530       610     subb a, x
070D 50D9       611     jnc soaktempisokay
070F 0206ED     612     ljmp soaktemptoolow
0712            613     
0712            614    ; lower bound for the straight line for the soak temp: soaktemp-10
0712            615   ;  load_Y(coldtemp)
0712            616    ; lcall x_gteq_y   ; compare if temp <= soaktemp - 10 
0712            617    ; jb mf, soaktemptoolow; if mf!=1 then keep checking
0712            618    ; ljmp soaktempisokay
0712            619     
0712            620   
0712            621   checksoaktime:
0712            622   
0712            623    
0712 C3         624     clr c
0713 E545       625     mov a, soaktime
0715 9550       626     subb a, second
0717 500E       627     jnc soaknotdone
0719 12075B     628     lcall TurnOvenOn
071C C2CA       629     clr tr2
071E 7400       630     mov a, #0
0720 F550       631     mov second, a
0722 D2CA       632     setb tr2
0724 020627     633     ljmp increasereflowtemp
0727            634   soaknotdone:
0727 22         635            ret 
0728            636     
0728            637   checkreflowtime:
0728            638   
0728 C3         639     clr c
0729 E547       640     mov a, reflowtime
072B 9550       641     subb a, second
072D 500E       642     jnc reflownotdone
072F 120758     643     lcall TurnOvenOff
0732 C2CA       644     clr tr2
0734 7400       645     mov a, #0
0736 F550       646     mov second, a
0738 D2CA       647     setb tr2
073A 020691     648     ljmp cooling
073D            649   reflownotdone:
073D 22         650            ret
073E            651   
073E            652   ; reading the thermocouple junction values 
073E            653   Readingtemperatures:
073E 1207F0     654     lcall readingcoldjunction ;answer in x is saved in variable called 'coldtemp'
0741            655    ; lcall readinghotjunction
0741            656     
0741            657   
0741 E530       658     mov a, x
0743 F53F       659     mov coldtemp, a
0745 22         660    ret
0746            661    ; mov a, x
0746            662    ; mov coldtemp, a ;final temperature is in the temperature variable
0746            663    ; ret
0746            664   
0746            665   ; checking if the temperture at the hot end is equal to soak temp yet
0746            666   
0746            667   
0746            668   ;checkingsoaktemperature: 
0746            669   ;  clr c
0746            670    ; mov a, soaktemp
0746            671    ; subb a, coldtemp
0746            672    ; jnc Jump_to_FOREVER  
0746            673    ; lcall TurnOvenOff
0746            674    ; ret
0746            675   Jump_to_FOREVER:
0746 0205B4     676            ljmp FOREVER
0749            677   
0749            678   ; checking if the temperture at the hot end is equal to reflow temp yet
0749            679   
0749            680   
0749            681    ;stop the process at any time  
0749            682   checkstop:                     ; stop the reflow process
0749 208305     683            jb STARTBUTTON, return
074C 3083FD     684            jnb STARTBUTTON, $
074F 8001       685            sjmp stop
0751            686   return:
0751 22         687     ret
0752            688   stop:
0752 120758     689            lcall TurnOvenOff
0755 0209A0     690       ljmp menu_select1
0758            691   
0758            692     
0758            693   ;---------------------------------- ;
0758            694   ; SSR Box communicating with the           ;
0758            695   ; Microcontroller                                                                        ;
0758            696   ;(1) uses OvenButton to communicate ; 
0758            697     ;with the transistor to turn the       ;
0758            698     ;oven or off                                                                                   ;
0758            699   ;(2)                                                                                                                             ;
0758            700   ;                                                                                                                                                ;
0758            701   ;                                                                                                                                                ;
0758            702   ;-----------------------------------;
0758            703            
0758            704   TurnOvenOff:
0758 C2B6       705            clr OvenButton  
075A 22         706     ret
075B            707   TurnOvenOn:
075B D2B6       708            setb OvenButton
075D 22         709     ret
075E            710   
075E            711   DisplayingLCD:
075E            712   
075E C0E0       713            push acc
0760 740F       713            mov a, #15
0762 14         713            dec a
0763 1200BF     713            lcall ?Set_Cursor_2 ; Select column and row
0766 D0E0       713            pop acc
0768 74DF       714            mov a, #0xDF
076A 12007E     714            lcall ?WriteData
076D C0E0       715            push acc
076F 7410       715            mov a, #16
0771 14         715            dec a
0772 1200BF     715            lcall ?Set_Cursor_2 ; Select column and row
0775 D0E0       715            pop acc
0777 7443       716            mov a, #'C'
0779 12007E     716            lcall ?WriteData
077C            717       
077C 855038     718            mov bcd, second
077F C0E0       719            push acc
0781 7401       719            mov a, #1
0783 14         719            dec a
0784 1200BF     719            lcall ?Set_Cursor_2 ; Select column and row
0787 D0E0       719            pop acc
0789 C000       720            push ar0
078B A839       720            mov r0, bcd+1
078D 1200C6     720            lcall ?Display_BCD
0790 D000       720            pop ar0
0792 C0E0       721            push acc
0794 7403       721            mov a, #3
0796 14         721            dec a
0797 1200BF     721            lcall ?Set_Cursor_2 ; Select column and row
079A D0E0       721            pop acc
079C C000       722            push ar0
079E A838       722            mov r0, bcd
07A0 1200C6     722            lcall ?Display_BCD
07A3 D000       722            pop ar0
07A5            723            
07A5 C0E0       724            push acc
07A7 740C       724            mov a, #12
07A9 14         724            dec a
07AA 1200BF     724            lcall ?Set_Cursor_2 ; Select column and row
07AD D0E0       724            pop acc
07AF 853F30     725            mov x, coldtemp         
07B2 1200FA     726            lcall hex2bcd   
07B5 C000       727            push ar0
07B7 A838       727            mov r0, bcd
07B9 1200C6     727            lcall ?Display_BCD
07BC D000       727            pop ar0
07BE            728   
07BE C0E0       729            push acc
07C0 740A       729            mov a, #10
07C2 14         729            dec a
07C3 1200BF     729            lcall ?Set_Cursor_2 ; Select column and row
07C6 D0E0       729            pop acc
07C8 C000       730            push ar0
07CA A839       730            mov r0, bcd+1
07CC 1200C6     730            lcall ?Display_BCD
07CF D000       730            pop ar0         
07D1            731   
07D1            732   
07D1            733                    
07D1            734   
07D1 22         735       ret
07D2            736       
07D2            737       
07D2            738   
07D2            739   
07D2            740   
07D2            741   ;As a safety measure, the reflow process must be aborted if the oven doesn’t reach at least 50oC in the first 60 seconds of operation
07D2            742   checkerror: 
07D2 C0E0       743            push acc
07D4 C0D0       744     push psw
07D6            745     
07D6            746     
07D6 C3         747     clr c
07D7 7460       748     mov a, #0x60
07D9 9550       749     subb a, second
07DB 500E       750     jnc noerror
07DD            751   
07DD            752     
07DD 7450       753     mov a, #0x50
07DF 953F       754     subb a, coldtemp
07E1 5002       755     jnc error
07E3 8006       756     sjmp noerror
07E5            757     error:
07E5 120758     758     lcall TurnOvenOff
07E8 0209A0     759     ljmp Menu_Select1
07EB            760     
07EB            761   
07EB            762   noerror:
07EB D0D0       763     pop psw
07ED D0E0       764     pop acc 
07EF 22         765     ret
07F0            766            
07F0            767   ;------------------------------;
07F0            768   ; Temperature Reader From Sam     ;
07F0            769   ;------------------------------;
07F0            770            
07F0            771   readingcoldjunction: ;read the cold junction from the adc
07F0            772   ;reading the adc
07F0 C0E0       773            push acc
07F2 C0D0       774       push psw
07F4            775     
07F4 C2A0       776            clr CE_ADC 
07F6 7801       777            mov R0, #00000001B ; Start bit:1 
07F8 1204E4     778            lcall DO_SPI_G
07FB 7880       779            mov R0, #10000000B ; Single ended, read channel 0 
07FD 1204E4     780            lcall DO_SPI_G 
0800 E9         781            mov a, R1          ; R1 contains bits 8 and 9 
0801 5403       782            anl a, #00000011B  ; We need only the two least significant bits 
0803 F53E       783            mov Result+1, a    ; Save result high.
0805 7855       784            mov R0, #55H ; It doesn't matter what we transmit... 
0807 1204E4     785            lcall DO_SPI_G 
080A 893D       786            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
080C D2A0       787            setb CE_ADC 
080E            788            ;wait for 1 second 
080E C002       789            push AR2
0810 7AFA       789            mov R2, #250
0812 120039     789            lcall ?Wait_Milli_Seconds
0815 D002       789            pop AR2
0817 C002       790            push AR2
0819 7AFA       790            mov R2, #250
081B 120039     790            lcall ?Wait_Milli_Seconds
081E D002       790            pop AR2
0820            791     
0820 12082C     792            lcall Calculate_Temp_in_C 
0823 E530       793       mov a, x
0825 F53F       794       mov coldtemp, a
0827            795     
0827 D0D0       796              pop psw
0829 D0E0       797              pop acc
082B 22         798              ret   
082C            799               
082C            800   
082C            801   ;Trying to transfer the binary value in ADC into BCD and then into 
082C            802   ;ASCII to show in putty
082C            803   Calculate_Temp_in_C:     
082C E4         804            clr a 
082D 753000     805            mov x+0, #low (0 % 0x10000) 
0830 753100     805            mov x+1, #high(0 % 0x10000) 
0833 753200     805            mov x+2, #low (0 / 0x10000) 
0836 753300     805            mov x+3, #high(0 / 0x10000)     ; 
0839 753400     806            mov y+0, #low (0 % 0x10000) 
083C 753500     806            mov y+1, #high(0 % 0x10000) 
083F 753600     806            mov y+2, #low (0 / 0x10000) 
0842 753700     806            mov y+3, #high(0 / 0x10000) 
0845            807            ; load the result into X 
0845 E53D       808            mov a, Result+0
0847 F530       809            mov X, a
0849 E53E       810            mov a, Result+1
084B F531       811            mov X+1, a
084D 75349A     812            mov y+0, #low (410 % 0x10000) 
0850 753501     812            mov y+1, #high(410 % 0x10000) 
0853 753600     812            mov y+2, #low (410 / 0x10000) 
0856 753700     812            mov y+3, #high(410 / 0x10000) 
0859 120274     813            lcall mul32;
085C 7534FF     814            mov y+0, #low (1023 % 0x10000) 
085F 753503     814            mov y+1, #high(1023 % 0x10000) 
0862 753600     814            mov y+2, #low (1023 / 0x10000) 
0865 753700     814            mov y+3, #high(1023 / 0x10000) 
0868 120301     815            lcall div32;  
086B            816            ;calculte temperature 
086B 753411     817            mov y+0, #low (273 % 0x10000) 
086E 753501     817            mov y+1, #high(273 % 0x10000) 
0871 753600     817            mov y+2, #low (273 / 0x10000) 
0874 753700     817            mov y+3, #high(273 / 0x10000) 
0877 853052     818            mov temp, X
087A 1201E0     819            lcall sub32
087D 1200FA     820            lcall hex2bcd ; converts binary in x to BCD in BCD
0880            821            ;Set_Cursor(2, 13)
0880            822            ;Display_BCD(bcd)
0880            823   ;        lcall Display_Temp_Putty
0880 22         824            ret
0881            825   
0881            826   readinghotjunction: ;read the hot junction from the adc from oven and thermocouple wires
0881            827   ;reading the adc
0881 C0E0       828            push acc
0883 C0D0       829     push psw
0885            830     
0885 C2A0       831            clr CE_ADC 
0887 7801       832            mov R0, #00000001B ; Start bit:1 
0889 1204E4     833            lcall DO_SPI_G
088C 7890       834            mov R0, #10010000B ; Single ended, read channel 1 
088E 1204E4     835            lcall DO_SPI_G 
0891 E9         836            mov a, R1          ; R1 contains bits 8 and 9 
0892 5403       837            anl a, #00000011B  ; We need only the two least significant bits 
0894 F53E       838            mov Result+1, a    ; Save result high.
0896 7855       839            mov R0, #55H ; It doesn't matter what we transmit... 
0898 1204E4     840            lcall DO_SPI_G 
089B 893D       841            mov Result, R1     ; R1 contains bits 0 to 7.  Save result low. 
089D D2A0       842            setb CE_ADC 
089F            843            ;wait for 1 second 
089F C002       844            push AR2
08A1 7AFA       844            mov R2, #250
08A3 120039     844            lcall ?Wait_Milli_Seconds
08A6 D002       844            pop AR2
08A8 C002       845            push AR2
08AA 7AFA       845            mov R2, #250
08AC 120039     845            lcall ?Wait_Milli_Seconds
08AF D002       845            pop AR2
08B1            846            
08B1 753000     847            mov x+0, #low (0 % 0x10000) 
08B4 753100     847            mov x+1, #high(0 % 0x10000) 
08B7 753200     847            mov x+2, #low (0 / 0x10000) 
08BA 753300     847            mov x+3, #high(0 / 0x10000) 
08BD            848   
08BD E53D       849            mov a,Result
08BF F530       850            mov x,a
08C1 E53E       851            mov a,Result+1
08C3 F531       852            mov x+1,a
08C5            853            
08C5 1200FA     854            lcall hex2bcd
08C8            855                            
08C8            856     
08C8 1208D4     857            lcall Calculate_hot 
08CB E530       858       mov a, x
08CD F540       859       mov hottemp, a
08CF            860     
08CF D0D0       861              pop psw
08D1 D0E0       862              pop acc
08D3 22         863              ret   
08D4            864   
08D4            865   Calculate_hot:
08D4 C0E0       866   push acc
08D6 C0D0       867            push psw
08D8            868            ; Vout calculations
08D8 853D30     869            mov x, Result
08DB 853E31     870            mov x+1, Result+1
08DE 753200     871            mov x+2, #0
08E1 753300     872            mov x+3, #0
08E4            873            
08E4 75341D     874            mov y+0, #low (29 % 0x10000) 
08E7 753500     874            mov y+1, #high(29 % 0x10000) 
08EA 753600     874            mov y+2, #low (29 / 0x10000) 
08ED 753700     874            mov y+3, #high(29 / 0x10000) 
08F0 120274     875            lcall mul32
08F3 753466     876            mov y+0, #low (2150 % 0x10000) 
08F6 753508     876            mov y+1, #high(2150 % 0x10000) 
08F9 753600     876            mov y+2, #low (2150 / 0x10000) 
08FC 753700     876            mov y+3, #high(2150 / 0x10000) 
08FF 1201BF     877            lcall add32
0902 753464     878            mov y+0, #low (100 % 0x10000) 
0905 753500     878            mov y+1, #high(100 % 0x10000) 
0908 753600     878            mov y+2, #low (100 / 0x10000) 
090B 753700     878            mov y+3, #high(100 / 0x10000) 
090E 120301     879            lcall div32
0911            880       
0911 1200FA     881            lcall hex2bcd
0914 E530       882            mov a, x
0916 D0D0       883                    pop psw 
0918 D0E0       884            pop acc
091A 22         885            ret
091B            886                    
091B            887   ; Display Temperature in Putty!
091B            888   Display_Temp_Putty:
091B C000       889            push ar0
091D A839       889            mov r0, bcd+1
091F 1200E4     889            lcall ?Send_BCD
0922 D000       889            pop ar0
0924 C000       890            push ar0
0926 A838       890            mov r0, bcd
0928 1200E4     890            lcall ?Send_BCD
092B D000       890            pop ar0
092D 740D       891            mov a, #'\r'
092F 1204FD     892            lcall putchar1
0932 740A       893            mov a, #'\n'
0934 1204FD     894            lcall putchar1
0937 22         895            ret     
0938            896   ;beeper function to indicate reflow process has started
0938            897   Reflow_start_BEEPER:
0938 D2A4       898    setb BEEPER
093A B2A4       899    cpl BEEPER
093C C002       900            push AR2
093E 7AFA       900            mov R2, #250
0940 120039     900            lcall ?Wait_Milli_Seconds
0943 D002       900            pop AR2
0945 C002       901            push AR2
0947 7AFA       901            mov R2, #250
0949 120039     901            lcall ?Wait_Milli_Seconds
094C D002       901            pop AR2
094E C2A4       902    clr BEEPER
0950 22         903    ret
0951            904    
0951            905   State_change_BEEPER:
0951 D2A4       906    setb BEEPER
0953 B2A4       907    cpl BEEPER
0955 C002       908            push AR2
0957 7AFA       908            mov R2, #250
0959 120039     908            lcall ?Wait_Milli_Seconds
095C D002       908            pop AR2
095E C002       909            push AR2
0960 7AFA       909            mov R2, #250
0962 120039     909            lcall ?Wait_Milli_Seconds
0965 D002       909            pop AR2
0967 C2A4       910    clr BEEPER
0969 22         911    ret
096A            912    
096A            913   Open_toaster_oven_BEEPER:
096A E4         914    clr a ; c=0
096B            915   loop6times: 
096B B40601     916    cjne a, #6, beep
096E 22         917    ret
096F            918    beep: 
096F D2A4       919    setb BEEPER
0971 B2A4       920    cpl BEEPER
0973 C002       921            push AR2
0975 7A64       921            mov R2, #100
0977 120039     921            lcall ?Wait_Milli_Seconds
097A D002       921            pop AR2
097C C2A4       922    clr BEEPER
097E 04         923    inc a 
097F 80EA       924    sjmp loop6times
0981 22         925    ret
0982            926   ; Display Temperature in LCD
0982            927   Display_Temp_LCD:
0982            928   ; show temp in Celcius 
0982 C0E0       929            push acc
0984 7406       929            mov a, #6
0986 14         929            dec a
0987 1200C1     929            lcall ?Set_Cursor_1 ; Select column and row
098A D0E0       929            pop acc;
098C C000       930            push ar0
098E A839       930            mov r0, bcd+1
0990 1200C6     930            lcall ?Display_BCD
0993 D000       930            pop ar0
0995 C0E0       931            push acc
0997 7409       931            mov a, #9
0999 14         931            dec a
099A 1200C1     931            lcall ?Set_Cursor_1 ; Select column and row
099D D0E0       931            pop acc;  
099F 22         932            ret
09A0            933            
09A0            934   ; MENU SELECT;   
09A0            935            
09A0            936            
09A0            937   Menu_select1:  
09A0 7401       938            mov a, #0x01
09A2 120083     938            lcall ?WriteCommand
09A5 C002       939            push AR2
09A7 7A32       939            mov R2, #50
09A9 120039     939            lcall ?Wait_Milli_Seconds
09AC D002       939            pop AR2
09AE            940   Menu_select2:
09AE C0E0       941            push acc
09B0 7401       941            mov a, #1
09B2 14         941            dec a
09B3 1200C1     941            lcall ?Set_Cursor_1 ; Select column and row
09B6 D0E0       941            pop acc
09B8 C083       942            push dph
09BA C082       942            push dpl
09BC C0E0       942            push acc
09BE 900377     942            mov dptr, #MenuMessage1
09C1 1200B4     942            lcall ?Send_Constant_String
09C4 D0E0       942            pop acc
09C6 D082       942            pop dpl
09C8 D083       942            pop dph
09CA C0E0       943            push acc
09CC 7401       943            mov a, #1
09CE 14         943            dec a
09CF 1200BF     943            lcall ?Set_Cursor_2 ; Select column and row
09D2 D0E0       943            pop acc
09D4 C083       944            push dph
09D6 C082       944            push dpl
09D8 C0E0       944            push acc
09DA 900383     944            mov dptr, #MenuMessage2
09DD 1200B4     944            lcall ?Send_Constant_String
09E0 D0E0       944            pop acc
09E2 D082       944            pop dpl
09E4 D083       944            pop dph
09E6            945     
09E6 C002       946            push AR2
09E8 7A32       946            mov R2, #50
09EA 120039     946            lcall ?Wait_Milli_Seconds
09ED D002       946            pop AR2 ;go to set Soak Temperature
09EF 208406     947     jb BUTTON_1, Menu_select2_2
09F2 3084FD     948     jnb BUTTON_1, $
09F5 020A48     949     ljmp Jump_to_Set_SoakTemp1
09F8            950     
09F8            951   Menu_select2_2:
09F8 C002       952            push AR2
09FA 7A32       952            mov R2, #50
09FC 120039     952            lcall ?Wait_Milli_Seconds
09FF D002       952            pop AR2 ;go to set Soak Time
0A01 208506     953     jb BUTTON_2, Menu_select2_3
0A04 3085FD     954     jnb BUTTON_2, $
0A07 020A4B     955     ljmp Jump_to_Set_SoakTime1
0A0A            956     
0A0A            957   Menu_select2_3:
0A0A C002       958            push AR2
0A0C 7A32       958            mov R2, #50
0A0E 120039     958            lcall ?Wait_Milli_Seconds
0A11 D002       958            pop AR2 ;go to second set of menus
0A13 208606     959     jb BUTTON_3, Menu_select2_4
0A16 3086FD     960     jnb BUTTON_3, $
0A19 020A51     961     ljmp Jump_to_Menu_select3
0A1C            962     
0A1C            963   Menu_select2_4:
0A1C C002       964            push AR2
0A1E 7A32       964            mov R2, #50
0A20 120039     964            lcall ?Wait_Milli_Seconds
0A23 D002       964            pop AR2   ; start the reflow process
0A25 208326     965     jb StartButton, Jump_to_Menu_select2_1
0A28 3083FD     966     jnb StartButton, $
0A2B 020A2E     967     ljmp Jump_To_FOREVER1
0A2E            968     
0A2E            969   Jump_To_FOREVER1:
0A2E 7401       970            mov a, #0x01
0A30 120083     970            lcall ?WriteCommand
0A33 C002       971            push AR2
0A35 7A32       971            mov R2, #50
0A37 120039     971            lcall ?Wait_Milli_Seconds
0A3A D002       971            pop AR2
0A3C 12075B     972     lcall TurnOvenOn
0A3F 120446     973     lcall Timer2_init
0A42            974            
0A42 755000     975            mov second, #0
0A45            976            
0A45 0205B4     977            ljmp FOREVER
0A48            978   
0A48            979   Jump_to_Set_SoakTemp1:
0A48 020A54     980            ljmp Set_SoakTemp1
0A4B            981     
0A4B            982   Jump_to_Set_SoakTime1:
0A4B 020B58     983            ljmp Set_SoakTime1
0A4E            984            
0A4E            985   Jump_to_Menu_select2_1:
0A4E 0209AE     986            ljmp Menu_select2
0A51            987     
0A51            988   Jump_to_Menu_select3:
0A51 020C5C     989            ljmp Menu_select3
0A54            990   
0A54            991   ; Settings - Soak Temperature
0A54            992   Set_SoakTemp1:
0A54 7401       993            mov a, #0x01
0A56 120083     993            lcall ?WriteCommand          ;clear display
0A59 C002       994            push AR2
0A5B 7A32       994            mov R2, #50
0A5D 120039     994            lcall ?Wait_Milli_Seconds
0A60 D002       994            pop AR2
0A62 C0E0       995            push acc
0A64 7401       995            mov a, #1
0A66 14         995            dec a
0A67 1200C1     995            lcall ?Set_Cursor_1 ; Select column and row
0A6A D0E0       995            pop acc
0A6C C083       996            push dph
0A6E C082       996            push dpl
0A70 C0E0       996            push acc
0A72 9003AB     996            mov dptr, #MenuSoakTemp
0A75 1200B4     996            lcall ?Send_Constant_String
0A78 D0E0       996            pop acc
0A7A D082       996            pop dpl
0A7C D083       996            pop dph
0A7E C0E0       997            push acc
0A80 7401       997            mov a, #1
0A82 14         997            dec a
0A83 1200BF     997            lcall ?Set_Cursor_2 ; Select column and row
0A86 D0E0       997            pop acc
0A88 854430     998     mov x, soaktemp
0A8B 1200FA     999     lcall hex2bcd
0A8E C000      1000            push ar0
0A90 A839      1000            mov r0, bcd+1
0A92 1200C6    1000            lcall ?Display_BCD
0A95 D000      1000            pop ar0
0A97 C0E0      1001            push acc
0A99 7403      1001            mov a, #3
0A9B 14        1001            dec a
0A9C 1200BF    1001            lcall ?Set_Cursor_2 ; Select column and row
0A9F D0E0      1001            pop acc
0AA1 C000      1002            push ar0
0AA3 A838      1002            mov r0, bcd+0
0AA5 1200C6    1002            lcall ?Display_BCD
0AA8 D000      1002            pop ar0
0AAA           1003   Set_SoakTemp2:
0AAA 20840F    1004     jb BUTTON_1, Set_SoakTemp2_2
0AAD C002      1005            push AR2
0AAF 7A32      1005            mov R2, #50
0AB1 120039    1005            lcall ?Wait_Milli_Seconds
0AB4 D002      1005            pop AR2
0AB6 208403    1006     jb BUTTON_1, Set_SoakTemp2_2
0AB9 020AE3    1007     ljmp SoakTemp_inc
0ABC           1008   Set_SoakTemp2_2:
0ABC 20850F    1009     jb BUTTON_2, Set_SoakTemp2_3
0ABF C002      1010            push AR2
0AC1 7A32      1010            mov R2, #50
0AC3 120039    1010            lcall ?Wait_Milli_Seconds
0AC6 D002      1010            pop AR2
0AC8 208503    1011     jb BUTTON_2, Set_SoakTemp2_3
0ACB 020B07    1012     ljmp SoakTemp_dec
0ACE           1013   Set_SoakTemp2_3:
0ACE 20860F    1014            jb BUTTON_3, Set_SoakTemp2_4
0AD1 C002      1015            push AR2
0AD3 7A32      1015            mov R2, #50
0AD5 120039    1015            lcall ?Wait_Milli_Seconds
0AD8 D002      1015            pop AR2
0ADA 208603    1016     jb BUTTON_3, Set_SoakTemp2_4
0ADD 0209A0    1017     ljmp Menu_select1
0AE0           1018   Set_SoakTemp2_4:
0AE0 020AAA    1019     ljmp Set_SoakTemp2
0AE3           1020     
0AE3           1021   soaktemp_inc:
0AE3 854430    1022    mov x, soaktemp
0AE6 753100    1023    mov x+1, #0
0AE9 753200    1024    mov x+2, #0
0AEC 753300    1025    mov x+3, #0
0AEF 753401    1026            mov y+0, #low (1 % 0x10000) 
0AF2 753500    1026            mov y+1, #high(1 % 0x10000) 
0AF5 753600    1026            mov y+2, #low (1 / 0x10000) 
0AF8 753700    1026            mov y+3, #high(1 / 0x10000) 
0AFB 1201BF    1027    lcall add32
0AFE 853044    1028    mov soaktemp, x
0B01 120B2B    1029    lcall display_soak_temp 
0B04 020AAA    1030    ljmp Set_SoakTemp2
0B07           1031    
0B07           1032   soaktemp_dec: 
0B07 854430    1033    mov x, soaktemp
0B0A 753100    1034    mov x+1, #0
0B0D 753200    1035    mov x+2, #0
0B10 753300    1036    mov x+3, #0
0B13 753401    1037            mov y+0, #low (1 % 0x10000) 
0B16 753500    1037            mov y+1, #high(1 % 0x10000) 
0B19 753600    1037            mov y+2, #low (1 / 0x10000) 
0B1C 753700    1037            mov y+3, #high(1 / 0x10000) 
0B1F 1201E0    1038    lcall sub32
0B22 853044    1039    mov soaktemp, x
0B25 120B2B    1040    lcall display_soak_temp 
0B28 020AAA    1041    ljmp Set_SoakTemp2
0B2B           1042     
0B2B           1043   display_soak_temp: 
0B2B 854430    1044    mov x, soaktemp
0B2E 1200FA    1045    lcall hex2bcd
0B31 C0E0      1046            push acc
0B33 7401      1046            mov a, #1
0B35 14        1046            dec a
0B36 1200BF    1046            lcall ?Set_Cursor_2 ; Select column and row
0B39 D0E0      1046            pop acc
0B3B C000      1047            push ar0
0B3D A839      1047            mov r0, bcd+1
0B3F 1200C6    1047            lcall ?Display_BCD
0B42 D000      1047            pop ar0
0B44 C0E0      1048            push acc
0B46 7403      1048            mov a, #3
0B48 14        1048            dec a
0B49 1200BF    1048            lcall ?Set_Cursor_2 ; Select column and row
0B4C D0E0      1048            pop acc
0B4E C000      1049            push ar0
0B50 A838      1049            mov r0, bcd+0
0B52 1200C6    1049            lcall ?Display_BCD
0B55 D000      1049            pop ar0
0B57 22        1050   ret   
0B58           1051   
0B58           1052   ; Settings - Soak Time
0B58           1053   Set_SoakTime1:
0B58 7401      1054            mov a, #0x01
0B5A 120083    1054            lcall ?WriteCommand          ;clear display
0B5D C002      1055            push AR2
0B5F 7A32      1055            mov R2, #50
0B61 120039    1055            lcall ?Wait_Milli_Seconds
0B64 D002      1055            pop AR2
0B66 C0E0      1056            push acc
0B68 7401      1056            mov a, #1
0B6A 14        1056            dec a
0B6B 1200C1    1056            lcall ?Set_Cursor_1 ; Select column and row
0B6E D0E0      1056            pop acc
0B70 C083      1057            push dph
0B72 C082      1057            push dpl
0B74 C0E0      1057            push acc
0B76 9003B6    1057            mov dptr, #MenuSoakTime
0B79 1200B4    1057            lcall ?Send_Constant_String
0B7C D0E0      1057            pop acc
0B7E D082      1057            pop dpl
0B80 D083      1057            pop dph
0B82 C0E0      1058            push acc
0B84 7401      1058            mov a, #1
0B86 14        1058            dec a
0B87 1200BF    1058            lcall ?Set_Cursor_2 ; Select column and row
0B8A D0E0      1058            pop acc
0B8C 854530    1059     mov x, soaktime
0B8F 1200FA    1060     lcall hex2bcd
0B92 C000      1061            push ar0
0B94 A839      1061            mov r0, bcd+1
0B96 1200C6    1061            lcall ?Display_BCD
0B99 D000      1061            pop ar0
0B9B C0E0      1062            push acc
0B9D 7403      1062            mov a, #3
0B9F 14        1062            dec a
0BA0 1200BF    1062            lcall ?Set_Cursor_2 ; Select column and row
0BA3 D0E0      1062            pop acc
0BA5 C000      1063            push ar0
0BA7 A838      1063            mov r0, bcd+0
0BA9 1200C6    1063            lcall ?Display_BCD
0BAC D000      1063            pop ar0
0BAE           1064   Set_SoakTime2:
0BAE 20840F    1065     jb BUTTON_1, Set_SoakTime2_2
0BB1 C002      1066            push AR2
0BB3 7A32      1066            mov R2, #50
0BB5 120039    1066            lcall ?Wait_Milli_Seconds
0BB8 D002      1066            pop AR2
0BBA 208403    1067     jb BUTTON_1, Set_SoakTime2_2
0BBD 020BE7    1068     ljmp SoakTime_inc
0BC0           1069   Set_SoakTime2_2:
0BC0 20850F    1070     jb BUTTON_2, Set_SoakTime2_3
0BC3 C002      1071            push AR2
0BC5 7A32      1071            mov R2, #50
0BC7 120039    1071            lcall ?Wait_Milli_Seconds
0BCA D002      1071            pop AR2
0BCC 208503    1072     jb BUTTON_2, Set_SoakTime2_3
0BCF 020C0B    1073     ljmp SoakTime_dec
0BD2           1074   Set_SoakTime2_3:
0BD2 20860F    1075            jb BUTTON_3, Set_SoakTime2_4
0BD5 C002      1076            push AR2
0BD7 7A32      1076            mov R2, #50
0BD9 120039    1076            lcall ?Wait_Milli_Seconds
0BDC D002      1076            pop AR2
0BDE 208603    1077     jb BUTTON_3, Set_SoakTime2_4
0BE1 0209A0    1078     ljmp Menu_select1
0BE4           1079   Set_SoakTime2_4:
0BE4 020BAE    1080     ljmp Set_SoakTime2
0BE7           1081   
0BE7           1082   soaktime_inc:
0BE7 854530    1083    mov x, soaktime
0BEA 753100    1084    mov x+1, #0
0BED 753200    1085    mov x+2, #0
0BF0 753300    1086    mov x+3, #0
0BF3 753401    1087            mov y+0, #low (1 % 0x10000) 
0BF6 753500    1087            mov y+1, #high(1 % 0x10000) 
0BF9 753600    1087            mov y+2, #low (1 / 0x10000) 
0BFC 753700    1087            mov y+3, #high(1 / 0x10000) 
0BFF 1201BF    1088    lcall add32
0C02 853045    1089    mov soaktime, x
0C05 120C2F    1090    lcall display_soak_time
0C08 020BAE    1091    ljmp Set_SoakTime2
0C0B           1092    
0C0B           1093   soaktime_dec: 
0C0B 854530    1094    mov x, soaktime
0C0E 753100    1095    mov x+1, #0
0C11 753200    1096    mov x+2, #0
0C14 753300    1097    mov x+3, #0
0C17 753401    1098            mov y+0, #low (1 % 0x10000) 
0C1A 753500    1098            mov y+1, #high(1 % 0x10000) 
0C1D 753600    1098            mov y+2, #low (1 / 0x10000) 
0C20 753700    1098            mov y+3, #high(1 / 0x10000) 
0C23 1201E0    1099    lcall sub32
0C26 853045    1100    mov soaktime, x
0C29 120C2F    1101    lcall display_soak_time
0C2C 020BAE    1102    ljmp Set_SoakTime2
0C2F           1103     
0C2F           1104   display_soak_time: 
0C2F 854530    1105    mov x, soaktime
0C32 1200FA    1106    lcall hex2bcd
0C35 C0E0      1107            push acc
0C37 7401      1107            mov a, #1
0C39 14        1107            dec a
0C3A 1200BF    1107            lcall ?Set_Cursor_2 ; Select column and row
0C3D D0E0      1107            pop acc
0C3F C000      1108            push ar0
0C41 A839      1108            mov r0, bcd+1
0C43 1200C6    1108            lcall ?Display_BCD
0C46 D000      1108            pop ar0
0C48 C0E0      1109            push acc
0C4A 7403      1109            mov a, #3
0C4C 14        1109            dec a
0C4D 1200BF    1109            lcall ?Set_Cursor_2 ; Select column and row
0C50 D0E0      1109            pop acc
0C52 C000      1110            push ar0
0C54 A838      1110            mov r0, bcd+0
0C56 1200C6    1110            lcall ?Display_BCD
0C59 D000      1110            pop ar0
0C5B 22        1111   ret   
0C5C           1112   
0C5C           1113   
0C5C           1114   ; Second set of Menu - Set reflow parameters
0C5C           1115   Menu_select3:
0C5C 7401      1116            mov a, #0x01
0C5E 120083    1116            lcall ?WriteCommand
0C61 C002      1117            push AR2
0C63 7A32      1117            mov R2, #50
0C65 120039    1117            lcall ?Wait_Milli_Seconds
0C68 D002      1117            pop AR2
0C6A           1118   Menu_select4:
0C6A C0E0      1119            push acc
0C6C 7401      1119            mov a, #1
0C6E 14        1119            dec a
0C6F 1200C1    1119            lcall ?Set_Cursor_1 ; Select column and row
0C72 D0E0      1119            pop acc
0C74 C083      1120            push dph
0C76 C082      1120            push dpl
0C78 C0E0      1120            push acc
0C7A 90038F    1120            mov dptr, #MenuMessage3
0C7D 1200B4    1120            lcall ?Send_Constant_String
0C80 D0E0      1120            pop acc
0C82 D082      1120            pop dpl
0C84 D083      1120            pop dph
0C86 C0E0      1121            push acc
0C88 7401      1121            mov a, #1
0C8A 14        1121            dec a
0C8B 1200BF    1121            lcall ?Set_Cursor_2 ; Select column and row
0C8E D0E0      1121            pop acc
0C90 C083      1122            push dph
0C92 C082      1122            push dpl
0C94 C0E0      1122            push acc
0C96 90039D    1122            mov dptr, #MenuMessage4
0C99 1200B4    1122            lcall ?Send_Constant_String
0C9C D0E0      1122            pop acc
0C9E D082      1122            pop dpl
0CA0 D083      1122            pop dph
0CA2           1123     
0CA2 C002      1124            push AR2
0CA4 7A32      1124            mov R2, #50
0CA6 120039    1124            lcall ?Wait_Milli_Seconds
0CA9 D002      1124            pop AR2 ;go to set Reflow Temperature
0CAB 208406    1125     jb BUTTON_1, Menu_select4_2
0CAE 3084FD    1126     jnb BUTTON_1, $
0CB1 020CED    1127     ljmp Jump_to_Set_ReflowTemp1
0CB4           1128     
0CB4           1129   Menu_select4_2:
0CB4 C002      1130            push AR2
0CB6 7A32      1130            mov R2, #50
0CB8 120039    1130            lcall ?Wait_Milli_Seconds
0CBB D002      1130            pop AR2 ;go to set Reflow Time
0CBD 208506    1131     jb BUTTON_2, Menu_select4_3
0CC0 3085FD    1132     jnb BUTTON_2, $
0CC3 020CF0    1133     ljmp Jump_to_Set_ReflowTime1
0CC6           1134     
0CC6           1135   Menu_select4_3:
0CC6 C002      1136            push AR2
0CC8 7A32      1136            mov R2, #50
0CCA 120039    1136            lcall ?Wait_Milli_Seconds
0CCD D002      1136            pop AR2 ;go to first set of menus
0CCF 208606    1137     jb BUTTON_3, Menu_select4_4
0CD2 3086FD    1138     jnb BUTTON_3, $
0CD5 020CF6    1139     ljmp Jump_to_Menu_select2
0CD8           1140   
0CD8           1141   Menu_select4_4:
0CD8 C002      1142            push AR2
0CDA 7A32      1142            mov R2, #50
0CDC 120039    1142            lcall ?Wait_Milli_Seconds
0CDF D002      1142            pop AR2   ; start the reflow process
0CE1 20830F    1143     jb StartButton, Jump_to_Menu_select3_1
0CE4 3083FD    1144     jnb StartButton, $
0CE7 020A2E    1145     ljmp Jump_To_FOREVER1
0CEA           1146   
0CEA           1147   Jump_To_FOREVER2:
0CEA 0205B4    1148            ljmp FOREVER
0CED           1149     
0CED           1150   
0CED           1151   Jump_to_Set_ReflowTemp1:
0CED 020CF9    1152            ljmp Set_ReflowTemp1
0CF0           1153     
0CF0           1154   Jump_to_Set_ReflowTime1:
0CF0 020E06    1155            ljmp Set_ReflowTime1
0CF3           1156            
0CF3           1157   Jump_to_Menu_select3_1:
0CF3 020C6A    1158            ljmp Menu_select4
0CF6           1159     
0CF6           1160   Jump_to_Menu_select2:
0CF6 0209A0    1161            ljmp Menu_select1
0CF9           1162     
0CF9           1163   ; Settings - Reflow Temperature
0CF9           1164   Set_ReflowTemp1:
0CF9 7401      1165            mov a, #0x01
0CFB 120083    1165            lcall ?WriteCommand          ;clear display
0CFE C002      1166            push AR2
0D00 7A32      1166            mov R2, #50
0D02 120039    1166            lcall ?Wait_Milli_Seconds
0D05 D002      1166            pop AR2
0D07 C0E0      1167            push acc
0D09 7401      1167            mov a, #1
0D0B 14        1167            dec a
0D0C 1200C1    1167            lcall ?Set_Cursor_1 ; Select column and row
0D0F D0E0      1167            pop acc
0D11 C083      1168            push dph
0D13 C082      1168            push dpl
0D15 C0E0      1168            push acc
0D17 9003C1    1168            mov dptr, #MenuReflowTemp
0D1A 1200B4    1168            lcall ?Send_Constant_String
0D1D D0E0      1168            pop acc
0D1F D082      1168            pop dpl
0D21 D083      1168            pop dph
0D23 C0E0      1169            push acc
0D25 7401      1169            mov a, #1
0D27 14        1169            dec a
0D28 1200BF    1169            lcall ?Set_Cursor_2 ; Select column and row
0D2B D0E0      1169            pop acc
0D2D 854630    1170     mov x, reflowtemp
0D30 1200FA    1171     lcall hex2bcd
0D33 C000      1172            push ar0
0D35 A839      1172            mov r0, bcd+1
0D37 1200C6    1172            lcall ?Display_BCD
0D3A D000      1172            pop ar0
0D3C C0E0      1173            push acc
0D3E 7403      1173            mov a, #3
0D40 14        1173            dec a
0D41 1200BF    1173            lcall ?Set_Cursor_2 ; Select column and row
0D44 D0E0      1173            pop acc
0D46 C000      1174            push ar0
0D48 A838      1174            mov r0, bcd+0
0D4A 1200C6    1174            lcall ?Display_BCD
0D4D D000      1174            pop ar0
0D4F           1175     
0D4F           1176   Set_ReflowTemp2:
0D4F 20840F    1177     jb BUTTON_1, Set_ReflowTemp2_2
0D52 C002      1178            push AR2
0D54 7A32      1178            mov R2, #50
0D56 120039    1178            lcall ?Wait_Milli_Seconds
0D59 D002      1178            pop AR2
0D5B 208403    1179     jb BUTTON_1, Set_ReflowTemp2_2
0D5E 020DE2    1180     ljmp ReflowTemp_inc
0D61           1181   Set_ReflowTemp2_2:
0D61 20850F    1182     jb BUTTON_2, Set_ReflowTemp2_3
0D64 C002      1183            push AR2
0D66 7A32      1183            mov R2, #50
0D68 120039    1183            lcall ?Wait_Milli_Seconds
0D6B D002      1183            pop AR2
0D6D 208503    1184     jb BUTTON_2, Set_ReflowTemp2_3
0D70 020D88    1185     ljmp ReflowTemp_dec
0D73           1186   Set_ReflowTemp2_3:
0D73 20860F    1187            jb BUTTON_3, Set_ReflowTemp2_4
0D76 C002      1188            push AR2
0D78 7A32      1188            mov R2, #50
0D7A 120039    1188            lcall ?Wait_Milli_Seconds
0D7D D002      1188            pop AR2
0D7F 208603    1189     jb BUTTON_3, Set_ReflowTemp2_4
0D82 020C5C    1190     ljmp Menu_select3
0D85           1191   Set_ReflowTemp2_4:
0D85 020D4F    1192     ljmp Set_ReflowTemp2
0D88           1193    
0D88           1194    
0D88           1195    
0D88           1196     
0D88           1197   ReflowTemp_dec:
0D88 854630    1198    mov x, reflowtemp
0D8B 753100    1199    mov x+1, #0
0D8E 753200    1200    mov x+2, #0
0D91 753300    1201    mov x+3, #0
0D94 753401    1202            mov y+0, #low (1 % 0x10000) 
0D97 753500    1202            mov y+1, #high(1 % 0x10000) 
0D9A 753600    1202            mov y+2, #low (1 / 0x10000) 
0D9D 753700    1202            mov y+3, #high(1 / 0x10000) 
0DA0 1201E0    1203    lcall sub32
0DA3 853046    1204    mov reflowtemp, x
0DA6 120DAC    1205    lcall display_reflow_temp
0DA9 020D4F    1206    ljmp Set_reflowtemp2
0DAC           1207     
0DAC           1208   display_reflow_temp: 
0DAC 854630    1209    mov x, reflowtemp
0DAF 753100    1210    mov x+1, #0
0DB2 753200    1211    mov x+2, #0
0DB5 753300    1212    mov x+3, #0
0DB8 1200FA    1213    lcall hex2bcd
0DBB C0E0      1214            push acc
0DBD 7401      1214            mov a, #1
0DBF 14        1214            dec a
0DC0 1200BF    1214            lcall ?Set_Cursor_2 ; Select column and row
0DC3 D0E0      1214            pop acc
0DC5 C000      1215            push ar0
0DC7 A839      1215            mov r0, bcd+1
0DC9 1200C6    1215            lcall ?Display_BCD
0DCC D000      1215            pop ar0
0DCE C0E0      1216            push acc
0DD0 7403      1216            mov a, #3
0DD2 14        1216            dec a
0DD3 1200BF    1216            lcall ?Set_Cursor_2 ; Select column and row
0DD6 D0E0      1216            pop acc
0DD8 C000      1217            push ar0
0DDA A838      1217            mov r0, bcd+0
0DDC 1200C6    1217            lcall ?Display_BCD
0DDF D000      1217            pop ar0
0DE1 22        1218   ret   
0DE2           1219    
0DE2           1220     
0DE2           1221   Reflowtemp_inc:
0DE2 854630    1222    mov x, reflowtemp
0DE5 753100    1223    mov x+1, #0
0DE8 753200    1224    mov x+2, #0
0DEB 753300    1225    mov x+3, #0
0DEE 753401    1226            mov y+0, #low (1 % 0x10000) 
0DF1 753500    1226            mov y+1, #high(1 % 0x10000) 
0DF4 753600    1226            mov y+2, #low (1 / 0x10000) 
0DF7 753700    1226            mov y+3, #high(1 / 0x10000) 
0DFA 1201BF    1227    lcall add32
0DFD 853046    1228    mov reflowtemp, x
0E00 120DAC    1229    lcall display_reflow_temp
0E03 020D4F    1230    ljmp Set_Reflowtemp2
0E06           1231   
0E06           1232   ; Settings - Reflow Time
0E06           1233   Set_ReflowTime1:
0E06 7401      1234            mov a, #0x01
0E08 120083    1234            lcall ?WriteCommand          ;clear display
0E0B C002      1235            push AR2
0E0D 7A32      1235            mov R2, #50
0E0F 120039    1235            lcall ?Wait_Milli_Seconds
0E12 D002      1235            pop AR2
0E14 C0E0      1236            push acc
0E16 7401      1236            mov a, #1
0E18 14        1236            dec a
0E19 1200C1    1236            lcall ?Set_Cursor_1 ; Select column and row
0E1C D0E0      1236            pop acc
0E1E C083      1237            push dph
0E20 C082      1237            push dpl
0E22 C0E0      1237            push acc
0E24 9003CE    1237            mov dptr, #MenuReflowTime
0E27 1200B4    1237            lcall ?Send_Constant_String
0E2A D0E0      1237            pop acc
0E2C D082      1237            pop dpl
0E2E D083      1237            pop dph
0E30 C0E0      1238            push acc
0E32 7401      1238            mov a, #1
0E34 14        1238            dec a
0E35 1200BF    1238            lcall ?Set_Cursor_2 ; Select column and row
0E38 D0E0      1238            pop acc
0E3A 854730    1239     mov x, reflowtime
0E3D 1200FA    1240     lcall hex2bcd
0E40 C000      1241            push ar0
0E42 A839      1241            mov r0, bcd+1
0E44 1200C6    1241            lcall ?Display_BCD
0E47 D000      1241            pop ar0
0E49 C0E0      1242            push acc
0E4B 7403      1242            mov a, #3
0E4D 14        1242            dec a
0E4E 1200BF    1242            lcall ?Set_Cursor_2 ; Select column and row
0E51 D0E0      1242            pop acc
0E53 C000      1243            push ar0
0E55 A838      1243            mov r0, bcd+0
0E57 1200C6    1243            lcall ?Display_BCD
0E5A D000      1243            pop ar0
0E5C           1244   Set_ReflowTime2:
0E5C 20840F    1245     jb BUTTON_1, Set_ReflowTime2_2
0E5F C002      1246            push AR2
0E61 7A32      1246            mov R2, #50
0E63 120039    1246            lcall ?Wait_Milli_Seconds
0E66 D002      1246            pop AR2
0E68 208403    1247     jb BUTTON_1, Set_ReflowTime2_2
0E6B 020E95    1248     ljmp ReflowTime_inc
0E6E           1249   Set_ReflowTime2_2:
0E6E 20850F    1250     jb BUTTON_2, Set_ReflowTime2_3
0E71 C002      1251            push AR2
0E73 7A32      1251            mov R2, #50
0E75 120039    1251            lcall ?Wait_Milli_Seconds
0E78 D002      1251            pop AR2
0E7A 208503    1252     jb BUTTON_2, Set_ReflowTime2_3
0E7D 020EEF    1253     ljmp ReflowTime_dec
0E80           1254   Set_ReflowTime2_3:
0E80 20860F    1255            jb BUTTON_3, Set_ReflowTime2_4
0E83 C002      1256            push AR2
0E85 7A32      1256            mov R2, #50
0E87 120039    1256            lcall ?Wait_Milli_Seconds
0E8A D002      1256            pop AR2
0E8C 208603    1257     jb BUTTON_3, Set_ReflowTime2_4
0E8F 020C5C    1258     ljmp Menu_select3
0E92           1259   Set_ReflowTime2_4:
0E92 020E5C    1260     ljmp Set_ReflowTime2
0E95           1261   
0E95           1262   ReflowTime_inc:
0E95 854730    1263    mov x, reflowtime
0E98 753100    1264    mov x+1, #0
0E9B 753200    1265    mov x+2, #0
0E9E 753300    1266    mov x+3, #0
0EA1 753401    1267            mov y+0, #low (1 % 0x10000) 
0EA4 753500    1267            mov y+1, #high(1 % 0x10000) 
0EA7 753600    1267            mov y+2, #low (1 / 0x10000) 
0EAA 753700    1267            mov y+3, #high(1 / 0x10000) 
0EAD 1201BF    1268    lcall add32
0EB0 853047    1269    mov reflowtime, x
0EB3 120EB9    1270    lcall display_reflow_time 
0EB6 020E5C    1271    ljmp Set_reflowTime2
0EB9           1272     
0EB9           1273   display_reflow_time: 
0EB9 854730    1274    mov x, reflowtime
0EBC 753100    1275    mov x+1, #0
0EBF 753200    1276    mov x+2, #0
0EC2 753300    1277    mov x+3, #0
0EC5 1200FA    1278    lcall hex2bcd
0EC8 C0E0      1279            push acc
0ECA 7401      1279            mov a, #1
0ECC 14        1279            dec a
0ECD 1200BF    1279            lcall ?Set_Cursor_2 ; Select column and row
0ED0 D0E0      1279            pop acc
0ED2 C000      1280            push ar0
0ED4 A839      1280            mov r0, bcd+1
0ED6 1200C6    1280            lcall ?Display_BCD
0ED9 D000      1280            pop ar0
0EDB C0E0      1281            push acc
0EDD 7403      1281            mov a, #3
0EDF 14        1281            dec a
0EE0 1200BF    1281            lcall ?Set_Cursor_2 ; Select column and row
0EE3 D0E0      1281            pop acc
0EE5 C000      1282            push ar0
0EE7 A838      1282            mov r0, bcd+0
0EE9 1200C6    1282            lcall ?Display_BCD
0EEC D000      1282            pop ar0
0EEE 22        1283   ret   
0EEF           1284    
0EEF           1285     
0EEF           1286   ReflowTime_dec:
0EEF 854730    1287    mov x, reflowtime
0EF2 753100    1288    mov x+1, #0
0EF5 753200    1289    mov x+2, #0
0EF8 753300    1290    mov x+3, #0
0EFB 753401    1291            mov y+0, #low (1 % 0x10000) 
0EFE 753500    1291            mov y+1, #high(1 % 0x10000) 
0F01 753600    1291            mov y+2, #low (1 / 0x10000) 
0F04 753700    1291            mov y+3, #high(1 / 0x10000) 
0F07 1201E0    1292    lcall sub32
0F0A 853047    1293    mov reflowtime, x
0F0D 120EB9    1294    lcall display_reflow_time
0F10 020E5C    1295    ljmp Set_Reflowtime2
0F13           1296   
0F13           1297            
0F13           1298            
0F13           1299   EN
>>>>>>> 3c3cc3a884d9231d02d64d0965b1b1ca7d621673
